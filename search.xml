<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>Android TextViews</title>
      <link href="/20181210/textviews/"/>
      <url>/20181210/textviews/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Autosizing-TextViews"><a href="#Autosizing-TextViews" class="headerlink" title="Autosizing TextViews"></a>Autosizing TextViews</h2><p>使用Android 8.0（API级别26）及更高版本，可以让 <code>TextView</code>文本大小自动扩展或收缩，以根据其<code>TextView</code>特征和边界填充其布局 。此设置可以更轻松地使用动态内容优化不同屏幕上的文本大小。</p><p>Support Library 26.0完全支持 <code>TextView</code>在Android 8.0（API级别26）之前运行Android版本的设备上的自动调整功能。该库提供对Android 4.0（API级别14）及更高版本的支持。该<code>android.support.v4.widget</code> 软件包含<code>TextViewCompat</code>以向后兼容方式访问功能的类</p><a id="more"></a><h3 id="设置TextView自动调整大小"><a href="#设置TextView自动调整大小" class="headerlink" title="设置TextView自动调整大小"></a>设置TextView自动调整大小</h3><p>可以使用框架或支持库以 <code>TextView</code>编程方式或以XML格式设置自动调整大小。要设置XML属性，还可以使用 Android Studio中的“ <strong>属性”</strong>窗口。</p><p>有三种方法可以设置自动调整 <code>TextView</code>：<a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#default" target="_blank" rel="noopener">默认</a>, <a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#granularity" target="_blank" rel="noopener">粒度</a>, <a href="https://developer.android.com/guide/topics/ui/look-and-feel/autosizing-textview#preset-sizes" target="_blank" rel="noopener">预设尺寸</a></p><p><strong>注</strong>：如果设置在一个XML文件自动调整大小，不建议使用值“WRAP_CONTENT”为 <code>layout_width</code>或<code>layout_height</code>的属性<code>TextView</code>。它可能会产生意外的结果。</p><h3 id="默认"><a href="#默认" class="headerlink" title="默认"></a>默认</h3><p>默认设置允许<code>TextView</code>在水平轴和垂直轴上均匀地自动调整刻度。</p><ul><li>要以Code方式定义默认设置，请调用 <code>setAutoSizeTextTypeWithDefaults(int autoSizeTextType)</code>方法。提供<code>AUTO_SIZE_TEXT_TYPE_NONE</code>关闭自动调整功能或<code>AUTO_SIZE_TEXT_TYPE_UNIFORM</code>均匀缩放水平轴和垂直轴。</li><li><p><strong>注</strong>：为统一缩放的默认尺寸<code>minTextSize = 12sp</code>， <code>maxTextSize = 112sp</code>以及 <code>granularity = 1px.</code></p></li><li><p>要在XML中定义默认设置，请使用<code>android</code>命名空间并将<code>autoSizeTextType</code>属性设置为<em>none</em>或 <em>uniform</em>。</p></li><li><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li></ul><h4 id="使用支持库"><a href="#使用支持库" class="headerlink" title="使用支持库"></a>使用支持库</h4><ul><li>要通过支持库以编程方式定义默认设置，请调用该<code>TextViewCompat.setAutoSizeTextTypeWithDefaults(TextView textview, int autoSizeTextType)</code> 方法。提供<code>TextView</code>窗口小部件的实例和其中一种文本类型，例如 <code>TextViewCompat.AUTO_SIZE_TEXT_TYPE_NONE</code>或<code>TextViewCompat.AUTO_SIZE_TEXT_TYPE_UNIFORM</code>。</li><li>要通过支持库在XML中定义默认设置，请使用 <code>app</code>命名空间并将<code>autoSizeTextType</code> 属性设置为<em>none</em>或<em>uniform</em>。</li><li><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="粒度"><a href="#粒度" class="headerlink" title="粒度"></a>粒度</h3><p>可以定义最小和最大文本大小的范围以及指定每个步骤大小的维度。的 <code>TextView</code>均匀的最小和最大尺寸的属性之间的范围内的鳞片。每个增量按粒度属性中设置的步长进行。</p><ul><li>要以编程方式定义文本大小范围和维度，请调用该 <code>setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit)</code> 方法。提供最大值，最小值，粒度值和任何<code>TypedValue</code>维度单位。</li><li>要在XML中定义一系列文本大小和维度，请使用<code>android</code>命名空间并设置以下属性：<ul><li>将 <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeText" target="_blank" rel="noopener"><code>autoSizeText</code></a> 属性设置为<em>none</em>或<em>uniform</em>。<em>none</em> 是默认值，<em>uniform</em>可以 <code>TextView</code>在水平和垂直轴上<em>均匀</em>缩放。</li><li>设置<a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeMinTextSize" target="_blank" rel="noopener"><code>autoSizeMinTextSize</code></a>， <a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeMaxTextSize" target="_blank" rel="noopener"><code>autoSizeMaxTextSize</code></a>和<a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeStepGranularity" target="_blank" rel="noopener"><code>autoSizeStepGranularity</code></a> 属性以定义自动调整大小的维度 <code>TextView</code>。</li></ul></li><li><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeMinTextSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12sp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeMaxTextSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100sp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeStepGranularity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li></ul><h4 id="使用支持库-1"><a href="#使用支持库-1" class="headerlink" title="使用支持库"></a>使用支持库</h4><ul><li>要通过支持库以编程方式定义文本大小范围和维度，请调用该<code>TextViewCompat.setAutoSizeTextTypeUniformWithConfiguration(int autoSizeMinTextSize, int autoSizeMaxTextSize, int autoSizeStepGranularity, int unit)</code> 方法。提供最大值，最小值，粒度值和任何<code>TypedValue</code>维度单位。</li><li>要定义范围的文本大小，并通过支持库中的XML格式的尺寸，使用的<code>app</code>命名空间和设置 <code>autoSizeText</code>，<code>autoSizeMinTextSize</code>， <code>autoSizeMaxTextSize</code>，和 <code>autoSizeStepGranularity</code>布局XML文件中的属性。</li><li><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeMinTextSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>12sp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeMaxTextSize</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>100sp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeStepGranularity</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2sp<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre></li></ul><h3 id="预设尺寸"><a href="#预设尺寸" class="headerlink" title="预设尺寸"></a>预设尺寸</h3><p>预设尺寸允许您指定<code>TextView</code>自动调整文本大小时选择的所有值 。</p><ul><li>要使用预设大小以<code>TextView</code>编程方式设置自动调整大小 ，请调用该<code>setAutoSizeTextTypeUniformWithPresetSizes(int[] presetSizes, int unit)</code> 方法。为尺寸提供尺寸和任何<code>TypedValue</code> 尺寸单位的数组。</li><li>要使用预设大小设置 <code>TextView</code> XML的自动调整大小，请使用<code>android</code>命名空间并设置以下属性：<ul><li>将<a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizeText" target="_blank" rel="noopener"><code>autoSizeText</code></a> 属性设置为<em>none</em>或<em>uniform</em>。<em>none</em> 是默认值，<em>uniform</em>可以 <code>TextView</code>在水平和垂直轴上<em>均匀</em>缩放。</li><li>将<a href="https://developer.android.com/reference/android/widget/TextView.html#attr_android:autoSizePresetSizes" target="_blank" rel="noopener"><code>autoSizePresetSizes</code></a> 属性设置 为预设大小的数组。要将数组作为资源访问，请在<code>res/values/arrays.xml</code> 文件中定义数组。</li></ul></li><li><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autosize_text_sizes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>10sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>12sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>20sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>40sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>100sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre></li><li><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>autoSizePresetSizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@array/autosize_text_sizes<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span></code></pre></li></ul><h4 id="使用支持库-2"><a href="#使用支持库-2" class="headerlink" title="使用支持库"></a>使用支持库</h4><ul><li>要使用预设大小<code>TextView</code>通过支持库以编程方式设置自动调整大小 ，请调用该<code>TextViewCompat.setAutoSizeTextTypeUniformWithPresetSizes(TextView textView, int[] presetSizes, int unit)</code> 方法。提供<code>TextView</code>类的实例，大小数组以及大小的任何<code>TypedValue</code>维度单位。</li><li>要使用预设大小<code>TextView</code>通过支持库设置XML的自动调整大小 ，请使用布局XML文件中的 <code>app</code>命名空间和set <code>autoSizeText</code>和 <code>autoSizePresetSizes</code>attributes。</li><li><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>resources</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>array</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>autosize_text_sizes<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>10sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>12sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>20sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>40sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>item</span><span class="token punctuation">></span></span>100sp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>item</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>array</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>resources</span><span class="token punctuation">></span></span></code></pre></li><li><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>LinearLayout</span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>    <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>match_parent<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>200dp<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizeTextType</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>uniform<span class="token punctuation">"</span></span>      <span class="token attr-name"><span class="token namespace">app:</span>autoSizePresetSizes</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@array/autosize_text_sizes<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>LinearLayout</span><span class="token punctuation">></span></span></code></pre></li></ul><h2 id="XML中的字体"><a href="#XML中的字体" class="headerlink" title="XML中的字体"></a>XML中的字体</h2><p>Android 8.0（API级别26）引入了一项新功能，即XML中的字体，它允许您将字体用作资源。您可以在<code>font</code>文件<code>res/font/</code>夹中添加文件以将字体捆绑为资源。这些字体在您的<code>R</code>文件中编译，并在Android Studio中自动提供。您可以借助新资源类型访问字体资源<code>font</code>。例如，要访问字体资源，请使用<code>@font/myfont</code>或<code>R.font.myfont</code>。</p><p>要在运行Android 4.1（API级别16）及更高版本的设备上使用字体XML功能，请使用支持库26.有关使用支持库的更多信息，请参阅 <a href="https://developer.android.com/guide/topics/ui/look-and-feel/fonts-in-xml#using-support-lib" target="_blank" rel="noopener">使用支持库</a>部分。</p><p>要将字体添加为资源，请在Android Studio中执行以下步骤：</p><ol><li>右键单击res文件夹，然后转到“ 新建”&gt;“Android资源目录”。将出现“ <em>新建资源目录”</em>窗口。</li><li>在“资源类型”列表中，选择“ 字体”，然后单击“ 确定”。<strong>注意</strong>：资源目录的名称必须是 <strong>font</strong></li></ol><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-055422.jpg" alt="图1添加字体资源目录"></p><ol start="3"><li>在字体文件夹中添加字体文件。下面的文件夹结构生成 <code>R.font.dancing_script</code>，<code>R.font.lobster</code>和 <code>R.font.typo_graphica</code>。</li></ol><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-055530.jpg" alt="在资源目录中添加字体文件"></p><ol start="4"><li>双击字体文件以在编辑器中预览文件的字体。</li></ol><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-055559.jpg" alt="预览字体文件"></p><h3 id="创建font-family"><a href="#创建font-family" class="headerlink" title="创建font family"></a>创建font family</h3><p>font family是一组字体文件及其样式和重量详细信息。在Android中，您可以创建一个新的字体系列作为XML资源，并将其作为单个单元访问，而不是将每个样式和权重作为单独的资源引用。通过这样做，系统可以根据您尝试使用的文本样式选择正确的字体。</p><p>要创建字体系列，请在Android Studio中执行以下步骤：</p><ol><li>右键单击该<code>font</code>文件夹，然后转到“ <strong>新建”&gt;“字体资源文件”</strong>。将出现“ <em>新建资源文件”</em>窗口。</li><li>输入文件名，然后单击“ <strong>确定”</strong>。新的字体资源XML在编辑器中打开。</li><li><p>将每个字体文件，样式和权重属性包含在<code>&lt;font</code> 元素中。以下XML说明了在字体资源XML中添加与字体相关的属性：</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-family</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>android</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res/android<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span>        <span class="token attr-name"><span class="token namespace">android:</span>font</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">normal</span><span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>font</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@font/lobster_regular<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span>        <span class="token attr-name"><span class="token namespace">android:</span>font</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">italic</span><span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>font</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@font/lobster_italic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-family</span><span class="token punctuation">></span></span></code></pre></li></ol><h3 id="在XML布局中使用字体"><a href="#在XML布局中使用字体" class="headerlink" title="在XML布局中使用字体"></a>在XML布局中使用字体</h3><p>在<code>TextView</code>对象或样式中使用字体，可以是单个字体文件，也可以是字体系列中的字体。要<code>TextView</code>在样式中添加字体，请使用该 <code>fontFamily</code>属性。   <strong>注意：</strong>当您使用字体系列时， <code>TextView</code>交换机可以根据需要自行使用该系列中的字体文件。</p><h4 id="将字体添加到TextView"><a href="#将字体添加到TextView" class="headerlink" title="将字体添加到TextView"></a>将字体添加到TextView</h4><p>要为其设置字体<code>TextView</code>，请执行以下操作之一：</p><ul><li><p>在布局XML文件中，将<code>fontFamily</code>属性设置为要访问的字体文件。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TextView</span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_width</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>layout_height</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>wrap_content<span class="token punctuation">"</span></span>        <span class="token attr-name"><span class="token namespace">android:</span>fontFamily</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@font/lobster<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span></code></pre></li></ul><p>Android Studio布局预览（如图5最右侧窗格所示）允许您预览中的字体集<code>TextView</code>。</p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-12-27-060116.jpg" alt="在布局预览中预览字体"></p><h4 id="将字体添加到Style"><a href="#将字体添加到Style" class="headerlink" title="将字体添加到Style"></a>将字体添加到Style</h4><p>打开<code>styles.xml</code>，并将<code>fontFamily</code> 属性设置为您要访问的字体文件。</p><pre class=" language-xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>customfontstyle<span class="token punctuation">"</span></span> <span class="token attr-name">parent</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@android:style/TextAppearance.Small<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token style language-css">    &lt;item name=<span class="token string">"android:fontFamily"</span>>@font/lobster&lt;/item></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span></code></pre><h3 id="在Java-Kotlin中使用字体"><a href="#在Java-Kotlin中使用字体" class="headerlink" title="在Java/Kotlin中使用字体"></a>在Java/Kotlin中使用字体</h3><p>要在Java/Kotlin中使用字体，请调用<code>getFont(int)</code>方法并提供要使用的字体 的资源标识符。此方法返回一个 <code>Typeface</code>对象。虽然系统从字体信息中为您选择最佳样式，但您可以使用该 <code>setTypeface(android.graphics.Typeface, int)</code> 方法设置具有特定样式的字体。</p><h4 id="Kotin"><a href="#Kotin" class="headerlink" title="Kotin"></a>Kotin</h4><pre class=" language-kotlin"><code class="language-kotlin"><span class="token keyword">val</span> typeface <span class="token operator">=</span> resources<span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>font<span class="token punctuation">.</span>myfont<span class="token punctuation">)</span>textView<span class="token punctuation">.</span>typeface <span class="token operator">=</span> typeface</code></pre><h4 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h4><pre class=" language-java"><code class="language-java">Typeface typeface <span class="token operator">=</span> <span class="token function">getResources</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getFont</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>font<span class="token punctuation">.</span>myfont<span class="token punctuation">)</span><span class="token punctuation">;</span>textView<span class="token punctuation">.</span><span class="token function">setTypeface</span><span class="token punctuation">(</span>typeface<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><h3 id="使用支持库-3"><a href="#使用支持库-3" class="headerlink" title="使用支持库"></a>使用支持库</h3><p>Support Library 26.0 在运行Android 4.1（API级别16）及更高版本的设备上提供对XML字体功能的支持。</p><p><strong>注意</strong>：通过支持库在XML布局中声明字体系列时，请使用<strong>app</strong>命名空间来确保加载字体</p><pre class=" language-xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="utf-8"?></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font-family</span> <span class="token attr-name"><span class="token namespace">xmlns:</span>app</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://schemas.android.com/apk/res-auto<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name"><span class="token namespace">app:</span>font</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">normal</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>font</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@font/myfont-Regular<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>font</span> <span class="token attr-name"><span class="token namespace">app:</span>font</span><span class="token style-attr language-css"><span class="token attr-name"><span class="token attr-name">Style</span></span><span class="token punctuation">="</span><span class="token attr-value">italic</span><span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>fontWeight</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>400<span class="token punctuation">"</span></span> <span class="token attr-name"><span class="token namespace">app:</span>font</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>@font/myfont-Italic<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>font-family</span><span class="token punctuation">></span></span></code></pre><p>在Java/Kotlin中使用字体，请调用 <code>ResourceCompat.getFont(Context, int)</code>方法并提供Context和资源标识符的实例。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
            <tag> Widget </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>比较合适的Hexo多设备同步方法</title>
      <link href="/20181111/hexo-sync-on-multidevice/"/>
      <url>/20181111/hexo-sync-on-multidevice/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>经常我们有一个场景：需要在公司或者家庭多个电脑完成Hexo的博客撰写和发布工作。这就涉及到Hexo多电脑的同步问题。</p><p>网上的方案基本上都是多分支方案，也就是在同一个仓库创建两个分支：</p><ol><li>Hexo分支 – 用来保存所有Hexo的源文件</li><li>master分支 – 用来保存Hexo生成的博客文件</li></ol><p>在创建GitHub Pages或者Coding Pages时，以master分支为pages分支。<br>Hexo的deploy指向master分支部署pages，git的管理指向Hexo分支。</p><a id="more"></a><p>因为我的GitHub Pages对应的仓库是public的，所以会导致Hexo源文件暴露在公开的仓库了。这样也就会把我的博客的一些密钥、统计管理配置等暴露在公开仓库分支了。如果对这些配置的<code>_config.yml</code>进行单独管理的话，也很麻烦。</p><p>所以<strong>Hexo最完美的多电脑同步方法</strong>是，创建两个仓库：</p><ol><li>Hexo私有仓库 – 用来保存所有Hexo的源文件</li><li>master公开仓库 – 用来保存Hexo生成的博客文件</li></ol><h2 id="我的Blog配置"><a href="#我的Blog配置" class="headerlink" title="我的Blog配置"></a>我的Blog配置</h2><ol><li>利用hexo d直接deploy Hexo博客到GitHub pages</li><li>使用hexo-theme-material主题，并作了很多配置</li></ol><h2 id="创建远程私有仓库"><a href="#创建远程私有仓库" class="headerlink" title="创建远程私有仓库"></a>创建远程私有仓库</h2><p>我是在Coding上创建的（如果在GitHub可以创建Private仓库也可以在GitHub上创建）名字就叫blog。</p><h2 id="建立本地git仓库"><a href="#建立本地git仓库" class="headerlink" title="建立本地git仓库"></a>建立本地git仓库</h2><p>进入你现有的本地hexo博客文件夹，先删除第三方主题的git配置，如对<code>hexo-theme-material</code>主题</p><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -fr ./themes/hexo-theme-material/.git/</code></pre><p>然后建立本地的git仓库</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> init</code></pre><p>创建一个<code>.gitignore</code>文件，并放在Hexo的根目录，内容为：</p><pre><code>.DS_StoreThumbs.dbdb.json*.lognode_modules/public/.deploy*/</code></pre><p><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-11-055806.png" alt=""></p><h2 id="Push到私有仓库"><a href="#Push到私有仓库" class="headerlink" title="Push到私有仓库"></a>Push到私有仓库</h2><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> remote add origin https://git.coding.net/<span class="token operator">&lt;</span>yourname<span class="token operator">></span>/blog.git<span class="token function">git</span> add <span class="token keyword">.</span><span class="token function">git</span> commit -m <span class="token string">"init my private hexo blog"</span><span class="token function">git</span> push -u origin master</code></pre><p>至此，就完成了本地Hexo源码的全备份</p><h2 id="在另一台电脑进行Hexo写作"><a href="#在另一台电脑进行Hexo写作" class="headerlink" title="在另一台电脑进行Hexo写作"></a>在另一台电脑进行Hexo写作</h2><p>首先和最开始使用Hexo一样，都有完成git、node、hexo等环境的搭建和配置</p><pre class=" language-bash"><code class="language-bash">brew <span class="token function">install</span> <span class="token function">git</span>brew <span class="token function">install</span> nodebrew <span class="token function">install</span> <span class="token function">npm</span><span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g</code></pre><h3 id="拉取Hexo-blog"><a href="#拉取Hexo-blog" class="headerlink" title="拉取Hexo blog"></a>拉取Hexo blog</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://git.coding.net/<span class="token operator">&lt;</span>yourname<span class="token operator">></span>/blog.git</code></pre><p>这样你就拥有了你的所有Hexo源文件</p><h3 id="Hexo编写和发布"><a href="#Hexo编写和发布" class="headerlink" title="Hexo编写和发布"></a>Hexo编写和发布</h3><p>尽管拉取下来了，还需要建立一下Hexo的环境，这里需要格外注意的一点是：<br>千万不要用<code>hexo init</code>命令。原因是当前目录已经建立了git仓库环境, <code>hexo init</code>会覆盖到当前的git环境，重建一个新的，这样和我们的私有Hexo源码仓库脱离了联系。</p><p>正确的做法是：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> <span class="token function">install</span></code></pre><p>因为<code>package.json</code>里面已经保存了<code>hexo</code>的必备资源包信息，<code>npm install</code>后Hexo环境就建立起来了。</p><p>如果需要更新Hexo版本或者插件版本，直接使用<code>npm update</code>即可，然后就可以看到package.json里面升级了哪些插件。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">npm</span> update</code></pre><p>接下来就进行正常的编写和发布就好。本地预览的命令还是：</p><pre class=" language-bash"><code class="language-bash">hexo ghexo s</code></pre><p>Hexo的发布命令是<code>hexo d</code></p><p>最后执行<code>git status</code>把更改的新文件<code>git add</code>和<code>git commit</code>，最后<code>git push</code>到私有仓库，又会完成Hexo源码仓库的同步。</p><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>从此，世界是如此的美好。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>EventBus 源码解析</title>
      <link href="/20180913/source-code-analysis-eventbus/"/>
      <url>/20180913/source-code-analysis-eventbus/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="EventBus简介"><a href="#EventBus简介" class="headerlink" title="EventBus简介"></a>EventBus简介</h2><p><a href="http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener"></a></p><p>EventBus是Android端优化的publish/subscribe消息总线，简化了应用程序内各组件间、组件与后台线程的通信，主要由三个部分组成:</p><ul><li>事件Event: 可以是任意对象，通过事件的发布者将事件进行传递</li><li>事件订阅者Subscriber: 接收特定事件</li><li>事件发布者Publisher: 用于通知Subscriber有事件发生，可以在任意线程任意位置发送事件</li></ul><a id="more"></a><p>  <img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-13-142814.jpg" alt=""><br>  上图解释了整个EventBus的大概工作流程：<code>发布者Publisher</code>将事件Event通过<code>post()方法</code>发送；EventBus内部进行处理，找到订阅了该<code>事件Event</code>的<code>订阅者Subscriber</code>；然后该事件Event的订阅者Subscriber通过<code>onEvent()方法</code>接收事件进行相关处理（关于onEvent()在EventBus 3.0中有改动，下面详细说明）</p><h2 id="EventBus简单使用"><a href="#EventBus简单使用" class="headerlink" title="EventBus简单使用"></a>EventBus简单使用</h2><p>添加EventBus依赖到项目 <code>implementation &#39;org.greenrobot:eventbus:3.1.1&#39;</code><br>构造事件（Event）对象。也就是发送消息类 每一个消息类，对应一种事件。这里我们定义两个消息发送类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">NewsEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String message<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">NewsEvent</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setMessage</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>message <span class="token operator">=</span> message<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ToastEvent</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String content<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ToastEvent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> String <span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setContent</span><span class="token punctuation">(</span>String content<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>content <span class="token operator">=</span> content<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>注册/解除事件订阅（Subscriber）：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//一般在onCreate()方法中进行注册订阅。在onDestory()方法中进行解除订阅</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//注册事件 其中this代表订阅者</span>    <span class="token comment" spellcheck="true">//通过register(this)来表示该订阅者进行了订阅</span>    EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onDestroy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//解除注册事件</span>    EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">unregister</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>具体注册了对什么事件的订阅，这个需要onEvent()方法来说明。在EventBus 3.0之前，onEvent()方法是用来接收指定事件（Event）类型对象，然后进行相关处理操作。在EventBus 3.0之后，onEvent()方法可以自定义方法名，不过要加入注解@Subscribe。</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span>ToastEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token comment" spellcheck="true">//通过onToastEvent(ToastEvent event)表示指定对事件ToastEvent的订阅</span>Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span>event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>发送消息 订阅已经完成，那么便可以发送订阅了<code>EventBus.getDefault().post(new ToastEvent(&quot;Toast,发个提示，祝大家新年快乐！&quot;));</code><br>那么onToastEvent(ToastEvent event)会收到事件，并弹出提示，EventBus的基础使用流程就是这样的。</p><h2 id="EventBus进阶使用"><a href="#EventBus进阶使用" class="headerlink" title="EventBus进阶使用"></a>EventBus进阶使用</h2><h3 id="线程模式ThreadMode"><a href="#线程模式ThreadMode" class="headerlink" title="线程模式ThreadMode"></a>线程模式ThreadMode</h3><p>当你接收的的事件后，如果处于非UI线程，你要更新UI怎么办？如果处于UI线程，你要进行耗时操作，怎么办?等等其他情况，通过ThreadMode统统帮你解决</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>threadMode <span class="token operator">=</span> ThreadMode<span class="token punctuation">.</span>MainThread<span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">onNewsEvent</span><span class="token punctuation">(</span>NewsEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>    String message <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    mTv_message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>使用起来很简单，通过@Subscribe(threadMode = ThreadMode.MainThread)即可指定。 下面具体介绍下ThreadMode：</p><ol><li><strong>PostThread</strong>：事件的处理在和事件的发送在相同的进程，所以事件处理时间不应太长，不然影响事件的发送线程</li><li><strong>MainThread</strong>：事件的处理会在UI线程中执行。事件处理时间不能太长，这个不用说的，长了会ANR的</li><li><strong>BackgroundThread</strong>：如果事件是在UI线程中发布出来的，那么事件处理就会在子线程中运行，如果事件本来就是子线程中发布出来的，那么事件处理直接在该子线程中执行。所有待处理事件会被加到一个队列中，由对应线程依次处理这些事件，如果某个事件处理时间太长，会阻塞后面的事件的派发或处理</li><li><strong>Async</strong>：事件处理会在单独的线程中执行，主要用于在后台线程中执行耗时操作，每个事件会开启一个线程</li></ol><h3 id="priority事件优先级"><a href="#priority事件优先级" class="headerlink" title="priority事件优先级"></a>priority事件优先级</h3><p>事件的优先级类似广播的优先级，优先级越高优先获得消息，用法展示：</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span>ToastEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>当多个订阅者（Subscriber）对同一种事件类型进行订阅时，即对应的事件处理方法中接收的事件类型一致，则优先级高（priority 设置的值越大），则<strong>会先接收事件进行处理；优先级低（priority 设置的值越小），则会后接收事件进行处理</strong></p><p>除此之外，EventBus也可以终止对事件继续传递的功能，这样其他优先级比100低，并且订阅了该事件的订阅者就会接收不到该事件</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span>ToastEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拦截事件</span>    EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancelEventDelivery</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="EventBus黏性事件"><a href="#EventBus黏性事件" class="headerlink" title="EventBus黏性事件"></a>EventBus黏性事件</h3><p>EventBus除了普通事件也支持粘性事件。可以理解成：订阅在发布事件之后，但同样可以收到事件。订阅/解除订阅和普通事件一样，但是处理订阅的方法有所不同，需要注解中添加<code>sticky = true</code></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>priority <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span> sticky <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">onToastEvent</span><span class="token punctuation">(</span>ToastEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>    Toast<span class="token punctuation">.</span><span class="token function">makeText</span><span class="token punctuation">(</span>MainActivity<span class="token punctuation">.</span><span class="token keyword">this</span><span class="token punctuation">,</span> event<span class="token punctuation">.</span><span class="token function">getContent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> Toast<span class="token punctuation">.</span>LENGTH_SHORT<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">show</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//拦截事件</span>    EventBus<span class="token punctuation">.</span><span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">cancelEventDelivery</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>这样假设一个ToastEvent 的事件已经发布，此时还没有注册订阅。当设置了sticky = true，在ToastEvent 的事件发布后，进行注册，依然能够接收到之前发布的事件。<br>不过这个时候，发布事件的方式就改变了：<code>EventBus.getDefault().postSticky(new ToastEvent(&quot;Toast,发个提示，祝大家新年快乐！&quot;));</code><br>我们如果不再需要该粘性事件我们可以移除：<code>EventBus.getDefault().removeStickyEvent(ToastEvent.class);</code><br>或者调用移除所有粘性事件：<code>EventBus.getDefault().removeAllStickyEvents();</code></p><h3 id="EventBus配置"><a href="#EventBus配置" class="headerlink" title="EventBus配置"></a>EventBus配置</h3><p>EventBus在2.3版本中添加了EventBuilder去配置EventBus的各方各面。比如：如何去构建一个在发布事件时没有订阅者时保持沉默的EventBus。</p><pre class=" language-java"><code class="language-java">EventBus eventBus <span class="token operator">=</span> EventBus<span class="token punctuation">.</span><span class="token function">builder</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">logNoSubscriberMessages</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">sendNoSubscriberEvent</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">build</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>通过上述设置，当一个事件没有订阅者时，不会输出log信息，也不会发布一条默认信息。</p><p>配置默认的EventBus实例，使用EventBus.getDefault()是一个简单的方法。获取一个单例的EventBus实例。EventBusBuilder也允许使用installDefaultEventBus方法去配置默认的EventBus实例。</p><p>注意：不同的EventBus 的对象的数据是不共享的。通过一个EventBus 对象去发布事件，只有通过同一个EventBus 对象订阅事件，才能接收该事件。所以以上使用EventBus.getDefault()获得的都是同一个实例。</p><h2 id="源码解析"><a href="#源码解析" class="headerlink" title="源码解析"></a>源码解析</h2><ol><li>注册订阅：<code>EventBus.getDefault().register(this);</code></li><li><p>事件处理</p><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@Subscribe</span><span class="token punctuation">(</span>threadMode <span class="token operator">=</span> ThreadMode<span class="token punctuation">.</span>MainThread<span class="token punctuation">)</span> <span class="token keyword">public</span> <span class="token keyword">void</span>  <span class="token function">onNewsEvent</span><span class="token punctuation">(</span>NewsEvent event<span class="token punctuation">)</span><span class="token punctuation">{</span>     String message <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getMessage</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     mTv_message<span class="token punctuation">.</span><span class="token function">setText</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre></li><li>发布事件：<code>EventBus.getDefault().post(new NewsEvent(&quot;我是来自SecondActivity的消息，你好！&quot;));</code></li></ol><p>以上是EventBus的基本使用。我们先从getDefault说起</p><h3 id="getDefault"><a href="#getDefault" class="headerlink" title="getDefault()"></a>getDefault()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">static</span> <span class="token keyword">volatile</span> EventBus defaultInstance<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">static</span> EventBus <span class="token function">getDefault</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>EventBus<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>defaultInstance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                defaultInstance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">EventBus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> defaultInstance<span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>通过上述代码可以得知，getDefault()中通过双检查锁（DCL）机制实现了EventBus的单例机制，获得了一个默认配置的EventBus对象</p><h3 id="register"><a href="#register" class="headerlink" title="register()"></a>register()</h3><p>在了解register()之前，我们先要了解一下EventBus中的几个关键的成员变量。方便对下面内容的理解：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** Map&lt;订阅事件, 订阅该事件的订阅者集合> */</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> CopyOnWriteArrayList<span class="token operator">&lt;</span>Subscription<span class="token operator">>></span> subscriptionsByEventType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Map&lt;订阅者, 订阅事件集合> */</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Object<span class="token punctuation">,</span> List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>>></span> typesBySubscriber<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** Map&lt;订阅事件类类型,订阅事件实例对象>. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> Map<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> stickyEvents<span class="token punctuation">;</span></code></pre><p>下面看具体的register()中执行的代码：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span>Object subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//订阅者类型</span>    Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> subscriberClass <span class="token operator">=</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//判断该类是不是匿名类，如果是匿名累要使用反射</span>    <span class="token keyword">boolean</span> forceReflection <span class="token operator">=</span> subscriberClass<span class="token punctuation">.</span><span class="token function">isAnonymousClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//获取订阅者全部的响应函数信息（即上面的onNewsEvent()之类的方法）</span>    List<span class="token operator">&lt;</span>SubscriberMethod<span class="token operator">></span> subscriberMethods <span class="token operator">=</span> subscriberMethodFinder<span class="token punctuation">.</span><span class="token function">findSubscriberMethods</span><span class="token punctuation">(</span>subscriberClass<span class="token punctuation">,</span> forceReflection<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//循环每一个事件响应函数，执行 subscribe()方法，更新订阅相关信息</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>SubscriberMethod subscriberMethod <span class="token operator">:</span> subscriberMethods<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">subscribe</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscriberMethod<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>由此可见，register()第一步获取订阅者的类类型. 第二步,通过SubscriberMethodFinder类来解析订阅者类,获取所有的响应函数集合. 第三步,遍历订阅函数,执行 subscribe()方法，更新订阅相关信息。 关于 subscriberMethodFinder这里就不介绍了。先跟着线索，继续看subscribe()方法。 </p><p>subscribe 函数分三步：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//第一步: 通过subscriptionsByEventType得到该事件类型所有订阅者信息队列，根据优先级将当前订阅者信息插入到订阅者队列subscriptionsByEventType中；</span><span class="token comment" spellcheck="true">//获取订阅的事件类型</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventType <span class="token operator">=</span> subscriberMethod<span class="token punctuation">.</span>eventType<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//获取订阅该事件的订阅者集合</span>CopyOnWriteArrayList<span class="token operator">&lt;</span>Subscription<span class="token operator">></span> subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//把通过register()订阅的订阅者包装成Subscription 对象</span>Subscription newSubscription <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Subscription</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscriberMethod<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//订阅者集合为空，创建新的集合，并把newSubscription 加入</span><span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  subscriptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CopyOnWriteArrayList</span><span class="token operator">&lt;</span>Subscription<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>eventType<span class="token punctuation">,</span> subscriptions<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//集合中已经有该订阅者，抛出异常。不能重复订阅</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span>        <span class="token string">"Subscriber "</span> <span class="token operator">+</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">" already registered to event "</span> <span class="token operator">+</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//把新的订阅者按照优先级加入到订阅者集合中。</span><span class="token keyword">synchronized</span> <span class="token punctuation">(</span>subscriptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">int</span> size <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> size <span class="token operator">||</span> subscriberMethod<span class="token punctuation">.</span>priority <span class="token operator">></span> subscriptions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span>subscriberMethod<span class="token punctuation">.</span>priority<span class="token punctuation">)</span> <span class="token punctuation">{</span>      subscriptions<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> newSubscription<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//第二步: 在typesBySubscriber中得到当前订阅者订阅的所有事件队列，将此事件保存到队列typesBySubscriber中，用于后续取消订阅</span><span class="token comment" spellcheck="true">//根据订阅者，获得该订阅者订阅的事件类型集合</span>List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> subscribedEvents <span class="token operator">=</span> typesBySubscriber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//如果事件类型集合为空，创建新的集合，并加入新订阅的事件类型。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>subscribedEvents <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>  subscribedEvents <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  typesBySubscriber<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> subscribedEvents<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//如果事件类型集合不为空，加入新订阅的事件类型</span>subscribedEvents<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//第三步: 检查这个事件是否是 Sticky 事件，如果是则从stickyEvents事件保存队列中取出该事件类型最后一个事件发送给当前订阅者</span><span class="token comment" spellcheck="true">//该事件是stick=true。</span><span class="token keyword">if</span> <span class="token punctuation">(</span>subscriberMethod<span class="token punctuation">.</span>sticky<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//响应订阅事件的父类事件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>eventInheritance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    Set<span class="token operator">&lt;</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">>></span> entries <span class="token operator">=</span> stickyEvents<span class="token punctuation">.</span><span class="token function">entrySet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//循环获得每个stickyEvent事件</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Map<span class="token punctuation">.</span>Entry<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span><span class="token punctuation">,</span> Object<span class="token operator">></span> entry <span class="token operator">:</span> entries<span class="token punctuation">)</span> <span class="token punctuation">{</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> candidateEventType <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//是该类的父类</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>eventType<span class="token punctuation">.</span><span class="token function">isAssignableFrom</span><span class="token punctuation">(</span>candidateEventType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//该事件类型最新的事件发送给当前订阅者。</span>        Object stickyEvent <span class="token operator">=</span> entry<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Object stickyEvent <span class="token operator">=</span> stickyEvents<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">checkPostStickyEventToSubscription</span><span class="token punctuation">(</span>newSubscription<span class="token punctuation">,</span> stickyEvent<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>到此，便完成了订阅功能。下面是订阅的具体流程图：<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-13-150526.jpg" alt=""></p><h3 id="unregister"><a href="#unregister" class="headerlink" title="unregister()"></a>unregister()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">void</span> <span class="token function">unregister</span> <span class="token punctuation">(</span>Object subscriber<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取该订阅者所有的订阅事件类类型集合.</span>  List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> subscribedTypes <span class="token operator">=</span> typesBySubscriber<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscribedTypes <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventType <span class="token operator">:</span> subscribedTypes<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token function">unsubscribeByEventType</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">,</span> eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 从typesBySubscriber删除该&lt;订阅者对象,订阅事件类类型集合></span>    typesBySubscriber<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>subscriber<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    Log<span class="token punctuation">.</span><span class="token function">e</span><span class="token punctuation">(</span><span class="token string">"EventBus"</span><span class="token punctuation">,</span> <span class="token string">"Subscriber to unregister was not registered before: "</span> <span class="token operator">+</span> subscriber<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">unsubscribeByEventType</span> <span class="token punctuation">(</span>Object subscriber<span class="token punctuation">,</span> Class <span class="token operator">&lt;</span> <span class="token operator">?</span><span class="token operator">></span>eventType<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取订阅事件对应的订阅者信息集合.</span>  List<span class="token operator">&lt;</span>Subscription<span class="token operator">></span> subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventType<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> size <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Subscription subscription <span class="token operator">=</span> subscriptions<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 从订阅者集合中删除特定的订阅者.</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>subscription<span class="token punctuation">.</span>subscriber <span class="token operator">==</span> subscriber<span class="token punctuation">)</span> <span class="token punctuation">{</span>        subscription<span class="token punctuation">.</span>active <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        subscriptions<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        i<span class="token operator">--</span><span class="token punctuation">;</span>        size<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>unregister()方法比较简单，主要完成了subscriptionsByEventType以及typesBySubscriber两个集合的同步</p><h3 id="post"><a href="#post" class="headerlink" title="post()"></a>post()</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">post</span> <span class="token punctuation">(</span>Object event<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 获取当前线程的Posting状态.</span>  PostingThreadState postingState <span class="token operator">=</span> currentPostingThreadState<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// 获取当前线程的事件队列.</span>  List<span class="token operator">&lt;</span>Object<span class="token operator">></span> eventQueue <span class="token operator">=</span> postingState<span class="token punctuation">.</span>eventQueue<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//将当前事件添加到其事件队列</span>  eventQueue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//判断新加入的事件是否在分发中</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>postingState<span class="token punctuation">.</span>isPosting<span class="token punctuation">)</span> <span class="token punctuation">{</span>    postingState<span class="token punctuation">.</span>isMainThread <span class="token operator">=</span> Looper<span class="token punctuation">.</span><span class="token function">getMainLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> Looper<span class="token punctuation">.</span><span class="token function">myLooper</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    postingState<span class="token punctuation">.</span>isPosting <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>postingState<span class="token punctuation">.</span>canceled<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">EventBusException</span><span class="token punctuation">(</span><span class="token string">"Internal error. Abort state was not reset"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">try</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 循环处理当前线程eventQueue中的每一个event对象.</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>eventQueue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">postSingleEvent</span><span class="token punctuation">(</span>eventQueue<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> postingState<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// 处理完知乎重置postingState一些标识信息.</span>      postingState<span class="token punctuation">.</span>isPosting <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      postingState<span class="token punctuation">.</span>isMainThread <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>post 函数会首先得到当前线程的 post 信息PostingThreadState，其中包含事件队列，将当前事件添加到其事件队列中，然后循环调用 postSingleEvent 函数发布队列中的每个事件</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">postSingleEvent</span> <span class="token punctuation">(</span>Object event<span class="token punctuation">,</span> PostingThreadState postingState<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//分发事件的类型</span>  Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventClass <span class="token operator">=</span> event<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">boolean</span> subscriptionFound <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">//响应订阅事件的父类事件</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>eventInheritance<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//找出当前订阅事件类类型eventClass的所有父类的类类型和其实现的接口的类类型</span>    List<span class="token operator">&lt;</span>Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">>></span> eventTypes <span class="token operator">=</span> <span class="token function">lookupAllEventTypes</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> countTypes <span class="token operator">=</span> eventTypes<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> h <span class="token operator">&lt;</span> countTypes<span class="token punctuation">;</span> h<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> clazz <span class="token operator">=</span> eventTypes<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>h<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">//发布每个事件到每个订阅者</span>      subscriptionFound <span class="token operator">|=</span> <span class="token function">postSingleEventForEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> postingState<span class="token punctuation">,</span> clazz<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>    subscriptionFound <span class="token operator">=</span> <span class="token function">postSingleEventForEventType</span><span class="token punctuation">(</span>event<span class="token punctuation">,</span> postingState<span class="token punctuation">,</span> eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token comment" spellcheck="true">//....................................</span><span class="token punctuation">}</span></code></pre><p>调用 postSingleEventForEventType 函数发布每个事件到每个订阅者</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">boolean</span> <span class="token function">postSingleEventForEventType</span> <span class="token punctuation">(</span>Object event<span class="token punctuation">,</span> PostingThreadState postingState<span class="token punctuation">,</span> Class<span class="token operator">&lt;</span><span class="token operator">?</span><span class="token operator">></span> eventClass<span class="token punctuation">)</span> <span class="token punctuation">{</span>  CopyOnWriteArrayList<span class="token operator">&lt;</span>Subscription<span class="token operator">></span> subscriptions<span class="token punctuation">;</span>  <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 获取订阅事件类类型对应的订阅者信息集合.(register函数时构造的集合)</span>    subscriptions <span class="token operator">=</span> subscriptionsByEventType<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>eventClass<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>subscriptions <span class="token operator">!=</span> null <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>subscriptions<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>Subscription subscription <span class="token operator">:</span> subscriptions<span class="token punctuation">)</span> <span class="token punctuation">{</span>      postingState<span class="token punctuation">.</span>event <span class="token operator">=</span> event<span class="token punctuation">;</span>      postingState<span class="token punctuation">.</span>subscription <span class="token operator">=</span> subscription<span class="token punctuation">;</span>      <span class="token keyword">boolean</span> aborted <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 发布订阅事件给订阅函数</span>        <span class="token function">postToSubscription</span><span class="token punctuation">(</span>subscription<span class="token punctuation">,</span> event<span class="token punctuation">,</span> postingState<span class="token punctuation">.</span>isMainThread<span class="token punctuation">)</span><span class="token punctuation">;</span>        aborted <span class="token operator">=</span> postingState<span class="token punctuation">.</span>canceled<span class="token punctuation">;</span>      <span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>        postingState<span class="token punctuation">.</span>event <span class="token operator">=</span> null<span class="token punctuation">;</span>        postingState<span class="token punctuation">.</span>subscription <span class="token operator">=</span> null<span class="token punctuation">;</span>        postingState<span class="token punctuation">.</span>canceled <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>aborted<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">break</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>调用 postToSubscription 函数向每个订阅者发布事件。 postToSubscription 函数中会判断订阅者的 ThreadMode，从而决定在什么 Mode 下执行事件响应函数。这里就不贴源码了。后续还牵着到反射以及线程调度问题，这里就不展开了。 以上就是post的流程，下面是具体的post的流程图:<br><img src="https://blog-1251678165.cos.ap-chengdu.myqcloud.com/2018-11-13-150953.jpg" alt=""></p>]]></content>
      
      
      
    </entry>
    
    <entry>
      <title>Telegram SS代理设置</title>
      <link href="/20180514/telegram-ss-proxy/"/>
      <url>/20180514/telegram-ss-proxy/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>本次测试的是Mac ShadowsocksX-NG + Telegram<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064147.png" alt=""></p><h3 id="Shadowsocks"><a href="#Shadowsocks" class="headerlink" title="Shadowsocks"></a>Shadowsocks</h3><ol><li><a href="https://github.com/shadowsocks/ShadowsocksX-NG/releases" target="_blank" rel="noopener">ShadowsocksX-NG</a></li><li>打开偏好设置，高级选项，查看SOCKS5端口<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064557.png" alt=""><a id="more"></a><h3 id="Telegram"><a href="#Telegram" class="headerlink" title="Telegram"></a>Telegram</h3></li><li>打开Settings–&gt;Privacy and Security–&gt;Use Proxy<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064745.png" alt=""></li><li>复制地址和端口号<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064948.png" alt=""></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Git使用填坑</title>
      <link href="/20180112/git-problem/"/>
      <url>/20180112/git-problem/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="Git使用常见错误"><a href="#Git使用常见错误" class="headerlink" title="Git使用常见错误"></a>Git使用常见错误</h2><blockquote><p>填坑，Git使用过程碰到的常见错误</p></blockquote><h3 id="Git配置"><a href="#Git配置" class="headerlink" title="Git配置"></a>Git配置</h3><a id="more"></a><pre class=" language-bash"><code class="language-bash">WeicoolsdeiMac:~ weicools$ <span class="token function">git</span> config --global user.name <span class="token string">"xxxx"</span>WeicoolsdeiMac:~ weicools$ <span class="token function">git</span> config --global user.email <span class="token string">"yyyy@abc.com"</span>WeicoolsdeiMac:~ weicools$ <span class="token function">mkdir</span> .sshWeicoolsdeiMac:~ weicools$ <span class="token function">cd</span> ~/.sshWeicoolsdeiMac:.ssh weicools$ ssh-keygen -t rsa -C <span class="token string">"xxxx@qq.com"</span>Generating public/private rsa key pair.Enter <span class="token function">file</span> <span class="token keyword">in</span> <span class="token function">which</span> to save the key <span class="token punctuation">(</span>/Users/weicools/.ssh/id_rsa<span class="token punctuation">)</span>: qweEnter passphrase <span class="token punctuation">(</span>empty <span class="token keyword">for</span> no passphrase<span class="token punctuation">)</span>:Enter same passphrase again:Your identification has been saved <span class="token keyword">in</span> qwe.Your public key has been saved <span class="token keyword">in</span> qwe.pub.The key fingerprint is:SHA256:6RCdRQI6ob4Ouuj2BfGQKi7X1x6I9zjIqBEStCRzYjs xxxx@qq.comThe key's randomart image is:+---<span class="token punctuation">[</span>RSA 2048<span class="token punctuation">]</span>----+<span class="token operator">|</span>++. <span class="token keyword">.</span> <span class="token punctuation">..</span><span class="token punctuation">..</span>o      <span class="token operator">|</span><span class="token operator">|</span><span class="token operator">=</span>+o<span class="token punctuation">..</span>o <span class="token keyword">.</span> +       <span class="token operator">|</span><span class="token operator">|</span>.E.+o <span class="token keyword">.</span> o        <span class="token operator">|</span><span class="token operator">|</span> oo +. <span class="token keyword">.</span> <span class="token keyword">.</span>       <span class="token operator">|</span><span class="token operator">|</span>+<span class="token punctuation">..</span>. <span class="token punctuation">..</span> S        <span class="token operator">|</span><span class="token operator">|</span>+. o<span class="token punctuation">..</span> <span class="token operator">=</span>         <span class="token operator">|</span><span class="token operator">|</span>+.oooo+ +        <span class="token operator">|</span><span class="token operator">|</span>+*. +o.+ <span class="token keyword">.</span>       <span class="token operator">|</span><span class="token operator">|</span>B+o.  <span class="token punctuation">..</span>o        <span class="token operator">|</span>+----<span class="token punctuation">[</span>SHA256<span class="token punctuation">]</span>-----+WeicoolsdeiMac:.ssh weicools$ <span class="token function">cat</span> ~/.ssh/qwe.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQDMIKGkVEP/TtXelV1PVL4489as7U82i70cLwWqWT4OZMabpRO5jJwjbStmoUaWfMYOaKFk4EUxZA9010/FNRhMnNPw3nvt++DQf1Cyidh8SJZl/6paFAW7I+hnIcwo8xbkvPJ66Wf96sHMXbhtHelFp4iUDIQUDdWVLSJfSjEVv8FSV7AX0f6f9Mrt2AqBUCsEPRWYAjRMeusdCPv176OTy9B4j7BGvfXkSiF8NnLK71TzmLs6MAcRTuHpJ79NupM8L6mMSg0gI0H+3/S4fr0xHu25oQwKYDm6PIJjdLQ05upToYz/EqRzDpG6q4L/e2mp5nCYrm5pbBzjTpQni31D xxxx@qq.com</code></pre><h3 id="使用Git创建一个项目和提交过程"><a href="#使用Git创建一个项目和提交过程" class="headerlink" title="使用Git创建一个项目和提交过程"></a>使用Git创建一个项目和提交过程</h3><pre><code>$ makdir ~/hello-world    //创建一个项目hello-world$ cd ~/hello-world       //打开这个项目$ git init             //初始化 $ touch README$ git add README        //更新README文件$ git commit -m &#39;first commit&#39;     //提交更新，并注释信息“first commit” $ git remote add origin git@github.com:xxx/yyyy.git     //连接远程github项目  $ git push -u origin master     //将本地项目更新到github项目上去</code></pre><h3 id="检查你的设置-Checking-Your-Settings"><a href="#检查你的设置-Checking-Your-Settings" class="headerlink" title="检查你的设置(Checking Your Settings)"></a>检查你的设置(Checking Your Settings)</h3><p><code>WeicoolsdeiMac:.ssh weicools$ git config --list</code><br><code>WeicoolsdeiMac:.ssh weicools$ git config user.name</code></p><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><ol><li><p>counld not read remote repository<br><code>$ git remote set-url origin https://github.com/YourUserName/YatouTest00123.git</code><br><code>git branch --set-upstream-to origin/master master</code></p></li><li><p>找不到仓库(Private): <code>git clone https://username:password@github.com/lecymeng/BizportDemo.git</code></p></li><li>添加仓库: <code>git remote add origin https://github.com/lecymeng/BizportDemo.git</code></li><li>如果输入   <code>$ git remote add origin git@github.com:djqiang（github帐号名）/gitdemo（项目名）.git</code>   提示出错信息：fatal: remote origin already exists.<ul><li>解决办法如下：</li><li>1、先输入$ git remote rm origin</li><li>2、再输入$ git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:djqiang/gitdemo.git 就不会报错了！</li><li>3、如果输入$ git remote rm origin 还是报错的话，error: Could not remove config section ‘remote.origin’. 我们需要修改gitconfig文件的内容</li><li>4、找到你的github的安装路径，我的是C\Users\ASUS\AppData\Local\GitHub\PortableGit_ca477551eeb4aea0e4ae9fcd3358bd96720bb5c8\etc</li><li>5、找到一个名为gitconfig的文件，打开它把里面的[remote “origin”]那一行删掉就好了！</li></ul></li><li><p>如果输入   <code>$ ssh -T git@github.com</code>   出现以下提示：可以把<code>192.30.255.113 github.com</code>添加到Hosts</p><pre><code> weicools@Weicoolss-MacBook-Pro  ~/.ssh  ssh -T git@github.com The authenticity of host &#39;github.com (192.30.255.113)&#39; can&#39;t be established. RSA key fingerprint is SHA256:nThbg6kXUpJWGl7E1IGOCspRomTxdCARLviKw6E5SY8. Are you sure you want to continue connecting (yes/no)? yes Warning: Permanently added &#39;github.com,192.30.255.113&#39; (RSA) to the list of known hosts. Permission denied (publickey).</code></pre></li><li><p>如果输入   <code>$ ssh -T git@github.com</code>   出现错误提示：Permission denied (publickey).因为新生成的key不能加入ssh就会导致连接不上github。</p><ul><li>解决办法如下：</li><li><p>1、先输入<code>$ ssh-agent</code>，再输入<code>$ ssh-add ~/.ssh/id_key</code>，这样就可以了。</p><pre><code>  weicools@Weicoolss-MacBook-Pro  ~  sudo ssh-add ~/.ssh/moe  Enter passphrase for /Users/weicools/.ssh/moe:  Identity added: /Users/weicools/.ssh/moe (/Users/weicools/.ssh/moe)  weicools@Weicoolss-MacBook-Pro  ~  ssh -T git@github.com  Hi lecymeng! You&#39;ve successfully authenticated, but GitHub does not provide shell access.  weicools@Weicoolss-MacBook-Pro  ~ </code></pre></li><li>2、如果还是不行的话，输入ssh-add ~/.ssh/id_key 命令后出现报错Could not open a connection to your authentication agent.解决方法是key用Git Gui的ssh工具生成，这样生成的时候key就直接保存在ssh中了，不需要再ssh-add命令加入了，其它的user，token等配置都用命令行来做。</li><li>3、最好检查一下在你复制id_rsa.pub文件的内容时有没有产生多余的空格或空行，有些编辑器会帮你添加这些的。</li></ul></li><li>如果输入   <code>$ git push origin master</code>   提示出错信息：error:failed to push som refs to …….<ul><li>解决办法如下：</li><li>1、先输入$ git pull origin master //先把远程服务器github上面的文件拉下来</li><li>2、再输入$ git push origin master</li><li>3、如果出现报错 fatal: Couldn’t find remote ref master或者fatal: ‘origin’ does not appear to be a git repository以及fatal: Could not read from remote repository.</li><li>4、则需要重新输入$ git remote add origin <a href="mailto:git@github.com" target="_blank" rel="noopener">git@github.com</a>:xxx/yyy.git</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
            <tag> 填坑 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 适配器模式</title>
      <link href="/20171210/adapter-pattern/"/>
      <url>/20171210/adapter-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>适配器模式把一个类的接口变换成客户端所期待的另外一个接口，从而使原本因接口不匹配而无法一起工作的两个类能够在一起工作<br>适配器分为类适配器和对象适配器两张</p></blockquote><a id="more"></a><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>系统需要使用现有的类，而此类的接口不符合系统的需要，即接口不兼容</li><li>想要建立一个可重复利用的类，用于与一些彼此之间没有太大关联的类一起工作</li><li>需要一个统一的输出接口，而输入端的类型不可预知</li></ol><h3 id="类适配器"><a href="#类适配器" class="headerlink" title="类适配器"></a>类适配器</h3><h4 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-14-Adapter-of-class.uml.png" alt="类适配器"><br>类适配器是通过实现Target接口以及继承Adaptee类来实现接口转换，如目标接口需要operator2(), 但是Adaptee对象只有operator3()，因此就出现了不兼容情况。此时可以通过Adapter实现一个operator2()将Adaptee的operator3()转换为Target需要的operator2()</p><p>角色介绍:</p><ul><li>Target: 目标角色，也就是接口所期待得到的接口。（类适配器模式，此目标不可以是类）</li><li>Adaptee: 现在需要适配的接口</li><li>Adapter: 适配器角色，核心类，把不兼容的接口转换成目标所需接口，这一角色必须是具体类</li></ul><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/12/10. * &lt;p> * desc: 笔记本电脑一都是需要5V电压，而生活电压一般都是220V，这个时候就产生了不兼容情况 * 需要一个适配器来把220V电压转换成5V电压 * 对应就是Target需要得到5V电压，而Adaptee正常输出220V，Adapter类则是继承Adaptee实现Target * 将220V转为5V，解决接口不兼容问题 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        VoltAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoltAdapter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出电压: "</span> <span class="token operator">+</span> adapter<span class="token punctuation">.</span><span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/12/10. * &lt;p> * desc: Target 角色 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">FiveVolt</span> <span class="token punctuation">{</span>    <span class="token keyword">int</span> <span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/12/10. * &lt;p> * desc: Adaptee 角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Volt220</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVolt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">220</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/12/10. * &lt;p> * desc: Adapter 角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltAdapter</span> <span class="token keyword">extends</span> <span class="token class-name">Volt220</span> <span class="token keyword">implements</span> <span class="token class-name">FiveVolt</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="对象适配器"><a href="#对象适配器" class="headerlink" title="对象适配器"></a>对象适配器</h3><h4 id="UML类图-1"><a href="#UML类图-1" class="headerlink" title="UML类图"></a>UML类图</h4><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-14-Adapter-of-object.uml.png" alt=""><br>与类适配器一样，对象适配器模式把被适配类的API转为目标类的API，与类适配器模式不同的是：对象适配器模式不是使用继承关系连接到Adaptee，而是使用代理关系，UML类图如下:</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 基于类适配器的示例修改Adapter</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/12/10. * &lt;p> * desc: Adapter 角色 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">VoltAdapter</span> <span class="token keyword">implements</span> <span class="token class-name">FiveVolt</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Volt220 mVolt220<span class="token punctuation">;</span>    <span class="token function">VoltAdapter</span><span class="token punctuation">(</span>Volt220 volt220<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mVolt220 <span class="token operator">=</span> volt220<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVOlt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mVolt220<span class="token punctuation">.</span><span class="token function">getVolt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/12/10. * &lt;p> * desc: 笔记本电脑一都是需要5V电压，而生活电压一般都是220V，这个时候就产生了不兼容情况 * 需要一个适配器来把220V电压转换成5V电压 * 直接将被适配的对象传到Adapter中，使用组合形式实现接口兼容效果 * 比类适配器更加灵活，适配对象的方法也不会暴露出来 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        VoltAdapter adapter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">VoltAdapter</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Volt220</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"输出电压: "</span> <span class="token operator">+</span> adapter<span class="token punctuation">.</span><span class="token function">getVolt5</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><ol><li>对象适配器直接将要适配的对象传到Adapter中，使用组合的形式实现接口兼容的效果，比类适配器更加灵活</li><li>对象适配器还不会将被适配对象的方法暴露出来，而类适配器是继承被适配的类，不够灵活。</li><li>实际开发中Adapter常用预进行不兼容类型的转换场景，还有一种就是输入有多种情况，而输出只有一种的时候，可以通过 Adapter统一进行输出。</li><li>尽可能使用对象适配器，多使用组合少使用继承。</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>制作多功能启动U盘, 轻松完成系统安装和维护</title>
      <link href="/20171202/make-multiboot-u-disk/"/>
      <url>/20171202/make-multiboot-u-disk/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>本教程仅适用于EFI引导的电脑，安装的系统也需要支持EFI引导。</p></blockquote><p>平时给自己或者别人重装系统的频率还算挺高的，因为有时候要装 macOS 有时候要装 Windows，每次都要重新把安装包刷到我的 U 盘里，不但非常折腾，而且对寿命也不好。于是整理了一下把安装盘都塞到一个 U 盘里，这个 U 盘不仅可以选择启动多个系统，而且当某一个系统的安装盘需要更新的时候，并不需要抹掉整个盘，只要单独处理对应的分区就好，非常方便。启动的时候效果是这样的：<br><a id="more"></a><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-MiPro%20Boot.jpg" alt="引导画面"> 启动箱选择界面</p><pre><code>* Linpus lite (sanDisk) -- 引导试用/安装/启动 Ubuntu 16.04.3* EFI USB Device (SanDisk) -- 引导`macOS安装和启动` 以及 `Windows/Linux等支持EFI引导的系统启动`* EFI USB Device 1 (SanDisk) -- 引导Windows系统安装* EFI USB Device 2 (SanDisk) -- 引导进入WeiPE</code></pre><p>这个 U 盘包括了一个 macOS 安装器、一个 Ubuntu 16.04.3 、一个 Windows10 安装器 和一个 WinPE。接下来的教程就是教大家怎样制作一个这样的启动 U 盘并应对一些启动问题。</p><h2 id="Ⅰ-材料准备"><a href="#Ⅰ-材料准备" class="headerlink" title="Ⅰ.材料准备"></a>Ⅰ.材料准备</h2><ol><li>至少16GB的 U 盘, 32GB 最佳</li><li><a href="https://itunes.apple.com/cn/app/macos-high-sierra/id1246284741?mt=12" target="_blank" rel="noopener">macOS安装程序</a> (7GB++, 根据安装程序大小决定)</li><li><a href="http://releases.ubuntu.com/16.04/" target="_blank" rel="noopener">Linux安装镜像</a> (2GB++, 根据安装镜像大小决定)</li><li><a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">Windows安装镜像</a> (5GB++, 根据安装镜像大小决定)</li><li><a href="http://www.wepe.com.cn/download.html" target="_blank" rel="noopener">WeiPE生成的镜像</a> (300MB++, 根据安装镜像大小决定)</li><li><p>其他软件工具: 磁盘工具, <a href="http://www.zdfans.com/6959.html" target="_blank" rel="noopener">DiskGenius</a>, <a href="http://unetbootin.github.io/" target="_blank" rel="noopener">Unetbootin</a>, <a href="https://sourceforge.net/projects/cloverefiboot/?source=typ_redirect" target="_blank" rel="noopener">CloverBootLoader</a></p><ul><li>U盘建议使用USB 3.0的</li><li>macOS可以直接从AppStore下载原版安装文件</li><li>Linux可以去Ubuntu官网下载, 也可以使用其他发行版Linux(需要支持EFI)</li><li>Windows原版镜像可以从I tell you上获取</li><li><p>PE可以使用WeiPE或者AOMEI PE, 本教程使用WeiPE(PE需要的工具基本自带)</p><p><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-162348.png" alt=""></p></li></ul></li></ol><h2 id="Ⅱ-制作-macOS-安装盘"><a href="#Ⅱ-制作-macOS-安装盘" class="headerlink" title="Ⅱ.制作 macOS 安装盘"></a>Ⅱ.制作 macOS 安装盘</h2><ol><li><p>打开磁盘工具，首先在左边选中你的 U 盘，<strong>注意是选中 U 盘而不是其中的分区</strong>，之后点击抹掉按钮，这会把整个磁盘抹成 GPT。⚠️<strong>该操作会清空 U 盘的全部内容，注意备份。</strong>⚠️（虽然一些软件可以直接转换 MBR 和 GPT，不过我还是觉得直接都抹掉比较干净）</p><p> 按照下面的做法，将分区格式选为 Mac OS 扩展（日志式），方案选择 GUID 分区图。点击抹掉。有一定概率出现第一次抹掉不成功的情况，是由于系统没有正确卸载磁盘导致的，这个 Bug 很常见。如果第一次失败了，就再试一次基本上就没问题了。</p><p> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-162915.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-162943.png" alt=""></p></li><li><p>之后还是选中 U 盘，点击分区。你现在应该看到整个硬盘使用一个分区。点击下面的加号新建一个分区，上面的硬盘会被平均分为两个。选择右边的一个（第一个分区），在右侧的详细信息中将分区的名称改为「macOS」（在之后的写入命令中我们会用到这个名称），将大小改为 7.5GB（其实可以再小一点，但是为了能够兼容之后的 macOS 更新以及能够放一些常用程序，这里 7.5 是一个比较合理的大小）</p><p> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163036.png" alt=""></p><p> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163210.png" alt=""></p><p> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163239.png" alt=""></p></li><li><p>用命令制作安装盘<br> 命令(具体可参照下图)：<code>sudo /Applications/Install\ macOS\ High\ Sierra.app/Contents/Resources/createinstallmedia  --volume /Volumes/macOS --applicationpath /Applications/Install\ macOS\ High\ Sierra.app --nointeraction</code><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-QQ20171203-003628.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-163919.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-164734.png" alt=""></p></li><li><p>安装Clover引导<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-02-165039.png" alt=""></p><p> 安装完成后放Kexts，主题，APFS驱动，配置config.plist……</p></li><li><p>拷贝常用软件<br> 可以往Install macOS High Sierra安装盘放些驱动/常用App/工具之类的，安装完系统可以从U盘里面拷贝使用.</p></li></ol><h2 id="Ⅲ-写入-Linux-Windows-WeiPE-镜像"><a href="#Ⅲ-写入-Linux-Windows-WeiPE-镜像" class="headerlink" title="Ⅲ.写入 Linux/Windows/WeiPE 镜像"></a>Ⅲ.写入 Linux/Windows/WeiPE 镜像</h2><ol><li>进入Windows系统(也可以使用虚拟机，系统可能会提示分区损坏，取消掉不要格式化，这是因为 Windows 读不了 HFS+ 的分区), 准备好工具: <a href="http://www.zdfans.com/6959.html" target="_blank" rel="noopener">DiskGenius</a>, <a href="http://unetbootin.github.io/" target="_blank" rel="noopener">Unetbootin</a>, 镜像：<a href="http://releases.ubuntu.com/16.04/" target="_blank" rel="noopener">Linux安装镜像</a>, <a href="https://msdn.itellyou.cn/" target="_blank" rel="noopener">Windows安装镜像</a>, <a href="http://www.wepe.com.cn/download.html" target="_blank" rel="noopener">WeiPE生成的镜像</a></li><li>打开DiskGenius, 删除在macOS上分出来的区<code>Others</code>, 然后未分区的位置新建分区如下图：按照镜像大小new出三个FAT32分区，分别是LINUX, WIN10, WEIPE。(卷标自己命名，新建分区时以GB为单位只能新建出整数大小，可以在新建完这个分区后对其调整)<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-1-delete.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-2-newLinuxPart.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-3-chang-size.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-4-newWinPart.png" alt=""></li><li><p>新建完分区后。使用Unetbootin把对应的系统镜像写入到对应分区中：⚠️<strong>千万不要选错，把别的分区抹掉就要重来了。</strong>⚠️<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-5-copyUbuntu.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-6-copyWin10.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-Windows10%20make.png" alt=""></p><p> 对于WEIPE，官网下载得到的是WeiPE.exe文件，打开并选择<code>生成ISO文件</code>，得到ISO文件后，直接<code>双击打开</code>，<code>全选里面的文件拷贝到PE分区</code> 或者 用<code>Unetbootin写入</code>也一样。<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-WEIPE-1.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-WEIPE-2.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-WEIPE-3.png" alt=""></p></li><li>最终得到的效果如下(不要在意U盘和盘符，我用两个U盘分别做了一次，截图乱了点 ╮(￣▽￣)╭)，重启按F12(通常是F12)进入启动项选择界面即可选择对应的启动项。<br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-newThreePart.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-u-disk-final.png" alt=""><br> <img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-MiPro%20Boot.jpg" alt="引导画面"></li></ol><h2 id="Ⅳ-Q-amp-A"><a href="#Ⅳ-Q-amp-A" class="headerlink" title="Ⅳ.Q &amp; A"></a>Ⅳ.Q &amp; A</h2><ol><li>安装盘有了新版本怎么办？<ul><li>只要抹掉该分区，重新按照之前的步骤刷入即可。Windows 也是同理，不过要在 Windows 中就格式化对应分区重新写入。</li></ul></li><li>有安装盘的那些分区可以自己存文件么？<ul><li>当然可以，可用空间里面随便存，不会浪费。比如Install macOS High Sierra的盘可以放些驱动/常用App之类的，安装完系统可以从U盘里面拷贝使用，WIN10分区可以放些PE没有的一些工具，也可以存自己日常的一些文件，不过最好新建文件夹来存储。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-032556.png" alt=""><br><img src="http://blog-1251678165.coscd.myqcloud.com/2017-12-03-032634.png" alt=""></li></ul></li><li>推出 U 盘的时候总是无法推出怎么办？<ul><li>因为四个区的关系，在较慢的 U 盘上推出的时候会非常的卡，这是正常现象，多等一会就好了。</li></ul></li></ol><h2 id="Ⅴ-参考资料"><a href="#Ⅴ-参考资料" class="headerlink" title="Ⅴ.参考资料"></a>Ⅴ.参考资料</h2><blockquote><ul><li><a href="https://sspai.com/post/41960" target="_blank" rel="noopener">制作一个四合一维护 U 盘，重装系统还能有多方便？</a></li><li><a href="http://www.ruanyifeng.com/blog/2013/02/booting.html" target="_blank" rel="noopener">计算机是如何启动的 - 阮一峰</a></li><li><a href="https://www.zhihu.com/question/21672895" target="_blank" rel="noopener">UEFI 和 BIOS 引导有什么不同 - 知乎</a></li><li><a href="https://decio.eu/2014/01/16/correct-name-and-icons-in-startup-manager/" target="_blank" rel="noopener">Correct name and icons in Startup Manager </a></li></ul></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> macSierra </tag>
            
            <tag> Linux </tag>
            
            <tag> Winodws </tag>
            
            <tag> PE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>暗影精灵2Plus GTX1060独显亮度调节实现</title>
      <link href="/20170826/hp2plus-gtx1060-using/"/>
      <url>/20170826/hp2plus-gtx1060-using/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="暗影精灵2Plus-GTX1060独显亮度调节实现"><a href="#暗影精灵2Plus-GTX1060独显亮度调节实现" class="headerlink" title="暗影精灵2Plus GTX1060独显亮度调节实现"></a>暗影精灵2Plus GTX1060独显亮度调节实现</h1><blockquote><p>Foreword：本来打算毕业工作了再换本的，但是实在受不了之前那个低压U本Yoga13了，开个IDE和模拟器就快炸了，玩个LOL一打团就变PPT玩个蛇皮；然后然后看到<strong><code>暗影精灵2Plus</code></strong>七代U版本比首发价还低1000就忍不住剁手了🤣，总体体验：性能不用说，i7+GTX1060甜品显卡基本都可以玩，72％色域IPS屏幕也是很棒，缺点17.3寸比较重、台达电源230W好大一块砖、键盘方向键反人类🙃<br><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-023638.jpg" alt="Order"><br>回到主题：这本惠普自己把<strong><code>核显HD630屏蔽</code></strong>了，Windows设备管理器都看不到😉（Windows上不插电源没法玩游戏🙃），Hackintosh岂不是可以直接用GTX1060了😉美滋滋，虽然是用上了但是<strong><code>亮度调节</code></strong>一直不行，直到昨天才搞定。</p></blockquote><a id="more"></a><ol><li>本次参考的教程：<ul><li><a href="http://bbs.pcbeta.com/viewthread-1742873-9-1.html" target="_blank" rel="noopener">【笔记本GTX1060】现在弄好了调节亮度啦-远景论坛-微软极客社区</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1714158-1-1.html" target="_blank" rel="noopener">蓝天p6xxrx 准系统EFI 10.12 （神舟战神z7s3）-远景论坛-微软极客社区</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1663916-1-1.html" target="_blank" rel="noopener">GTX970M-原生亮度调节-远景论坛-微软极客社区</a></li><li><a href="http://bbs.pcbeta.com/viewthread-1473634-1-1.html" target="_blank" rel="noopener">轻松注入EDID参数-远景论坛-微软极客社区</a></li></ul></li><li>使用到的工具：<ul><li><a href="https://bitbucket.org/blackosx/darwindumper/downloads/" target="_blank" rel="noopener">DarwinDumper_v3.0.3</a></li><li><a href="http://bbs.pcbeta.com/forum.php?mod=viewthread&amp;tid=1525657" target="_blank" rel="noopener">注入EDID的利器：FixEDID 2.3.2(12楼已有热心会员做的汉化版)</a></li><li><a href="https://bitbucket.org/RehabMan/os-x-maciasl-patchmatic/downloads/" target="_blank" rel="noopener">MaciASL DSDT和SSDT工具</a></li><li><a href="https://bitbucket.org/RehabMan/acpica/downloads/" target="_blank" rel="noopener">Acpica iasl 反编译脚步工具</a></li><li><a href="http://www.insanelymac.com/forum/files/file/397-easykext-pro-a-minimal-and-super-fast-kext-installer/" target="_blank" rel="noopener">EasyKext Pro 驱动安装和权限修复</a></li></ul></li></ol><h2 id="一-注入EDID"><a href="#一-注入EDID" class="headerlink" title="一.注入EDID"></a>一.注入EDID</h2><ol><li><p>打开DarwinDumper_v3.0.3直接点击Run（也可只选EDID）<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-031521.jpg" alt="DarwinDumper_v3.0.3"><br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-031613.jpg" alt="Report"></p><blockquote><p>之前我用教程带的DarwinDumper2.8.8生成的bin文件在FixEDID2.3导入报错，2.3版本目测选hex文件会有问题，坑啊🙃，还好去找到了最新的版本3.0.3用起来没啥问题</p></blockquote></li><li><p>打开FixEDID 2.3.2，打开EDID文件选择刚才生成的EDID.bin，其他需要勾选的图上已做标注：选择显示器型号，下面两个都选AppleBlacklightDisplay，然后点击make得到三个东西：DisplayVendorID-xxx文件夹、DisplayMergeNub.kext、EDID-xxx.bin。然后需要做的是<code>把驱动安装到S/L/E并修复缓存</code> 或者 <code>把DisplayVendorID-xxx文件夹放到/System/Library/Displays/Contents/Resources/Overrides目录下</code> 推荐使用驱动注入，重新启动看看显示器情况。<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-155155.jpg" alt="FixEDID"></p><blockquote><p>坑点：把FixEDID中显示器型号都试了一遍，生成的驱动安装到S/L/E均无效，功能扩展显示<code>签名验证错误</code><br><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-134239.jpg" alt="Kextsign"><br>无奈只能选择把 <strong>显示器的Overrides文件</strong> 扔到 <code>/System/Library/Displays/Contents/Resources/Overrides</code> ，这种方式也存在不少问题，多数型号开机卡住（强制关机然后-V模式可进入），部分是没有任何效果，只有MacBook Pro 16:10可行，当时效果如下：<br><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-154719.jpg" alt="MBP"><br>17.3寸显示器显示成了13.3寸🙃</p></blockquote></li></ol><h2 id="二-DSDT部分"><a href="#二-DSDT部分" class="headerlink" title="二.DSDT部分"></a>二.DSDT部分</h2><ol><li>打补丁：Brightness fix（加入PLNF代码，记得先把已存在的PLNF重命名）<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-103057.jpg" alt="Brightness"></li><li><p>最关键地方：打开IORegistryExplorer搜索display，查看AppleDisplay所在位置<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-040403.jpg" alt="AppleDisplay"><br> 打开MaciASL，选择相应DSDT文件，在DSDT下的PEG0下PEGP总加入_DSM方法，注入代码如下:</p><pre><code> Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method {    If (LEqual (Arg2, Zero))    {        Return (Buffer (One)        {             0x03                                                   })    }    Return (Package (0x16)    {        &quot;@1,AAPL,boot-display&quot;,         Buffer (One)        {             0x01                                                   },         &quot;@1,backlight-control&quot;,         Buffer (0x04)        {             0x01, 0x00, 0x00, 0x00                                 },         &quot;@1,built-in&quot;,         Buffer (One)        {             0x01                                                   },         &quot;@0,connector-type&quot;,         Buffer (0x04)        {             0x00, 0x08, 0x00, 0x00                                 },         &quot;@1,connector-type&quot;,         Buffer (0x04)        {             0x00, 0x04, 0x00, 0x00                                 },         &quot;@2,connector-type&quot;,         Buffer (0x04)        {             0x00, 0x04, 0x00, 0x00                                 },         &quot;@3,connector-type&quot;,         Buffer (0x04)        {             0x00, 0x04, 0x00, 0x00                                 },         &quot;@4,connector-type&quot;,         Buffer (0x04)        {             0x00, 0x04, 0x00, 0x00                                 },         &quot;@5,connector-type&quot;,         Buffer (0x04)        {             0x00, 0x04, 0x00, 0x00                                 },         &quot;@1,pwm-info&quot;,         Buffer (0x14)        {            /* 0000 */  0x01, 0x14, 0x00, 0x64, 0xA8, 0x61, 0x00, 0x00,            /* 0008 */  0x1E, 0x02, 0x00, 0x00, 0x2C, 0x00, 0x00, 0x00,            /* 0010 */  0x00, 0x04, 0x00, 0x00                                 },         &quot;hda-gfx&quot;,         Buffer (0x0A)        {            &quot;onboard-1&quot;        }    }) }</code></pre><blockquote><p>注意：”@1,AAPL,boot-display”, “@1,backlight-control”,”@1,built-in”,”@1,pwm-info”这几个地方，@1是显示器所在位置，根据IORegistryExplorer显示：我的是在NVDA,Display-B@1。<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-DSDT%20AppleDisplay.png" alt="DSDT AppleDisplay"><br> 插入完代码保存DSDT，把它放到<code>/EFI/CLOVER/ACPI/patched</code>，Clover中勾选注入即可，重启即可看到加载的是AppleBlacklightDisplay<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-043716.jpg" alt="AppleBlacklightDisplay"></p></blockquote></li></ol><h2 id="三-替换驱动"><a href="#三-替换驱动" class="headerlink" title="三.替换驱动"></a>三.替换驱动</h2><ol><li>10.12.4下可不用替换AppleBacklight.kext，但是10.12.5/10.12.6需要替换，10.13未知，驱动分享链接: <a href="https://pan.baidu.com/s/1mhPjxqS" target="_blank" rel="noopener">https://pan.baidu.com/s/1mhPjxqS</a> 密码: 6666</li><li>使用EasyKext安装修复缓存即可。</li></ol><h2 id="四-效果展示"><a href="#四-效果展示" class="headerlink" title="四.效果展示"></a>四.效果展示</h2><p>完成上面三步，基本上就是OK了~重启电脑试试吧😉😉😉！！！（我的亮度直接是可保存的，若不可以请参考：<a href="http://bbs.pcbeta.com/viewthread-1538926-1-1.html" target="_blank" rel="noopener">[分享] 解决开机第二阶段花屏和Clover脚本不生成nvram.plist导致不能保存亮度的问题</a>）</p><p><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-043359.jpg" alt="概览"><br><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-043512.jpg" alt="显示器图形卡"><br><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-043606.jpg" alt="亮度调节1"><br><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-044609.jpg" alt="亮度调节2"><br><img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-044641.jpg" alt="亮度调节3"></p><blockquote><p><strong>差不多就结束了吧，踩得坑还是不少，尤其是注入EDID，之前一直不行所有放弃放弃……，但是看到论坛有不少人都可以实现独显亮度调节，忍不住又回来重试了好几遍，折腾啊……</strong>🙃🙃🙃</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> macSierra </tag>
            
            <tag> Hackintosh </tag>
            
            <tag> DSDT </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>注入EDID</title>
      <link href="/20170818/inject-edid/"/>
      <url>/20170818/inject-edid/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><ol><li>打开DarwinDumper.app，只选择EDID然后点击run，默认会在<code>/Applications/DarwinDumperReports/</code>目录下生成，比如：<code>/Applications/DarwinDumperReports/000_2017-08-23_10-44-07_MacBookPro14,3/DarwinDumper_2.8.8_INSYDE_Corp._X64_Unknown_weicools/EDID</code><br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034014.jpg" alt="DarwinDumper"><br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034403.jpg" alt="DarwinDumperReports"><a id="more"></a></li><li><p>把生成的EDID考到桌面文件夹，打开FixEDID.app（2.3版本），选择EDID.hex文件（不知道为啥按照这个教程<a href="http://bbs.pcbeta.com/viewthread-1473634-1-1.html" target="_blank" rel="noopener">[分享] 轻松注入EDID参数</a>其中说了：<strong><em>2、打开FixEDID软件，在主界面会有一个open edid binary file按钮，点击该按钮，然后选中上一步生成的EDID.hex文件( 最新版选择的文件是二进制文件EDID.bin)</em></strong>但是我用2.3版本选择bin文件报错，只能选hex文件）<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-190209.jpg" alt="FixEDID.app2.3"><br> 点击make后，桌面上会生成这三个东西：<br> <img src="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-190427.jpg" alt="DisplayVendorID-30e4"></p></li><li><p>然后呢？？？（我安装DisplayMergeNub.kext没有效果，然后再把DisplayVendorID-30e4文件夹扔到<code>/System/Library/Displays/Contents/Resources/Overrides</code> 就直接开机黑屏了）到达该咋办？？？</p></li></ol><p>按照大佬ed流程：-注入EDID，-显示器内建，-IORegistryExplorer软件看到AppleBacklightDisplay被加载，-PNLF代码 ，-在PEG0 的PEGP之下添加。</p><p>注入EDID我是按教程这样弄得，但是弄到第三步不知道怎么弄才可以了</p><ol><li>打开DarwinDumper.app，只选择EDID然后点击run<br>[img=664,575]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034014.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034014.jpg[/img]</a><br>[img=1179,436]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034403.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034403.jpg[/img]</a></li></ol><p>2.把生成的EDID考到桌面文件夹，打开FixEDID.app（2.3版本），选择EDID.hex文件<br>[img=1463,529]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-190209.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-190209.jpg[/img]</a><br>点击make后，桌面上会生成这三个东西：<br>[img=770,436]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-190427.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-190427.jpg[/img]</a></p><p>3.然后呢？？？（我安装DisplayMergeNub.kext没有效果，然后再把DisplayVendorID-30e4文件夹扔到/System/Library/Displays/Contents/Resources/Overrides 就直接开机黑屏了）该咋办？？？</p><p>PLNF代码没加，PEGP代码已注入，IORegistryExplorer中没看到AppleBacklightDisplay加载，显示器还没內建，已经替换了10.12.4驱动，目前情况就是这样{:5_275:}。求大佬解答帮帮忙</p><p>更新了DarwinDumper版本到3.0.3生成的EDID bin文件在FixEDID 2.3中打开不会报错了，但是把里面所有显示器型号都试了一遍，生成的驱动安装都是签名有问题[img=1091,902]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-134239.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-134239.jpg[/img]</a></p><p>无奈只能把DisplayVendorID-30e4放到display中的Overrides里面，但是也是只有MBP这个型号可以用其他基本都是开机黑屏。。。效果是这样的：我17.3显示器显示成了13.3分辨率显示也不一样[img=1463,530]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-155155.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-26-155155.jpg[/img]</a></p><p>试了一晚上了{:5_275:}，显示器內建只是注入EDID？还要怎么操作？？？</p><p>00FFFFFF FFFFFF00 30E46E04 00000000 00180104 A5261578 0A0BB5A3 5955A027 0C505400 00000101 01010101 01010101 01010101 01012E36 80A07038 1F403020 35007ED7 1000001B 1F2480A0 70381F40 30203500 7ED71000 001B0000 00000000 00000000 00000000 00000000 00000002 000A30FF 0A3C9619 1D489600 0000003F </p><p>00ffffff ffffff00 30e46e04 00000000 00180104 a5261578 0a0bb5a3 5955a027 0c505400 00000101 01010101 01010101 01010101 01012e36 80a07038 1f403020 35007ed7 1000001b 1f2480a0 70381f40 30203500 7ed71000 001b0000 00000000 00000000 00000000 00000000 00000002 000a30ff 0a3c9619 1d489600 0000003f</p><p>修改DSDT的方式，我不太清楚。再提一下注入EDID/显示器內建过程，我发现并不需要DarwinDumper和FixEDID这两个工具来完成。原因如下：使用FixEDID 2.3选择EDID.bin文件后选择相应显示器等等一系列操作 ，生成的文件夹里面数据不对（生成的驱动在我这里安装后显示签名错误，不能使用）。所有直接用IORegistryExplorer查看相关数据填上去就OK啦~亲测成功，上图：<br>[img=1471,977]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID.png[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID.png[/img]</a><br>关于IODisplayEDID的Data也可以不用一个一个的填上去，可以按下图方式：使用PlistEdit Pro打开DarwinDumper生成的EDID.hex，具体操作如下：<br>[img=1598,976]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID%20Data.png[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID%20Data.png[/img]</a></p><p>附上可参考的文件模板：[attach]3991721[/attach]照着改就好了，改完记得把文件夹扔到/System/Library/Displays/Contents/Resources/Overrides目录下</p><p>效果展示：<br>[img=1091,926]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181802.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181802.jpg[/img]</a><br>[img=1092,927]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181851.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181851.jpg[/img]</a><br>显示器就不会是原来显示的那样了，13.3寸一看就是数据不对{:5_260:}，改了之后就正常了{:5_262:}</p><p>上一篇帖子：<br>[分享] 暗影精灵2Plus GTX1060独显亮度调节实现（<a href="http://bbs.pcbeta.com/viewthread-1755616-1-1.html）" target="_blank" rel="noopener">http://bbs.pcbeta.com/viewthread-1755616-1-1.html）</a></p><p>关于修改DSDT的方式，我不太清楚。我自己尝试了注入EDID/显示器內建过程，我发现并不需要DarwinDumper和FixEDID这两个工具来完成。原因如下：使用FixEDID 2.3选择EDID.bin文件后选择相应显示器等等一系列操作 ，生成的文件夹里面数据不对，虽然还是能够看到显示器內建了但是看着不爽啊（生成的驱动在我这里安装后显示签名错误，不能使用）。所有直接用IORegistryExplorer查看相关数据填上去就OK啦~亲测成功，上图：<br>[img=1471,977]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID.png[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID.png[/img]</a><br>关于IODisplayEDID的Data也可以不用一个一个的填上去，可以按下图方式：使用PlistEdit Pro打开DarwinDumper生成的EDID.hex，具体操作如下：<br>[img=1598,976]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID%20Data.png[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-EDID%20Data.png[/img]</a></p><p>附上可参考的文件模板：[attach]3991721[/attach]照着改就好了，改完记得把文件夹扔到/System/Library/Displays/Contents/Resources/Overrides目录下<br>附上度盘：链接: <a href="https://pan.baidu.com/s/1kViOmwv" target="_blank" rel="noopener">https://pan.baidu.com/s/1kViOmwv</a> 密码: 7axt</p><p>效果展示：<br>原来是：</p><p>改之后：<br>[img=1091,926]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181802.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181802.jpg[/img]</a><br>[img=1092,927]<a href="http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181851.jpg[/img]" target="_blank" rel="noopener">http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-181851.jpg[/img]</a><br>显示器就不会是原来显示的那样了，13.3寸一看就是数据不对{:5_260:}，改了之后就正常了{:5_262:}</p>]]></content>
      
      
      
        <tags>
            
            <tag> macSierra </tag>
            
            <tag> EDID </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 责任链模式</title>
      <link href="/20170318/chain-of-responsibility/"/>
      <url>/20170318/chain-of-responsibility/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>锁链这种链式结构，每个节点都可以被拆开再连接，因此链式结构也具有很好的灵活性，在编程领域，将每一个节点看作一个对象，每个对象有不同的处理逻辑，将一个请求从链式的首端出发，沿着路径依次传递到每个节点对象，直到有对象处理这个请求为止。<br>定义: 责任链模式是行为型设计模式之一，它使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连成一条链，并沿着这条链传递该请求，直到有对象处理它为止。</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>多个对象可以处理同一请求，但具体由哪个对象处理则在运行时动态决定。 </li><li>在请求处理者不明确的情况下向多个对象中的一个提交请求。 </li><li>需要动态指定一组对象处理请求。</li></ol><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Chain.png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 抽象处理角色，申明一个请求处理方法 * 并在其中保持一个对下一个处理节点Handler的引用 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//下一个节点处理者</span>    <span class="token keyword">protected</span> Handler successor<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String condition<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 具体处理者角色，对请求进行处理，如果不能处理就转发给下一个处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerA</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerA"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerA handled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 具体处理者角色，对请求进行处理，如果不能处理就转发给下一个处理 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteHandlerB</span> <span class="token keyword">extends</span> <span class="token class-name">Handler</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span>String condition<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>condition<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerB"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandlerB handled"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            successor<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>condition<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ConcreteHandlerA handlerA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ConcreteHandlerB handlerB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteHandlerB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        handlerA<span class="token punctuation">.</span>successor <span class="token operator">=</span> handlerB<span class="token punctuation">;</span>        handlerB<span class="token punctuation">.</span>successor <span class="token operator">=</span> handlerA<span class="token punctuation">;</span>        handlerA<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token string">"ConcreteHandleB"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>这个例子我觉得很贴切。我们在公司有各种原因需要报销费用，首先我们要找我们的上级领导去审批，报销额度如果在领导的权限范围内，那就审批通过，否则领导在找自己的上级去审批，以此类推。</p></blockquote><h4 id="抽象领导类"><a href="#抽象领导类" class="headerlink" title="抽象领导类"></a>抽象领导类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Leader</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 上级领导处理者     */</span>    <span class="token keyword">protected</span> Leader nextHandler<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 处理报账请求     *      * @param money 能批复的报账额度      *      */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>money <span class="token operator">&lt;=</span><span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">handle</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"报账额度不足，提交领导"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>null <span class="token operator">!=</span> nextHandler<span class="token punctuation">)</span><span class="token punctuation">{</span>                nextHandler<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span>money<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 自身能批复的额度权限     *      * @return 额度     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 处理报账行为     *      * @param money 具体金额     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取处理者     *      * @return 处理者     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="组长（额度1000）："><a href="#组长（额度1000）：" class="headerlink" title="组长（额度1000）："></a>组长（额度1000）：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">GroupLeader</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">1000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"组长批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是组长"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span> </code></pre><h4 id="主管（额度5000）："><a href="#主管（额度5000）：" class="headerlink" title="主管（额度5000）："></a>主管（额度5000）：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Director</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">5000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"主管批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是主管"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="经理（额度10000）："><a href="#经理（额度10000）：" class="headerlink" title="经理（额度10000）："></a>经理（额度10000）：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Manager</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token number">10000</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"经理批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是经理"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="老板（额度无上限）"><a href="#老板（额度无上限）" class="headerlink" title="老板（额度无上限）:"></a>老板（额度无上限）:</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token keyword">extends</span> <span class="token class-name">Leader</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">limit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> Integer<span class="token punctuation">.</span>MAX_VALUE<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">handle</span><span class="token punctuation">(</span><span class="token keyword">int</span> money<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板批复报销"</span><span class="token operator">+</span> money <span class="token operator">+</span><span class="token string">"元"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">getLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"当前是老板"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="发起申请："><a href="#发起申请：" class="headerlink" title="发起申请："></a>发起申请：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造各个领导对象</span>        GroupLeader groupLeader <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">GroupLeader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Director director <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Director</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Manager manager <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Manager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Boss boss <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boss</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置上级领导处理者对象</span>        groupLeader<span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> director<span class="token punctuation">;</span>        director<span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> manager<span class="token punctuation">;</span>        manager<span class="token punctuation">.</span>nextHandler <span class="token operator">=</span> boss<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//发起报账申请</span>        groupLeader<span class="token punctuation">.</span><span class="token function">handleRequest</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><pre><code>当前是组长报账额度不足，提交领导当前是主管报账额度不足，提交领导当前是经理经理批复报销8000元123456</code></pre><p>责任链模式非常灵活，请求的发起可以从责任链的任何一个节点开始，也可以改变内部的传递规则。比如主管不在，我们完全可以跨过主管直接从组长那里转到经理。</p><blockquote><p>对于责任链中的一个处理者对象，有两个行为。一是处理请求，二是将请求传递到下一节点，不允许某个处理者对象在处理了请求后又将请求传送给上一个节点的情况。<br>对于一条责任链来说，一个请求最终只有两种情况。一是被某个处理对象所处理，另一个是所有对象均未对其处理，对于前一种情况我们称为<strong>纯的责任链模式</strong>，后一种为<strong>不纯的责任链</strong>。实际中大多为不纯的责任链。</p></blockquote><h3 id="Android源码中的责任链模式"><a href="#Android源码中的责任链模式" class="headerlink" title="Android源码中的责任链模式"></a>Android源码中的责任链模式</h3><ul><li>View事件的分发处理</li></ul><p>ViewGroup事件投递的递归调用就类似于一条责任链，一旦其寻找到责任者，那么将由责任者持有并消费掉该次事件，具体体现在View的onTouchEvent方法中返回值的设置，如果返回false，那么意味着当前的View不会是该次的责任人，将不会对其持有；如果返回true，此时View会持有该事件并不再向外传递。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>优点<ul><li>可以对请求者和处理者的关系解耦，提高代码的灵活性。</li></ul></li><li>缺点<ul><li>每次都需要对链中请求处理者遍历，如果处理者太多那么遍历必定会影响性能，特别是在一些递归调用者中，要慎用。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 命令模式</title>
      <link href="/20170318/command-pattern/"/>
      <url>/20170318/command-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>命令模式是行为型模式之一。总体来说并不难理解，只是比较繁琐，他会将简单的调用关系解耦成多个部分，增加类的复杂度，但是即便如此，命令模式的结构依然清晰。<br>定义: 将一个请求封装成一个对象，从而让用户使用不同的请求把客户端参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。</p></blockquote><a id="more"></a><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>（1）需要抽出待执行的动作，然后以参数的形式提供出来。</li><li>（2）在不同的时刻指定、排列和执行请求。一个命令对象可以有与初始请求无关的生存期。</li><li>（3）需要支持操作取消。</li><li>（4）支持修改日志功能，这样当系统崩溃时，这些修改可以被重做一遍。</li><li>（5）需要支持事务操作。</li></ul><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Command.png" alt=""></p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>以推箱子游戏为例，一般游戏中会有五个按钮，分别是左移、右移、下移、上移和撤销。那么玩游戏的人就是客户端，五个按钮就是调用者，执行具体按钮命令的方法是命令角色。</p></blockquote><h4 id="接收者角色：推箱子游戏"><a href="#接收者角色：推箱子游戏" class="headerlink" title="接收者角色：推箱子游戏"></a>接收者角色：推箱子游戏</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PushBox</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 执行向左命令      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向左"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行向右命令      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向右"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行向下命令      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向下"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行向上命令      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"向上"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 执行撤销命令      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"撤销"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="命令者抽象"><a href="#命令者抽象" class="headerlink" title="命令者抽象"></a>命令者抽象</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Command</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 命令执行方法     */</span>    <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取命令类型     */</span>    <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="具体命令者，左移命令类"><a href="#具体命令者，左移命令类" class="headerlink" title="具体命令者，左移命令类"></a>具体命令者，左移命令类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LeftCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> PushBox pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">LeftCommand</span><span class="token punctuation">(</span>PushBox pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向左-->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="具体命令者，右移命令类"><a href="#具体命令者，右移命令类" class="headerlink" title="具体命令者，右移命令类"></a>具体命令者，右移命令类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RightCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> PushBox pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RightCommand</span><span class="token punctuation">(</span>PushBox pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向右-->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="具体命令者，上移命令类"><a href="#具体命令者，上移命令类" class="headerlink" title="具体命令者，上移命令类"></a>具体命令者，上移命令类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UpCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> PushBox pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">UpCommand</span><span class="token punctuation">(</span>PushBox pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向上-->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="具体命令者，下移命令类"><a href="#具体命令者，下移命令类" class="headerlink" title="具体命令者，下移命令类"></a>具体命令者，下移命令类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DownCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> PushBox pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DownCommand</span><span class="token punctuation">(</span>PushBox pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"向下-->"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="具体命令者，撤销命令类"><a href="#具体命令者，撤销命令类" class="headerlink" title="具体命令者，撤销命令类"></a>具体命令者，撤销命令类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RevokeCommand</span> <span class="token keyword">implements</span> <span class="token class-name">Command</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有一个接受推箱子游戏对象的引用</span>    <span class="token keyword">private</span> PushBox pushBox<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">RevokeCommand</span><span class="token punctuation">(</span>PushBox pushBox<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>pushBox <span class="token operator">=</span> pushBox<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用具体命令</span>        pushBox<span class="token punctuation">.</span><span class="token function">revoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="请求者类，命令由按钮发起"><a href="#请求者类，命令由按钮发起" class="headerlink" title="请求者类，命令由按钮发起"></a>请求者类，命令由按钮发起</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Buttons</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> LeftCommand leftCommand<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向左移动的命令对象引用</span>    <span class="token keyword">private</span> RightCommand rightCommand<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向右移动的命令对象引用</span>    <span class="token keyword">private</span> UpCommand upCommand<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向上移动的命令对象引用</span>    <span class="token keyword">private</span> DownCommand downCommand<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//向下移动的命令对象引用</span>    <span class="token keyword">private</span> RevokeCommand revokeCommand<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//撤销命令对象引用</span>    <span class="token keyword">private</span> ArrayList<span class="token operator">&lt;</span>Command<span class="token operator">></span> commandList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span>Command<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//用于记录命令动作</span>    <span class="token comment" spellcheck="true">/**     * 获取执行命令     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getCommandList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span><span class="token punctuation">(</span>Command c <span class="token operator">:</span> commandList<span class="token punctuation">)</span><span class="token punctuation">{</span>            c<span class="token punctuation">.</span><span class="token function">getCommand</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置向左移动的命令对象     *      * @param leftCommand 向左移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setLeftCommand</span><span class="token punctuation">(</span>LeftCommand leftCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>leftCommand <span class="token operator">=</span> leftCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置向右移动的命令对象     *      * @param rightCommand 向右移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRightCommand</span><span class="token punctuation">(</span>RightCommand rightCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>rightCommand <span class="token operator">=</span> rightCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置向上移动的命令对象     *      * @param upCommand 向上移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setUpCommand</span><span class="token punctuation">(</span>UpCommand upCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>upCommand <span class="token operator">=</span> upCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置向下移动的命令对象     *      * @param downCommand 向下移动的命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setDownCommand</span><span class="token punctuation">(</span>DownCommand downCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>downCommand <span class="token operator">=</span> downCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 设置撤销命令对象     *      * @param revokeCommand 撤销命令对象     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setRevokeCommand</span><span class="token punctuation">(</span>RevokeCommand revokeCommand<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>revokeCommand <span class="token operator">=</span> revokeCommand<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按下向左按钮      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        leftCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>leftCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按下向右按钮      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        rightCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>rightCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按下向上按钮      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        upCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>upCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按下向下按钮      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        downCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>downCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 按下撤销按钮      */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">toRevoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        revokeCommand<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        commandList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>commandList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="客户端调用"><a href="#客户端调用" class="headerlink" title="客户端调用"></a>客户端调用</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先创建游戏</span>        PushBox pushBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据游戏构造5种命令</span>        LeftCommand leftCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LeftCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        RightCommand rightCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RightCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        UpCommand upCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UpCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        DownCommand downCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DownCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        RevokeCommand revokeCommand <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RevokeCommand</span><span class="token punctuation">(</span>pushBox<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//按钮可以执行不同命令</span>        Buttons buttons <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Buttons</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setLeftCommand</span><span class="token punctuation">(</span>leftCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setRightCommand</span><span class="token punctuation">(</span>rightCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setUpCommand</span><span class="token punctuation">(</span>upCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setDownCommand</span><span class="token punctuation">(</span>downCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">setRevokeCommand</span><span class="token punctuation">(</span>revokeCommand<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//执行操作</span>        buttons<span class="token punctuation">.</span><span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">getCommandList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toRevoke</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toLeft</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        buttons<span class="token punctuation">.</span><span class="token function">getCommandList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="执行结果"><a href="#执行结果" class="headerlink" title="执行结果"></a>执行结果</h4><pre><code>向左向下向下向右向左--&gt;向下--&gt;向下--&gt;向右--&gt;撤销向上向左向下向上向左--&gt;向下--&gt;向下--&gt;向上--&gt;向左--&gt;向下--&gt;向上--&gt;1234567891011</code></pre><p>在这么长的代码之后是不是觉得很烦琐，明明可以很简单的实现，如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//首先创建游戏</span>        PushBox pushBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PushBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pushBox<span class="token punctuation">.</span><span class="token function">toDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pushBox<span class="token punctuation">.</span><span class="token function">toRight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pushBox<span class="token punctuation">.</span><span class="token function">toUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>其实设计模式有一个重要的原则：对修改关闭对扩展开放。如果使用如上的简单方式，那么以后的修改只能去修改PushBox类，然后修改Client类，这显然违反了这一原则。如果使用命令模式，那么Client类无需修改，只需要修改PushBox类的内部操作，Client类无需知道具体的内部实现。</p><blockquote><p>设计模式的使用之前也有提到，主要是要看当前场景的复杂度和以后的需求进行扩展、维护等方面，完全使用设计模式也是不提倡的，这就需要设计者权衡利弊了。</p></blockquote><h3 id="Android源码中的命令模式实现"><a href="#Android源码中的命令模式实现" class="headerlink" title="Android源码中的命令模式实现"></a>Android源码中的命令模式实现</h3><ol><li>PackageHandler</li></ol><p>PackageManagerService中，其对包的相关消息处理右其内部类PackageHandler承担，其将需要处理的请求作为对象通过消息传递给相关的方法，而对于包的安装、移动以及包大小的测量则分别封装为<strong>HandlerParams</strong>的具体子类<strong>InstallParams</strong>、<strong>MoveParams</strong>和<strong>MeasureParams</strong>。源码如下：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">HandlerParams</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> MAX_RETRIES <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">/**         * Number of times startCopy() has been attempted and had a non-fatal         * error.         */</span>        <span class="token keyword">private</span> <span class="token keyword">int</span> mRetries <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">boolean</span> <span class="token function">startCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">boolean</span> res<span class="token punctuation">;</span>            <span class="token keyword">try</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"startCopy"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">++</span>mRetries <span class="token operator">></span> MAX_RETRIES<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    Slog<span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Failed to invoke remote methods on default container service. Giving up"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_GIVE_UP<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    res <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">RemoteException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"Posting install MCS_RECONNECT"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mHandler<span class="token punctuation">.</span><span class="token function">sendEmptyMessage</span><span class="token punctuation">(</span>MCS_RECONNECT<span class="token punctuation">)</span><span class="token punctuation">;</span>                res <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> res<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">serviceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>DEBUG_INSTALL<span class="token punctuation">)</span> Slog<span class="token punctuation">.</span><span class="token function">i</span><span class="token punctuation">(</span>TAG<span class="token punctuation">,</span> <span class="token string">"serviceError"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleStartCopy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> RemoteException<span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleServiceError</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">handleReturnCode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p>可以看出<strong>HandlerParams</strong>也是一个抽象命令者。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>优点<ul><li>命令模式的封装性很好，更弱的耦合性，更灵活的控制性以及更好的扩展性。</li></ul></li><li>缺点<ul><li>类的膨胀，大量衍生类的创建。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 组合模式</title>
      <link href="/20170318/composite-pattern/"/>
      <url>/20170318/composite-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>组合模式也称为部分-整体模式，结构型设计模式之一。组合模式比较简单，它将一组相似的对象当作一个对象处理，并根据树状结构来组合对象<br>定义：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。</p></blockquote><a id="more"></a><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>表示对象的部分-整体层次结构时。</li><li>从一个整体中能够独立出部分模块或功能的场景。</li></ol><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><h4 id="安全组合模式"><a href="#安全组合模式" class="headerlink" title="安全组合模式"></a>安全组合模式</h4><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-composite.png" alt="Composite"></p><ul><li>（1）<code>Component</code>：抽象根节点，为组合中的对象声明接口。在适当的情况下，实现所有类共有接口的缺省行为。声明一个接口用于访问和管理Component的子节点。可在递归结构中定义一个接口，用于访问一个父节点，并在合适的情况下实现它。</li><li>（2）<code>Composite</code>：定义有子节点的那些枝干节点行为，存储子节点，在Component接口中实现与子节点有关的操作。</li><li>（3）<code>Leaf</code>：在组合中表示叶子节点对象，叶子节点没有子节点，在组合中定义节点对象的行为。</li><li>（4）<code>Client</code>：通过Component接口操纵组合节点的对象。</li></ul><blockquote><p>如图这种将组合所使用的方法全部定义在抽象类的方式称为<strong>透明的组合模式</strong>，如果将Component中的Add、Remove、GetChild去除，只在Composite中单独添加，这种方式称为<strong>安全的组合模式</strong>。然而后者违背了依赖倒置原则。</p></blockquote><p>通用组合摸底代码</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 抽象根节点，为组合中的对象声明接口。在适当的情况下，实现所有类共有接口的缺省行为 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Component</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 需要子类实现     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 具体分支节点，定义有子节点行为 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储节点容器     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Component<span class="token operator">></span> mComponentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Composite</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mComponentList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Component component <span class="token operator">:</span> mComponentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加子节点     * @param component 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 移除子节点     * @param component 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 获取子节点     * @param index 子节点下标     * @return 子节点     */</span>    <span class="token keyword">public</span> Component <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mComponentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 具体叶子节点，叶子节点没有子节点，在组合中定义节点对象的行为 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Leaf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 通过Component接口操纵组合节点的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造一个根节点</span>        Composite root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造两个分支子节点</span>        Composite branch1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Composite branch2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造两个叶子节点</span>        Leaf leaf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Leaf leaf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将叶子节点添加到分支子节点</span>        branch1<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf1<span class="token punctuation">)</span><span class="token punctuation">;</span>        branch2<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将分支子节点添加到根节点</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch1<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch2<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="透明组合模式"><a href="#透明组合模式" class="headerlink" title="透明组合模式"></a>透明组合模式</h4><p>上面安全组合模式与依赖倒置原则相违背，所定义的抽象Component在这里的作用不大，既然是面向接口编程，那么更多的应该是完善接口设计，对上面的接口做一些修改：<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-composite-transparent.png" alt=""></p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 抽象根节点，为组合中的对象声明接口。在适当的情况下，实现所有类共有接口的缺省行为 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Component</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 具体由子类实现     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 添加子节点     *     * @param child 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span>Component child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 移除子节点     *     * @param child 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span>Component child<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取子节点     *     * @param index 子节点下标     * @return 子节点     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> Component <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 具体分支节点，定义有子节点行为 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Composite</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 存储节点容器     */</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Component<span class="token operator">></span> mComponentList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Composite</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mComponentList <span class="token operator">!=</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>Component component <span class="token operator">:</span> mComponentList<span class="token punctuation">)</span> <span class="token punctuation">{</span>                component<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponentList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Component <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mComponentList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 具体叶子节点，叶子节点没有子节点，某些操作抛出异常 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Leaf</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Leaf</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addChild</span><span class="token punctuation">(</span>Component child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"叶子节点没有子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeChild</span><span class="token punctuation">(</span>Component child<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"叶子节点没有子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Component <span class="token function">getChildren</span><span class="token punctuation">(</span><span class="token keyword">int</span> index<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"叶子节点没有子节点"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 通过Component接口操纵组合节点的对象 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造一个根节点</span>        Composite root <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Root"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造两个分支子节点</span>        Composite branch1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Composite branch2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Composite</span><span class="token punctuation">(</span><span class="token string">"Branch2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//构造两个叶子节点</span>        Leaf leaf1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Leaf leaf2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Leaf</span><span class="token punctuation">(</span><span class="token string">"Leaf2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将叶子节点添加到分支子节点</span>        branch1<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf1<span class="token punctuation">)</span><span class="token punctuation">;</span>        branch2<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>leaf2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//将分支子节点添加到根节点</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch1<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">addChild</span><span class="token punctuation">(</span>branch2<span class="token punctuation">)</span><span class="token punctuation">;</span>        root<span class="token punctuation">.</span><span class="token function">doSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>以文件系统为例，文件系统包含文件和文件夹，而文件夹也可以包含文件。</p></blockquote><h4 id="文件和文件夹的抽象类：（Component）"><a href="#文件和文件夹的抽象类：（Component）" class="headerlink" title="文件和文件夹的抽象类：（Component）"></a>文件和文件夹的抽象类：（Component）</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 表示文件和文件夹的抽象类(Component角色) */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Dir</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//申明List成员变量存储文件夹下所有元素</span>    <span class="token keyword">protected</span> List<span class="token operator">&lt;</span>Dir<span class="token operator">></span> mDirList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//文件名或者文件夹名称</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Dir</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 添加一个文件或者文件夹     *     * @param dir 文件或者文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addDir</span><span class="token punctuation">(</span>Dir dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 删除文件或者文件夹     *     * @param dir 文件或者文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">removeDir</span><span class="token punctuation">(</span>Dir dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 情况文件夹下所有元素     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 输出文件夹目录结构     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 获取文件夹下所有的文件和子文件夹     *     * @return 文件和子文件夹     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> List<span class="token operator">&lt;</span>Dir<span class="token operator">></span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> String <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="表示文件夹的类：（Composite）"><a href="#表示文件夹的类：（Composite）" class="headerlink" title="表示文件夹的类：（Composite）"></a>表示文件夹的类：（Composite）</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 文件夹类(Composite角色) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Folder</span> <span class="token keyword">extends</span> <span class="token class-name">Dir</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">Folder</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDir</span><span class="token punctuation">(</span>Dir dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDirList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeDir</span><span class="token punctuation">(</span>Dir dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDirList<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mDirList<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"("</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Iterator<span class="token operator">&lt;</span>Dir<span class="token operator">></span> iterator <span class="token operator">=</span> mDirList<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            Dir dir <span class="token operator">=</span> iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            dir<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">", "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">")"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dir<span class="token operator">></span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> mDirList<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="表示文件夹的类：（Leaf）"><a href="#表示文件夹的类：（Leaf）" class="headerlink" title="表示文件夹的类：（Leaf）"></a>表示文件夹的类：（Leaf）</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 文件类(Leaf角色) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">File</span> <span class="token keyword">extends</span> <span class="token class-name">Dir</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">File</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addDir</span><span class="token punctuation">(</span>Dir dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">removeDir</span><span class="token punctuation">(</span>Dir dir<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Dir<span class="token operator">></span> <span class="token function">getFiles</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">UnsupportedOperationException</span><span class="token punctuation">(</span><span class="token string">"文件不支持该操作"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="客户测试类："><a href="#客户测试类：" class="headerlink" title="客户测试类："></a>客户测试类：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造一个目录表示SD卡根目录</span>        Dir sdCard <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"Storage"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SD卡下有一个文件"设计模式.pdf"</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"设计模式.pdf"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//SD卡下有3个子文件夹"ADM", "Android", "Books"</span>        Dir adm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"ADM"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        adm<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"google.html"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span>adm<span class="token punctuation">)</span><span class="token punctuation">;</span>        Dir an <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"Android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        an<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"cache.txt"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span>an<span class="token punctuation">)</span><span class="token punctuation">;</span>        Dir books <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Folder</span><span class="token punctuation">(</span><span class="token string">"Books"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        books<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span><span class="token string">"跳槽指南.md"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">addDir</span><span class="token punctuation">(</span>books<span class="token punctuation">)</span><span class="token punctuation">;</span>        sdCard<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="输出结果："><a href="#输出结果：" class="headerlink" title="输出结果："></a>输出结果：</h4><pre><code>Storage(设计模式.pdf, ADM(google.html), Android(cache.txt), Books(跳槽指南.md))</code></pre><h3 id="Android源码中的模式实现"><a href="#Android源码中的模式实现" class="headerlink" title="Android源码中的模式实现"></a>Android源码中的模式实现</h3><ul><li>View和ViewGroup的嵌套组合</li></ul><p>View和ViewGroup的结构很像上面的UML类图，不过View的视图层级使用的是安全的组合模式。ViewGroup有对View的addView、removeView、getChildAt等方法，想必大家也很熟悉。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li><p>优点</p><ul><li>（1）组合模式可以清楚地定义分层次的复杂对象，表示对象的全部或部分层次，他让高层模块忽略了层次的差异，方便对整个层次结构进行控制。</li><li>（2）简化了高层模块的代码。</li><li>（3）在组合模式中增加新的枝干构件和叶子构件都很方便，无须对现有类库进行修改，符合“开闭原则”。</li><li>（4）对树形结构的控制变得简单。</li></ul></li><li><p>缺点</p><ul><li>组合模式不容易限制组合中的构件。因为大多数情况下，它们都来自于相同的抽象层，此时，必须进行类型检查来实现，这个实现过程较为复杂。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 迭代器模式</title>
      <link href="/20170318/iterator-pattern/"/>
      <url>/20170318/iterator-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>迭代器模式，又叫做游标模式，是行为型设计模式之一。我们知道对容器对象的访问必然会涉及遍历算法，我们可以将遍历的方法封装在容器中，或者不提供遍历方法，让使用容器的人自己去实现去吧。这两种情况好像都能够解决问题。<br>然而在前一种情况，容器承受了过多的功能，它不仅要负责自己“容器”内的元素维护（添加、删除等等），而且还要提供遍历自身的接口；而且由于遍历状态保存的问题，不能对同一个容器对象同时进行多个遍历。第二种方式倒是省事，却又将容器的内部细节暴露无遗。<br>正因于此，迭代器模式应运而生，在客户访问类与容器体之间插入一个第三者–迭代器，很好的解决了上述弊端。<br>定义：提供一种方法顺序访问一个容器对象中的各个元素，而又不需要暴露该对象的内部表示。</p></blockquote><a id="more"></a><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>遍历一个容器对象时。</p><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Iterator.png" alt=""></p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>用书中的例子：小民和小辉分别在公司两个事业部，某天老板安排任务让他们俩统计一下各自部门的员工数据。</p></blockquote><h4 id="员工实体类："><a href="#员工实体类：" class="headerlink" title="员工实体类："></a>员工实体类：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Employee</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String name<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 姓名</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 年龄</span>    <span class="token keyword">private</span> String sex<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 性别</span>    <span class="token keyword">private</span> String position<span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 职位</span>    <span class="token keyword">public</span> <span class="token function">Employee</span><span class="token punctuation">(</span>String name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> String sex<span class="token punctuation">,</span> String position<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">=</span> sex<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>position <span class="token operator">=</span> position<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 简化代码，省略setter和getter方法</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"Employee{"</span> <span class="token operator">+</span> <span class="token string">"name='"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">", age="</span> <span class="token operator">+</span> age <span class="token operator">+</span> <span class="token string">", sex="</span>                <span class="token operator">+</span> sex <span class="token operator">+</span> <span class="token string">", position='"</span> <span class="token operator">+</span> position <span class="token operator">+</span> <span class="token string">'\''</span> <span class="token operator">+</span> <span class="token string">"}"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="小辉部门："><a href="#小辉部门：" class="headerlink" title="小辉部门："></a>小辉部门：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyHui</span> <span class="token punctuation">{</span><span class="token keyword">private</span> Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"辉哥"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小辉"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="小民部门："><a href="#小民部门：" class="headerlink" title="小民部门："></a>小民部门：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyMin</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小民"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小芸"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小方"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"可儿"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"朗情"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//吐槽一下，为什么就小民一个男的，小辉部门全男的。</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Boss查看："><a href="#Boss查看：" class="headerlink" title="Boss查看："></a>Boss查看：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CompanyHui hui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> huiList <span class="token operator">=</span> hui<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> huiList<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>huiList<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        CompanyMin min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        List minList <span class="token operator">=</span> min<span class="token punctuation">.</span><span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> minList<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>minList<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><pre><code>Employee{name=&#39;辉哥&#39;, age=28, sex=男, position=&#39;程序猿&#39;}Employee{name=&#39;小红&#39;, age=23, sex=男, position=&#39;程序猿&#39;}Employee{name=&#39;小辉&#39;, age=25, sex=男, position=&#39;程序猿&#39;}Employee{name=&#39;小民&#39;, age=26, sex=男, position=&#39;程序猿&#39;}Employee{name=&#39;小芸&#39;, age=22, sex=女, position=&#39;测试&#39;}Employee{name=&#39;小方&#39;, age=18, sex=女, position=&#39;测试&#39;}Employee{name=&#39;可儿&#39;, age=21, sex=女, position=&#39;设计&#39;}Employee{name=&#39;朗情&#39;, age=19, sex=女, position=&#39;设计&#39;}12345678</code></pre><p>这样看似也没有问题，但是如果有多个部门，每个部门有各自的实现，那么我们就要在Boss类中增加一遍遍历逻辑，这样Boss类的功能会越来越多，同时暴露了内部细节。那么我们需要定义一个迭代器接口：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Iterator</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 是否还有下一个元素      *      * @return true表示有，false表示没有     */</span>    <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 返回当前元素，并将位置移至下一位     */</span>    Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>小民的迭代器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MinIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">MinIterator</span><span class="token punctuation">(</span>List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>position <span class="token operator">></span> list<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Employee e <span class="token operator">=</span> list<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>position<span class="token punctuation">)</span><span class="token punctuation">;</span>        position<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>小辉的迭代器：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HuiIterator</span> <span class="token keyword">implements</span> <span class="token class-name">Iterator</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> position<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">HuiIterator</span><span class="token punctuation">(</span>Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> array<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>array <span class="token operator">=</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token operator">!</span><span class="token punctuation">(</span>position <span class="token operator">></span> array<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> array<span class="token punctuation">[</span>position<span class="token punctuation">]</span> <span class="token operator">==</span> null<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Employee e <span class="token operator">=</span> array<span class="token punctuation">[</span>position<span class="token punctuation">]</span><span class="token punctuation">;</span>        position<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> e<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>定义容器类的接口</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Company</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 返回一个迭代器对象     *      * @return 迭代器对象     */</span>    Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><p>修改一下之前的两个容器类：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyHui</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> array <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        array<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"辉哥"</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小红"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        array<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小辉"</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> Employee<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> array<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">HuiIterator</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CompanyMin</span> <span class="token keyword">implements</span> <span class="token class-name">Company</span><span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小民"</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token string">"男"</span><span class="token punctuation">,</span> <span class="token string">"程序猿"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小芸"</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"小方"</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"测试"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"可儿"</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Employee</span><span class="token punctuation">(</span><span class="token string">"朗情"</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token string">"女"</span><span class="token punctuation">,</span> <span class="token string">"设计"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> List<span class="token operator">&lt;</span>Employee<span class="token operator">></span> <span class="token function">getEmployees</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> list<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Iterator <span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MinIterator</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>Boss查看：</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boss</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        CompanyHui hui <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyHui</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span>hui<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CompanyMin min <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CompanyMin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">check</span><span class="token punctuation">(</span>min<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">check</span><span class="token punctuation">(</span>Iterator iterator<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>iterator<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果不变，就不重复写了。</p><h3 id="Android源码中的模式实现"><a href="#Android源码中的模式实现" class="headerlink" title="Android源码中的模式实现"></a>Android源码中的模式实现</h3><h4 id="Cursor"><a href="#Cursor" class="headerlink" title="Cursor"></a>Cursor</h4><p>当我们使用SQLiteDatabase的query方法查询数据库时，会返回一个Cursor游标对象，该游标的实质就是一个具体的迭代器，我们可以使用它来遍历数据库查询所得的结果集。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>迭代器模式发展至今，几乎所有的高级语言都有相应的内置实现，对于开发者而言，已经极少会自己去实现迭代器了，所以本章内容更多的是了解而非应用。</p></blockquote><ol><li><p>优点</p><ul><li>符合面向对象设计原则中的单一职责原则。</li><li>支持对容器对象的多种遍历。弱化了容器类与遍历算法之间的关系。</li></ul></li><li><p>缺点</p><ul><li>类文件的增加。</li><li>会出现ConcurrentModificationException异常。</li><li>遍历过程是一个单向且不可逆的遍历。</li></ul></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p>● <a href="http://dev.yesky.com/474/2168474.shtml" target="_blank" rel="noopener">深入浅出Java设计模式之迭代器模式</a><br>● <a href="http://blog.csdn.net/lirunfa/article/details/7353857" target="_blank" rel="noopener">ConcurrentModificationException异常</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 状态模式</title>
      <link href="/20170318/state-pattern/"/>
      <url>/20170318/state-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>定义：状态模式中的行为是由状态来决定，不同的状态下有不同的行为。当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。</p></blockquote><a id="more"></a><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>1.一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。<br>2.代码中包含大量与对象状态有关的条件语句，例如，一个操作中含有大量的多分支语句，且这些分支依赖于该对象的状态。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-State.png" alt=""></p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>实现效果：首先将电视的状态分为开机与关机状态，开机时可以通过遥控器实现频道切换和调节音量，但是关机时，这些操作都会失效。</p></blockquote><h4 id="普通的实现方法："><a href="#普通的实现方法：" class="headerlink" title="普通的实现方法："></a>普通的实现方法：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVController</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//开机状态</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> POWER_ON <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//关机状态</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">int</span> POWER_OFF <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">//默认状态</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> mState <span class="token operator">=</span> POWER_OFF<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span>POWER_OFF<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视开机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mState <span class="token operator">=</span> POWER_ON<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span>POWER_ON<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"电视关机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        mState <span class="token operator">=</span> POWER_OFF<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span>POWER_ON<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span>POWER_ON<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span>POWER_ON<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调高音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>mState <span class="token operator">==</span>POWER_ON<span class="token punctuation">)</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调低音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"没有开机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>可以看到，每次执行通过判断当前状态来进行操作，部分的代码重复，假设状态和功能增加，就会越来越难以维护。这时可以使用状态模式，如下：</p><h4 id="电视的操作"><a href="#电视的操作" class="headerlink" title="电视的操作"></a>电视的操作</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 电视状态接口，定义了电视的操作函数 *  * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">TVState</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token number">12345678910111213</span></code></pre><h4 id="关机状态"><a href="#关机状态" class="headerlink" title="关机状态"></a>关机状态</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  * 关机状态，操作无结果 *  * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerOffState</span> <span class="token keyword">implements</span> <span class="token class-name">TVState</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="开机状态"><a href="#开机状态" class="headerlink" title="开机状态"></a>开机状态</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** *  * 开机状态，操作有效 *  * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PowerOnState</span> <span class="token keyword">implements</span> <span class="token class-name">TVState</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"下一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"上一频道"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调高音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"调低音量"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="电源操作接口"><a href="#电源操作接口" class="headerlink" title="电源操作接口"></a>电源操作接口</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 电源操作接口 *  * */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">PowerController</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="电视遥控器"><a href="#电视遥控器" class="headerlink" title="电视遥控器"></a>电视遥控器</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 电视遥控器 *  * */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TVController</span> <span class="token keyword">implements</span> <span class="token class-name">PowerController</span><span class="token punctuation">{</span>    TVState mTVState<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTVState</span><span class="token punctuation">(</span>TVState mTVState<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>mTVState <span class="token operator">=</span> mTVState<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTVState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PowerOnState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"开机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">setTVState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PowerOffState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关机了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">prevChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        mTVState<span class="token punctuation">.</span><span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        TVController tvController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TVController</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//设置开机状态</span>        tvController<span class="token punctuation">.</span><span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//下一频道</span>        tvController<span class="token punctuation">.</span><span class="token function">nextChannel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调高音量</span>        tvController<span class="token punctuation">.</span><span class="token function">turnUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//关机</span>        tvController<span class="token punctuation">.</span><span class="token function">powerOff</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//调低音量，此时不会生效</span>        tvController<span class="token punctuation">.</span><span class="token function">turnDown</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre><code>开机了下一频道调高音量关机了1234</code></pre><p>可以看出，状态模式将这些行为封装到状态类中，在进行操作时将这些功能转发给状态对象，不同的状态有不同的实现，去除了重复了if-else语句，这正是状态模式的精髓所在。</p><h3 id="与策略模式的区别"><a href="#与策略模式的区别" class="headerlink" title="与策略模式的区别"></a>与策略模式的区别</h3><p>状态模式与策略模式的结构几乎是一样的，就像是孪生兄弟。但是他们的目地、本质不一样。状态模式的行为是平行的、不可替换的，策略模式的行为是彼此独立的、可相互替换的。状态模式，通常是自我控制状态的改变。而策略模式，是由外部指定使用什么样的策略。</p><h3 id="Android实战中的使用"><a href="#Android实战中的使用" class="headerlink" title="Android实战中的使用"></a>Android实战中的使用</h3><ol><li>登录系统，根据用户是否登录，判断事件的处理方式。</li><li>Wi-Fi管理，在不同的状态下，WiFi的扫描请求处理不一。</li></ol><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ol><li>优点<ul><li>将所有与一个特定的状态相关的行为都放入一个状态对象中，它提供了一个更好的方法来组织与特定状态相关的代码，将繁琐的状态判断转换成结构清晰的状态类族，在避免代码膨胀的同时也保证了可扩展性与可维护性。</li></ul></li><li>缺点<ul><li>状态模式的使用必然会增加系统类和对象的个数。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 策略模式</title>
      <link href="/20170318/stragety/"/>
      <url>/20170318/stragety/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>通常如果一个问题有多个解决方案时，最简单的就是利用if-else或者switch-case方式根据不同的情景选择不同的解决方案，但是这样耦合性太高 、代码臃肿、难以维护等。这时就可以使用策略模式来解决。<br>定义：策略模式定义了一系列的算法，并将每一个算法封装起来，而且使他们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。</p></blockquote><a id="more"></a><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ol><li>针对同一类型问题的多种处理方式，仅仅是具体行为有差别时。 </li><li>需要安全地封装多种同一类型的操作时。 </li><li>出现同一抽象类有多个子类，而又需要使用if-else或者switch-case来选择具体子类时。</li></ol><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Stragety-2.png" alt=""></p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>需求：计算图书价格，初级会员没有折扣，中级会员打9折，高级会员打8折。如果一般写法，应该是if-else判断他是什么级别的会员，在计算相应的折扣。下面使用策略模式来进行实现。</p></blockquote><h4 id="抽象折扣类"><a href="#抽象折扣类" class="headerlink" title="抽象折扣类"></a>抽象折扣类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">MemberStrategy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 计算图书的价格     * @param booksPrice    图书的原价     * @return    计算出打折后的价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="初级会员折扣类"><a href="#初级会员折扣类" class="headerlink" title="初级会员折扣类"></a>初级会员折扣类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrimaryMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 初级会员折扣     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于初级会员的没有折扣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> booksPrice<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="中级会员折扣类"><a href="#中级会员折扣类" class="headerlink" title="中级会员折扣类"></a>中级会员折扣类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IntermediateMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 中级会员折扣     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于中级会员的折扣为10%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> booksPrice <span class="token operator">*</span> <span class="token number">0.9</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token number">12345678910</span></code></pre><h4 id="高级会员折扣类"><a href="#高级会员折扣类" class="headerlink" title="高级会员折扣类"></a>高级会员折扣类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AdvancedMemberStrategy</span> <span class="token keyword">implements</span> <span class="token class-name">MemberStrategy</span><span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 高级会员折扣     */</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">calcPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"对于高级会员的折扣为20%"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> booksPrice <span class="token operator">*</span> <span class="token number">0.8</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="价格类"><a href="#价格类" class="headerlink" title="价格类"></a>价格类</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Price</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//持有一个具体的策略对象</span>    <span class="token keyword">private</span> MemberStrategy strategy<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 构造函数，传入一个具体的策略对象     * @param strategy    具体的策略对象     */</span>    <span class="token keyword">public</span> <span class="token function">Price</span><span class="token punctuation">(</span>MemberStrategy strategy<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>strategy <span class="token operator">=</span> strategy<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 计算图书的价格     * @param booksPrice    图书的原价     * @return    计算出打折后的价格     */</span>    <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">quote</span><span class="token punctuation">(</span><span class="token keyword">double</span> booksPrice<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>strategy<span class="token punctuation">.</span><span class="token function">calcPrice</span><span class="token punctuation">(</span>booksPrice<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//选择并创建需要使用的策略对象</span>        MemberStrategy strategy1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AdvancedMemberStrategy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建环境</span>        Price price <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Price</span><span class="token punctuation">(</span>strategy1<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//计算价格</span>        <span class="token keyword">double</span> quote <span class="token operator">=</span> price<span class="token punctuation">.</span><span class="token function">quote</span><span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"图书的最终价格为："</span> <span class="token operator">+</span> quote<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="结果"><a href="#结果" class="headerlink" title="结果"></a>结果</h4><pre><code>对于高级会员的折扣为20%图书的最终价格为：240.012</code></pre><h3 id="策略模式和工厂模式的区别"><a href="#策略模式和工厂模式的区别" class="headerlink" title="策略模式和工厂模式的区别"></a>策略模式和工厂模式的区别</h3><table><thead><tr><th>工厂模式</th><th>策略模式</th></tr></thead><tbody><tr><td>创建型的设计模式</td><td>行为型的设计模式</td></tr><tr><td>关注对象创建</td><td>关注行为的选择</td></tr><tr><td>黑盒子（无需知道具体的实现过程）</td><td>白盒子（知道具体的实现过程）</td></tr></tbody></table><h3 id="Android源码中的策略模式实现"><a href="#Android源码中的策略模式实现" class="headerlink" title="Android源码中的策略模式实现"></a>Android源码中的策略模式实现</h3><p>时间插值器（TimeInterpolator）</p><p>LinearInterpolator、AccelerateInterpolator、CycleInterpolator等实现Interpolator，通过getInterpolator（float input）获取当前的时间百分比，以此来计算动画的属性值。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>策略模式主要用来分离算法，在相同的行为抽象下有不同的具体实现策略。这个模式很好地演示了开闭原则，也就是定义抽象，注入不同的实现，从而达到很好的可扩展性。</p><ol><li>优点：<ul><li>结构清晰明了、使用简单直观。 </li><li>耦合度相对而言较低，扩展方便。 </li><li>操作封装也更为彻底，数据更为安全。</li></ul></li><li>缺点：<ul><li>随着策略的增加，子类也会变得繁多。</li></ul></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="http://www.cnblogs.com/java-my-life/archive/2012/05/10/2491891.html" target="_blank" rel="noopener">《JAVA与模式》之策略模式</a> </li><li><a href="http://www.cnblogs.com/me115/p/3790615.html" target="_blank" rel="noopener">策略模式和工厂模式的区别</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 模板方法模式</title>
      <link href="/20170318/template-method-pattern/"/>
      <url>/20170318/template-method-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>模板方法模式是结构最简单的行为型设计模式，也是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。在其结构中只存在父类与子类之间的继承关系。<br>定义：定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。</p></blockquote><a id="more"></a><h3 id="模板方法模式中的方法"><a href="#模板方法模式中的方法" class="headerlink" title="模板方法模式中的方法"></a>模板方法模式中的方法</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Template.png" alt=""></p><h4 id="模板方法"><a href="#模板方法" class="headerlink" title="模板方法"></a>模板方法</h4><p>一个模板方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。这个模板方法定义在抽象类中，并由子类不加以修改地完全继承下来。所以模板方法大多会定义为<strong>final类型</strong>，指明主要的逻辑功能在子类中不能被重写。模板方法是一个具体方法，它给出了一个顶层逻辑框架，而逻辑的组成步骤在抽象类中可以是具体方法，也可以是抽象方法。由于模板方法是具体方法，因此模板方法模式中的抽象层只能是抽象类，而不是接口。</p><h4 id="基本方法"><a href="#基本方法" class="headerlink" title="基本方法"></a>基本方法</h4><p>（1）抽象方法：一个抽象方法由<strong>抽象类声明，由具体子类实现</strong>。在Java语言里抽象方法以abstract关键字标示。<br>（2）钩子方法：一个钩子方法由抽象类<strong>声明并实现</strong>，而子类会加以扩展。子类可以通过扩展钩子方法来影响模板方法的逻辑。</p><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><p>（1）多个子类有公有的方法，并且逻辑基本相同。</p><p>（2）重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能由各个子类实现。</p><p>（3）重构时，模板方法是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子方法约束其行为。</p><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>以电脑开机为例，假设现在有两台电脑，一台Windows系统电脑，一台Mac系统电脑。但是开机流程基本一致：步骤为开启电源、系统检查、加载系统、检查是否需要登录。</p></blockquote><h4 id="抽象的-Computer"><a href="#抽象的-Computer" class="headerlink" title="抽象的 Computer"></a>抽象的 Computer</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * 抽象的 Computer */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">AbstractComputer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//下面是抽象方法，子类可以覆盖,不允许外部直接调用这些方法，所以用protected</span>    <span class="token comment" spellcheck="true">/**     * 开启电源     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 检查硬件     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 载入操作系统     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 登录     */</span>    <span class="token keyword">protected</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//下面是钩子方法，声明并实现</span>    <span class="token comment" spellcheck="true">/**     * 是否需要登录     *      * @return true为需要登录     */</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//下面是模板方法，定义为final，子类不能覆盖此方法 </span>    <span class="token comment" spellcheck="true">/**     * 启动计算机方法，步骤为开启电源、系统检查、加载系统、检查是否登录。     */</span>    <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">void</span> <span class="token function">startUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"--------开机 START--------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"-------- 开机 END --------"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Windows系统电脑（不需登录）："><a href="#Windows系统电脑（不需登录）：" class="headerlink" title="Windows系统电脑（不需登录）："></a>Windows系统电脑（不需登录）：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Windows系统电脑 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WindowsComputer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractComputer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows电脑开启电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows电脑检查硬件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Windows电脑载入操作系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">boolean</span> <span class="token function">isLogin</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//返回false，不需登录</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="Mac系统电脑（需登录）："><a href="#Mac系统电脑（需登录）：" class="headerlink" title="Mac系统电脑（需登录）："></a>Mac系统电脑（需登录）：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Mac系统电脑 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MacComputer</span> <span class="token keyword">extends</span> <span class="token class-name">AbstractComputer</span><span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">powerOn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑开启电源"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">checkHardware</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑检查硬件"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">loadOS</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑载入操作系统"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Mac电脑登录"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="调用："><a href="#调用：" class="headerlink" title="调用："></a>调用：</h4><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AbstractComputer comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WindowsComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comp<span class="token punctuation">.</span><span class="token function">startUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MacComputer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        comp<span class="token punctuation">.</span><span class="token function">startUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><pre><code>--------开机 START--------Windows电脑开启电源Windows电脑检查硬件Windows电脑载入操作系统-------- 开机 END ----------------开机 START--------Mac电脑开启电源Mac电脑检查硬件Mac电脑载入操作系统Mac电脑登录-------- 开机 END --------1234567891011</code></pre><h3 id="Android源码中的模板方法模式"><a href="#Android源码中的模板方法模式" class="headerlink" title="Android源码中的模板方法模式"></a>Android源码中的模板方法模式</h3><h4 id="AsyncTask"><a href="#AsyncTask" class="headerlink" title="AsyncTask"></a>AsyncTask</h4><p>在使用AsyncTask时，我们都知道把耗时操作放到doInBackground(Params… params)中，在doInBackground之前，如果想做一些初始化操作，可以把实现写在onPreExecute中，当doInBackground执行完后会执行onPostExecute方法，而我们只需要构建AsyncTask对象，然后执行execute方法。</p><h4 id="Activity的生命周期"><a href="#Activity的生命周期" class="headerlink" title="Activity的生命周期"></a>Activity的生命周期</h4><p>ActivityThread的main函数被调用后，依次执行Activity的onCreate、onStart、onResume函数，用户通常在Activity的子类中覆写onCreate方法，并且在该方法中调用setContentView来设置布局。</p><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ul><li>（1）工厂方法是模板方法的一种特殊版本。</li><li>（2）策略模式和模板方法模式都是封装算法，一个用组合，一个用继承。</li><li>（3）策略模式和模板模式通常可以互相替换。它们都像试卷，策略模式是选择题，模板模式是填空题。</li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote><p>模板方法模式用4个字概括就是：流程封装。也就是把某个固定的流程封装到一个final方法中，并且让子类能够定制这个流程中的某些或者所有步骤，这就要求父类提取公用的代码，提升代码的复用率，同时带来了更好的可扩展性。</p></blockquote><ol><li><p>优点</p><ul><li>（1）封装不变部分，扩展可变部分。</li><li>（2）提取公共部分代码，便于维护。</li></ul></li><li><p>缺点</p><ul><li>需要为每一个基本方法的不同实现提供一个子类，如果父类中可变的基本方法太多，将会导致类的个数增加，系统更加庞大，设计也更加抽象，此时，可结合桥接模式来进行设计。</li></ul></li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ol><li><a href="http://www.cnblogs.com/lzhp/p/3404514.html" target="_blank" rel="noopener"> 模板方法模式（Head first 设计模式——7）</a></li><li><a href="http://blog.csdn.net/zhengzhb/article/details/7405608" target="_blank" rel="noopener"> 模板方法模式</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 桥接模式</title>
      <link href="/20170318/bridge-pattern/"/>
      <url>/20170318/bridge-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>桥接模式也称为桥梁模式，是结构型设计模式之一。桥接模式中体现了“单一职责原则”、“开闭原则”、“里氏替换原则”、“依赖倒置原则”等，同时它也是很实用的一种模式。<br><strong>定义</strong>：将抽象部分 与 实现部分 分离，使它们都可以独立地进行变化。</p></blockquote><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ul><li>（1）如果一个系统需要在构建的抽象化角色和具体角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系。</li><li>（2）对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，也可以考虑使用桥接模式。</li><li>（3）一个类存在两个独立变化的维度，且这两个维度都需要扩展。</li></ul><h2 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h2><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Bridge.png" alt="Bridge"></p><ul><li>（1）<code>Abstraction</code>：抽象部分，该类保持一个对实现部分对象的引用，抽象部分中的方法需要调用实现部分的对象来实现，该类一般为抽象类。</li><li>（2）<code>RefinedAbstraction</code>：优化抽象部分，抽象部分的具体实现，该类一般是对抽象部分的方法进行完善和扩展。</li><li>（3）<code>Implementor</code>：实现部分。可以为接口或抽象类，其方法不一定要与抽象部分中的一致，一般情况下是由现实部分提供基本操作，而抽象部分定义的则是基于实现部分这些基本操作的业务方法。</li><li>（4）<code>ConcreteImplementorA</code>、<code>ConcreteImplementorB</code>：实现部分的具体实现。完善实现部分中的方法定义的具体逻辑。</li></ul><pre class=" language-Java"><code class="language-Java">/** * Created by Weicools on 2017/3/18. * <p> * desc: 实现部分的抽象接口 */public interface Implementor {    /**     * 实现部分的接口方法     */    void operationImpl();}/** * Created by Weicools on 2017/3/18. * <p> * desc: 实现部分的具体实现 */public class ConcreteImplementorA implements Implementor {    @Override    public void operationImpl() {        // 实现部分的具体实现    }}/** * Created by Weicools on 2017/3/18. * <p> * desc: 抽象部分的抽象类 */public abstract class Abstraction {    //实现部分的引用    private Implementor mImplementor;    /**     * 通过实现部分的对象引用构造抽象部分的对象     * @param implementor 实现部分对象引用     */    public Abstraction(Implementor implementor) {        mImplementor = implementor;    }    /**     * 调用实现部分的具体方法实现     */    public void operation() {        mImplementor.operationImpl();    }}/** * Created by Weicools on 2017/3/18. * <p> * desc: 抽象部分的子类 */public class RefineAbstraction extends Abstraction {    /**     * 通过实现部分的对象引用构造抽象部分的对象     *     * @param implementor 实现部分对象引用     */    public RefineAbstraction(Implementor implementor) {        super(implementor);    }    public void refineOperation() {        //对Abstraction方法进行扩展    }}</code></pre><h2 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h2><blockquote><p>以去咖啡店喝咖啡为例，我们假定咖啡有大杯加糖、大杯不加糖、小杯加糖和小杯不加糖四种<br>这四种实质上就是两种变化：一是大杯小杯，二是加糖不加糖</p></blockquote><h3 id="给咖啡添加东西的抽象类：（Implementor）"><a href="#给咖啡添加东西的抽象类：（Implementor）" class="headerlink" title="给咖啡添加东西的抽象类：（Implementor）"></a>给咖啡添加东西的抽象类：（Implementor）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">CoffeeAdditives</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 需要往咖啡中加什么     * @return 具体添加的东西     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> String <span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="加糖类实现：（ConcreteImplementorA）"><a href="#加糖类实现：（ConcreteImplementorA）" class="headerlink" title="加糖类实现：（ConcreteImplementorA）"></a>加糖类实现：（ConcreteImplementorA）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AddSugar</span> <span class="token keyword">extends</span> <span class="token class-name">CoffeeAdditives</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"加糖"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="原味类实现：（ConcreteImplementorB）"><a href="#原味类实现：（ConcreteImplementorB）" class="headerlink" title="原味类实现：（ConcreteImplementorB）"></a>原味类实现：（ConcreteImplementorB）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Ordinary</span> <span class="token keyword">extends</span> <span class="token class-name">CoffeeAdditives</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> String <span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"原味"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="咖啡类：（Abstraction）"><a href="#咖啡类：（Abstraction）" class="headerlink" title="咖啡类：（Abstraction）"></a>咖啡类：（Abstraction）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> CoffeeAdditives mAdditives<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Coffee</span><span class="token punctuation">(</span>CoffeeAdditives additives<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mAdditives <span class="token operator">=</span> additives<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">/**     * 咖啡杯大小由子类决定     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h3 id="大杯咖啡：（RefinedAbstraction）"><a href="#大杯咖啡：（RefinedAbstraction）" class="headerlink" title="大杯咖啡：（RefinedAbstraction）"></a>大杯咖啡：（RefinedAbstraction）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LargeCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">LargeCoffee</span><span class="token punctuation">(</span>CoffeeAdditives additives<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>additives<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"大杯的"</span> <span class="token operator">+</span> mAdditives<span class="token punctuation">.</span><span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="小杯咖啡：（RefinedAbstraction）"><a href="#小杯咖啡：（RefinedAbstraction）" class="headerlink" title="小杯咖啡：（RefinedAbstraction）"></a>小杯咖啡：（RefinedAbstraction）</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SmallCoffee</span> <span class="token keyword">extends</span> <span class="token class-name">Coffee</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">SmallCoffee</span><span class="token punctuation">(</span>CoffeeAdditives additives<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>additives<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"小杯的"</span> <span class="token operator">+</span> mAdditives<span class="token punctuation">.</span><span class="token function">addSomething</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"咖啡"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h3><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        AddSugar sugar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AddSugar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Ordinary ordinary <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Ordinary</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//大杯加糖</span>        LargeCoffee largeSugarCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LargeCoffee</span><span class="token punctuation">(</span>sugar<span class="token punctuation">)</span><span class="token punctuation">;</span>        largeSugarCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//大杯原味</span>        LargeCoffee largeOrdinaryCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LargeCoffee</span><span class="token punctuation">(</span>ordinary<span class="token punctuation">)</span><span class="token punctuation">;</span>        largeOrdinaryCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小杯加糖</span>        SmallCoffee smallSugarCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmallCoffee</span><span class="token punctuation">(</span>sugar<span class="token punctuation">)</span><span class="token punctuation">;</span>        smallSugarCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//小杯原味</span>        SmallCoffee smallOrdinaryCoffee <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SmallCoffee</span><span class="token punctuation">(</span>ordinary<span class="token punctuation">)</span><span class="token punctuation">;</span>        smallOrdinaryCoffee<span class="token punctuation">.</span><span class="token function">makeCoffee</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h3><pre><code>大杯的加糖咖啡大杯的原味咖啡小杯的加糖咖啡小杯的原味咖啡</code></pre><h3 id="Android源码中的桥接模式"><a href="#Android源码中的桥接模式" class="headerlink" title="Android源码中的桥接模式"></a>Android源码中的桥接模式</h3><ul><li>桥接模式在Android中应用广泛，比如：在View的视图顶层中，CheckBox、CompoundButton、Button、TextView和View之间构成一个继承关系的视图层级，每一层级都仅仅是对一种类型控件的实现，它们定义了该类控件所拥有的基本属性和行为，但是真正将他们绘制到屏幕的部分是由与View相关的功能实现类DisplayList、HardwareLayer、Canvas负责。</li><li>另外还有比较典型的Window与WindowManager<br>  <img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-Window%26WindowManager.png" alt=""></li></ul><p>主要代码如下：</p><pre class=" language-Java"><code class="language-Java">public abstract class Window {   //部分省略   /**     * Set the window manager for use by this Window to, for example,     * display panels.  This is <em>not</em> used for displaying the     * Window itself -- that must be done by the client.     *     * @param wm The window manager for adding new windows.     */    public void setWindowManager(WindowManager wm, IBinder appToken, String appName) {        setWindowManager(wm, appToken, appName, false);    }    /**     * Set the window manager for use by this Window to, for example,     * display panels.  This is <em>not</em> used for displaying the     * Window itself -- that must be done by the client.     *     * @param wm The window manager for adding new windows.     */    public void setWindowManager(WindowManager wm, IBinder appToken, String appName,            boolean hardwareAccelerated) {        mAppToken = appToken;        mAppName = appName;        mHardwareAccelerated = hardwareAccelerated                || SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, false);        if (wm == null) {            wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);        }        //*将Window与WindowManager绑定        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);    }    //部分省略 }</code></pre><blockquote><p>Window：<a href="https://developer.android.com/reference/android/view/Window.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/Window.html</a><br>WindowManager：<a href="https://developer.android.com/reference/android/view/WindowManager.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/WindowManager.html</a></p></blockquote><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>优点<ul><li>（1）分离抽象与现实、灵活的扩展以及对客户来说透明的实现。</li><li>（2）桥接模式可以取代多层继承，大大减少了子类的个数。</li></ul></li><li>缺点<ul><li>不容易设计，对开发者来说要有一定的经验要求。理解很容易，设计却不容易。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 外观模式</title>
      <link href="/20170318/facade-pattern/"/>
      <url>/20170318/facade-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>外观模式(Facade)是结构型设计模式之一，它在开发中的运用频率非常高，尤其是在SDK模块上，是我们封装API的常用手段。我们经常使用的三方SDK基本都使用的外观模式，这样可以对用户屏蔽很多实现细节，降低用户使用成本。</p></blockquote><a id="more"></a><h3 id="1-定义"><a href="#1-定义" class="headerlink" title="1.定义"></a>1.定义</h3><p>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。外观模式提供一个高层次的接口，使得子系统更易于使用。</p><h3 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2.使用场景"></a>2.使用场景</h3><p>（1）为复杂子系统提供一个简单接口，对外隐藏子系统的具体实现、隔离变化。</p><p>（2）当你需要构建一个层次结构的子系统时，使用外观模式定义子系统中每层的入口点。如果子系统之间是相互依赖的，你可以让它们仅通过外观接口进行通信，从而简化了它们之间的依赖关系。</p><h3 id="3-UML类图"><a href="#3-UML类图" class="headerlink" title="3.UML类图"></a>3.UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Facade-Pattern-1.png" alt=""></p><p>（1）<code>Facade</code>：系统对外的统一接口，系统内部系统地工作。</p><p>（2）<code>其他分支</code>：子系统接口。</p><p>可以看出外观模式结构很简单，但是如果没有封装，那么用户就要操作几个子系统的交互逻辑，容易出现错误。</p><h3 id="4-简单实例"><a href="#4-简单实例" class="headerlink" title="4.简单实例"></a>4.简单实例</h3><blockquote><p>手机集合了电话功能、短信功能、拍照和GPS等功能。那么以手机为例，简单的用外观模式实现一下。</p></blockquote><h4 id="Phone接口与PhoneImpl："><a href="#Phone接口与PhoneImpl：" class="headerlink" title="Phone接口与PhoneImpl："></a>Phone接口与PhoneImpl：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 打电话     */</span>    <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 挂断     */</span>    <span class="token keyword">void</span> <span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 电话模块实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PhoneImpl</span> <span class="token keyword">implements</span> <span class="token class-name">Phone</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"挂断电话"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="Camera接口与Camera的实现类："><a href="#Camera接口与Camera的实现类：" class="headerlink" title="Camera接口与Camera的实现类："></a>Camera接口与Camera的实现类：</h4><pre><code>/** * Created by Weicools on 2017/3/17. * &lt;p&gt; * desc: */public interface Camera {    /**     * 打开相机     */    void open();    /**     * 拍照     */    void takePicture();    /**     * 关闭相机     */    void close();}</code></pre><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 相机模块实现 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SonyCamera</span> <span class="token keyword">implements</span> <span class="token class-name">Camera</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"打开相机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"拍个照片"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"关闭相机"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="外观类MobileFacade："><a href="#外观类MobileFacade：" class="headerlink" title="外观类MobileFacade："></a>外观类MobileFacade：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 外观类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MobileFacade</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Phone mPhone <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhoneImpl</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">private</span> Camera mCamera <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SonyCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">videoChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"视频正在连接……"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCamera<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mPhone<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPhone<span class="token punctuation">.</span><span class="token function">hangUp</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mCamera<span class="token punctuation">.</span><span class="token function">open</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mCamera<span class="token punctuation">.</span><span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">closeCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mCamera<span class="token punctuation">.</span><span class="token function">close</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="测试："><a href="#测试：" class="headerlink" title="测试："></a>测试：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2018/3/17. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        MobileFacade mobileFacade <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MobileFacade</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobileFacade<span class="token punctuation">.</span><span class="token function">videoChat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobileFacade<span class="token punctuation">.</span><span class="token function">takePicture</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        mobileFacade<span class="token punctuation">.</span><span class="token function">closeCamera</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果：</p><pre><code>打开相机拍照--&gt; 视频聊天接通中打开相机打电话12345</code></pre><h3 id="5-Android源码中的外观模式"><a href="#5-Android源码中的外观模式" class="headerlink" title="5.Android源码中的外观模式"></a>5.Android源码中的外观模式</h3><p><code>Context</code> 是Android开发中的最重要一个，是程序的运行环境，它封装了很多重要操作，例如: startActivity(), startService(), sendBroadcast(), bindService().</p><p><code>Context</code> 是一个抽象类，它的真正实现是<code>ContextImpl</code> 类，通过查看<code>ContextImpl</code> 源码我们可以看到<code>ContextImpl</code>内部封装了很多不同子系统的操作。例如：Activity的跳转、发送广播、启动服务和设置壁纸等，这些工作不是在<code>ContextImpl</code> 中实现，而是交给了具体的子系统进行处理。通过<code>Context</code> 这个抽象类定义了一组接口，<code>ContextImpl</code>实现。这样用户通常情况下就不需要对每个子系统进行了解。这样对用户屏蔽了具体的实现细节，降低了使用成本。</p><h3 id="6-Summary"><a href="#6-Summary" class="headerlink" title="6.Summary"></a>6.Summary</h3><ol><li><p>优点</p><ul><li>对客户程序隐藏子系统的细节，因而减少了客户对于子系统的耦合，能够拥抱变化。</li><li>外观类对子系统的接口封装，使得系统更易于使用。</li></ul></li><li><p>缺点</p><ul><li>外观类接口膨胀。由于子系统的接口都有外观类统一对外暴露，使得外观类的API接口较多，在一定程度上增加了用户使用成本。</li><li>外观类没有遵循开闭原则，当业务出现变更时，可能需要直接修改外观类。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 装饰着模式</title>
      <link href="/20170318/decorator-pattern/"/>
      <url>/20170318/decorator-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>装饰模式也称为包装模式，是结构型设计模式之一。它使用一种对客户端透明的方式来动态扩展对象的功能，是一种用于替代继承技术的一种方案。<br>定义：动态的给对象添加一些额外的职责，就增加功能来说，它比生成子类更加灵活。</p></blockquote><h3 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h3><ul><li>（1）需要透明且动态地扩展类的功能时。且在不影响其他对象的情况下。</li><li>（2）当不能采用继承对系统进行扩展时可以使用装饰模式。比如final类。</li></ul><h3 id="UML类图"><a href="#UML类图" class="headerlink" title="UML类图"></a>UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-18-decorator.png" alt="decorator"></p><ul><li>（1）<code>Component</code>：抽象组件。可以是一个接口或抽象类，其充当的就是被装饰的原始对象。</li><li>（2）<code>ConcreteComponent</code>：组件具体实现类，该类是Component类的基本实现，也是我们装饰的具体对象。</li><li>（3）<code>Decorator</code>：抽象装饰者，其职责就是装饰我们的组件对象，通过其子类扩展该方法以达到装饰的目的。其内部一定要有一个指向组件对象的引用。在大多数情况下，该类为抽象类，需要根据不同的装饰逻辑实现不同的具体子类。</li><li>（4）<code>ConcreteDecoratorA</code>、<code>ConcreteDecoratorB</code>：装饰着具体实现类。负责向构件添加新的职责。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 抽象组件类，可以是抽象类也可以是接口 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 抽象组件的抽象方法     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 具体组件实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteComponent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 具体逻辑</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 抽象装饰者 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Decorator</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Component mComponent<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">Decorator</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponent <span class="token operator">=</span> component<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mComponent<span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 装饰者具体实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorA</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ConcreteDecoratorA</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 装饰者具体实现类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConcreteDecoratorB</span> <span class="token keyword">extends</span> <span class="token class-name">Decorator</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ConcreteDecoratorB</span><span class="token punctuation">(</span>Component component<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorA</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">operatorB</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: 客户调用 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//被装饰的组件对象</span>        Component component <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteComponent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据组件对象构造装饰者A并调用，相当于给组件对象增加装饰着A的功能</span>        Decorator decoratorA <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratorA<span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//根据组件对象构造装饰者B并调用，相当于给组件对象增加装饰着B的功能</span>        Decorator decoratorB <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ConcreteDecoratorA</span><span class="token punctuation">(</span>component<span class="token punctuation">)</span><span class="token punctuation">;</span>        decoratorB<span class="token punctuation">.</span><span class="token function">operator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="简单实现"><a href="#简单实现" class="headerlink" title="简单实现"></a>简单实现</h3><blockquote><p>以一个男孩穿衣装扮为例。实现给男孩在家与出门的穿衣装扮。</p></blockquote><h4 id="抽象组件类（Component）："><a href="#抽象组件类（Component）：" class="headerlink" title="抽象组件类（Component）："></a>抽象组件类（Component）：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 穿着     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="具体实现类（ConcreteComponent）：表示要装扮的Boy"><a href="#具体实现类（ConcreteComponent）：表示要装扮的Boy" class="headerlink" title="具体实现类（ConcreteComponent）：表示要装扮的Boy"></a>具体实现类（ConcreteComponent）：表示要装扮的Boy</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Boy</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Boy穿了内衣内裤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="抽象装饰类（Decorator）：PersonCloth-表示人所穿着的衣服"><a href="#抽象装饰类（Decorator）：PersonCloth-表示人所穿着的衣服" class="headerlink" title="抽象装饰类（Decorator）：PersonCloth 表示人所穿着的衣服"></a>抽象装饰类（Decorator）：PersonCloth 表示人所穿着的衣服</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">PersonCloth</span> <span class="token keyword">extends</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">protected</span> Person mPerson<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">PersonCloth</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mPerson <span class="token operator">=</span> person<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//调用Person的dressed()方法</span>        mPerson<span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="穿贵的衣服："><a href="#穿贵的衣服：" class="headerlink" title="穿贵的衣服："></a>穿贵的衣服：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ExpensiveCloth</span> <span class="token keyword">extends</span> <span class="token class-name">PersonCloth</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">ExpensiveCloth</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressJean</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿条牛仔裤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressLeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿件皮衣"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressJean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressLeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="穿便宜的衣服："><a href="#穿便宜的衣服：" class="headerlink" title="穿便宜的衣服："></a>穿便宜的衣服：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CheapCloth</span> <span class="token keyword">extends</span> <span class="token class-name">PersonCloth</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token function">CheapCloth</span><span class="token punctuation">(</span>Person person<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressShirt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿件短袖"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">dressShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"穿条短裤"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressShirt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dressShort</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="装扮："><a href="#装扮：" class="headerlink" title="装扮："></a>装扮：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/18. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Person person <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonCloth cheapCloth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CheapCloth</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        cheapCloth<span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"*************"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        PersonCloth expensiveCloth <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ExpensiveCloth</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">;</span>        expensiveCloth<span class="token punctuation">.</span><span class="token function">dressed</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><pre><code>Boy穿了内衣内裤穿件短袖穿条短裤*************Boy穿了内衣内裤穿条牛仔裤穿件皮衣</code></pre><h3 id="Android源码中的实现"><a href="#Android源码中的实现" class="headerlink" title="Android源码中的实现"></a>Android源码中的实现</h3><ul><li><p>Context</p></li><li><p><code>Context</code>类在Android中被称为“上帝对象”，它的本质就是一个抽象类，在装饰模式中相当于抽象组件，而在内部定义了大量的抽象方法，比如我们经常用到的<code>startActivity</code>方法。</p></li><li>而真正实现是在<code>ContextImpl</code>中完成，那么<code>ContextImpl</code> 就是抽象组件的具体实现类。</li><li><code>Activity</code>从类的层次来看本质是图个Context，但是<code>Activity</code>并非直接继承<code>Context</code>，而是继承<code>ContextThemeWrapper</code>, <code>ContextThemeWrapper</code>有是继承<code>ContextWrapper</code>，因为<code>ContextWrapper</code> 继承于<code>Context</code>，所以<code>ContextWrapper</code> 就是装饰者，<code>ContextWrapper</code>中持有<code>Context</code>的引用。</li></ul><blockquote><p>Context：<a href="https://developer.android.com/reference/android/content/Context.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/content/Context.html</a><br>ContextWrapper：<a href="https://developer.android.com/reference/android/content/ContextWrapper.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/content/ContextWrapper.html</a><br>ContextThemeWrapper：<a href="https://developer.android.com/reference/android/view/ContextThemeWrapper.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/view/ContextThemeWrapper.html</a><br>Activity：<a href="https://developer.android.com/reference/android/app/Activity.html" target="_blank" rel="noopener">https://developer.android.com/reference/android/app/Activity.html</a></p></blockquote><h3 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h3><ol><li>与<a href="http://blog.csdn.net/qq_17766199/article/details/50492805" target="_blank" rel="noopener">代理模式</a>的区别<ul><li>（1）装饰模式是以对客户端透明的方式扩展对象的功能，是继承方案的一个替代；而代理模式则是给一个对象提供一个代理对象，并有代理对象来控制对原有对象的引用。</li><li>（2）装饰模式应该为所装饰的对象增强功能；代理模式是对代理对象施加控制，不对对象本身功能进行增强。</li></ul></li><li>与<a href="http://blog.csdn.net/qq_17766199/article/details/50514877" target="_blank" rel="noopener">适配器模式</a>的区别<ul><li>适配器模式是用新接口来调用原接口，原接口对新系统是不可见的；装饰模式增强了其他对象的功能而同时又不改变它的接口。</li></ul></li></ol><h3 id="Summary"><a href="#Summary" class="headerlink" title="Summary"></a>Summary</h3><blockquote><p>在实际开发中我们应该写过如下代码：其实这些新增方法的调用就类似装饰模式中的装饰者的职责，只不过这里我们没有保持对组件类的引用。</p></blockquote><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化数据</span>    <span class="token function">initData</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化控件</span>    <span class="token function">initViews</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//初始化事件</span>    <span class="token function">initEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><ol><li>优点<ul><li>（1）对于扩展一个对象的功能，装饰模式比继承更加灵活性，不会导致类的个数急剧增加。</li><li>（2）可以通过一种动态的方式在运行时选择不同的具体装饰类，从而实现不同的行为。</li><li>（3）可以对一个对象进行多次装饰，通过使用不同的具体装饰类以及这些装饰类的排列组合，可以创造出很多不同行为的组合，得到功能更为强大的对象。</li><li>（4）具体构件类与具体装饰类可以独立变化，用户可以根据需要增加新的具体构件类和具体装饰类，原有类库代码无须改变，符合“开闭原则”。</li></ul></li><li>缺点<ul><li>（1）使用装饰模式进行系统设计时将产生很多小对象，这些对象的区别在于它们之间相互连接的方式有所不同，而不是它们的类或者属性值有所不同，大量小对象的产生势必会占用更多的系统资源，在一定程序上影响程序的性能。</li><li>（2）对于多次装饰的对象，调试时寻找错误可能需要逐级排查，较为繁琐。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 代理模式</title>
      <link href="/20170317/proxy-pattern/"/>
      <url>/20170317/proxy-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>代理模式也称委托模式，是结构型设计模式之一。是应用广泛的模式之一。<br>定义：为其他对象提供一种代理以控制对这个对象的访问。</p></blockquote><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h3><p>当无法或不想直接访问某个对象或访问某个对象存在困难时可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口。</p><h3 id="2-UML类图"><a href="#2-UML类图" class="headerlink" title="2.UML类图"></a>2.UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Proxy-Pattern-1.png" alt="Proxy"><br>各个角色介绍：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 抽象主题类，主要职责是申明真实与代理主题的共同接口方法 * 可以是抽象类也可以是接口 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 真实主题类，也称被代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RealSubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Real subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 代理类，持有真实主题的引用，它实现的接口方法中调用真实主题的方法 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxySubject</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Subject mRealSubject<span class="token punctuation">;</span>    <span class="token function">ProxySubject</span><span class="token punctuation">(</span>Subject subject<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mRealSubject <span class="token operator">=</span> subject<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Proxy subject"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 调用真实主题方法</span>        mRealSubject<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Client</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Subject subject <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxySubject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RealSubject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        subject<span class="token punctuation">.</span><span class="token function">visit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="3-简单示例"><a href="#3-简单示例" class="headerlink" title="3.简单示例"></a>3.简单示例</h3><blockquote><p>书中例子：以小民诉讼的流程举例。那么需要代理律师代理，诉讼简单流程：提交申请–&gt;进行举证–&gt;开始辩护–&gt;诉讼完成。</p></blockquote><h4 id="诉讼接口类："><a href="#诉讼接口类：" class="headerlink" title="诉讼接口类："></a>诉讼接口类：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2018/3/17. * &lt;p> * desc: 诉讼接口类 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ILawsuit</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 提交申请     */</span>    <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 禁行举证     */</span>    <span class="token keyword">void</span> <span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 开始辩护     */</span>    <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 诉讼完成     */</span>    <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><h4 id="具体诉讼人Weicools："><a href="#具体诉讼人Weicools：" class="headerlink" title="具体诉讼人Weicools："></a>具体诉讼人Weicools：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 具体诉讼人 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Weicools</span> <span class="token keyword">implements</span> <span class="token class-name">ILawsuit</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"老板拖欠工资，特此申请仲裁！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"这是合同书和过去一年的银行工资流水。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"证据确凿，不需要做任何辩护！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"诉讼成功，判决老板七天内结算工资！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="代理律师："><a href="#代理律师：" class="headerlink" title="代理律师："></a>代理律师：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 代理律师 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ProxyLayer</span> <span class="token keyword">implements</span> <span class="token class-name">ILawsuit</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> ILawsuit mLawsuit<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">ProxyLayer</span><span class="token punctuation">(</span>ILawsuit lawsuit<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit <span class="token operator">=</span> lawsuit<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        mLawsuit<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="开始仲裁："><a href="#开始仲裁：" class="headerlink" title="开始仲裁："></a>开始仲裁：</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        ILawsuit weico <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Weicools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        ILawsuit layer <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ProxyLayer</span><span class="token punctuation">(</span>weico<span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        layer<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="结果："><a href="#结果：" class="headerlink" title="结果："></a>结果：</h4><pre><code>老板拖欠工资，特此申请仲裁！这是合同书和过去一年的银行工资流水。证据确凿，不需要做任何辩护！诉讼成功，判决老板七天内结算工资！</code></pre><p>同样我们也可以代理其他人，只需要实现ILawsuit即可。上面的代理模式也叫静态代理，也就是在代码运行前代理类的class文件就已经存在。那么相反，当然也会有动态代理，通过反射机制动态生成代理类，也就是在编码阶段不需要知道代理谁。</p><h4 id="动态代理实现"><a href="#动态代理实现" class="headerlink" title="动态代理实现"></a>动态代理实现</h4><p>Java提供了一个便捷的动态代理接口InvocationHandler，我们来实现它：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 动态代理类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicPorxy</span> <span class="token keyword">implements</span> <span class="token class-name">InvocationHandler</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 被代理类的引用</span>    <span class="token keyword">private</span> Object mObject<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">DynamicPorxy</span><span class="token punctuation">(</span>Object o<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mObject <span class="token operator">=</span> o<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> Object <span class="token function">invoke</span><span class="token punctuation">(</span>Object proxy<span class="token punctuation">,</span> Method method<span class="token punctuation">,</span> Object<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> Throwable <span class="token punctuation">{</span>        <span class="token keyword">return</span> method<span class="token punctuation">.</span><span class="token function">invoke</span><span class="token punctuation">(</span>mObject<span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>这里我们通过invoke方法来调用具体的被代理方法，增加DynamicTest类测试：</p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/17. * &lt;p> * desc: 动态代理测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DynamicTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//构造出诉讼人小民</span>        ILawsuit weicools <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Weicools</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//1.静态代理</span>        <span class="token comment" spellcheck="true">//构造一个代理律师，并将小民传递进去</span>        <span class="token comment" spellcheck="true">//ILawsuit lawyer = new Lawyer(xiaomin);</span>        <span class="token comment" spellcheck="true">//2.动态代理</span>        <span class="token comment" spellcheck="true">//构造一个动态代理</span>        DynamicProxy proxy <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DynamicProxy</span><span class="token punctuation">(</span>weicools<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取被代理类小民的ClassLoader</span>        ClassLoader loader <span class="token operator">=</span> weicools<span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getClassLoader</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//动态构造一个代理者律师</span>        ILawsuit lawyer <span class="token operator">=</span> <span class="token punctuation">(</span>ILawsuit<span class="token punctuation">)</span> Proxy<span class="token punctuation">.</span><span class="token function">newProxyInstance</span><span class="token punctuation">(</span>loader<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Class</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">{</span> ILawsuit<span class="token punctuation">.</span><span class="token keyword">class</span> <span class="token punctuation">}</span><span class="token punctuation">,</span> proxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//律师提交申请</span>        lawyer<span class="token punctuation">.</span><span class="token function">submit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//律师进行举证</span>        lawyer<span class="token punctuation">.</span><span class="token function">burden</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//律师代替weicools辩护</span>        lawyer<span class="token punctuation">.</span><span class="token function">defend</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//完成诉讼</span>        lawyer<span class="token punctuation">.</span><span class="token function">finish</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>结果不变，由此可以看出动态代理通过一个代理类来处理N多个被代理类，其实质是对代理者与被代理者解耦。相对而言静态代理则只能为给定接口下的实现类做代理，如果接口不同那么就需要重新定义不同的代理类，较为复杂，但是静态代理更符合面向对象原则。具体使用哪种方式，根据个人喜好。</p><h3 id="5-Android源码中的代理模式实现"><a href="#5-Android源码中的代理模式实现" class="headerlink" title="5.Android源码中的代理模式实现"></a>5.Android源码中的代理模式实现</h3><h3 id="1-ActivityManagerProxy代理类"><a href="#1-ActivityManagerProxy代理类" class="headerlink" title="1.ActivityManagerProxy代理类"></a>1.ActivityManagerProxy代理类</h3><p>ActivityManager是Android中管理和维护Activity的相关信息的类，为了隔离它与ActivityManagerService，有效降低二者的耦合，在这中间使用了ActivityManagerProxy代理类，其抽象主题类是IActivityManager接口，所有对ActivityManagerService的访问都转换成对代理类的访问，这样ActivityManager就与ActivityManagerService解耦了。<br><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Activity-Manaher.png" alt=""></p><h2 id="6-总结"><a href="#6-总结" class="headerlink" title="6.总结"></a>6.总结</h2><ol><li><p>优点</p><ul><li>（1）对代理者与被代理者进行解耦。</li><li>（2）代理对象在客户端和目标对象之间起到一个中介的作用，这样可以起到对目标对象的保护。</li></ul></li><li><p>缺点</p><ul><li>基本没有缺点，真要说缺点就是设计模式的通病：对类的增加。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>《Android 源码设计模式解析与实战》读书笔记 - 观察者模式</title>
      <link href="/20170312/observer-pattern/"/>
      <url>/20170312/observer-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><blockquote><p>观察者模式是一个使用率非常高的模式，它最常用在GUI系统、订阅–发布系统。因为这个模式的一个重要作用就是解耦，将被观察者和观察者解耦，使得它们之间的依赖性更小，甚至做到毫无依赖。比如安卓的开源项目EventBus、Otto、AndroidEventBus等事件总线类的和RxJava响应式编程其核心都是使用观察者模式。</p></blockquote><blockquote><p>观察者模式是定义对象间一对多的依赖关系，使得每当一个对象状态改变时可以通知 依赖于它的所有对象进行更新。</p></blockquote><a id="more"></a><h3 id="1-使用场景"><a href="#1-使用场景" class="headerlink" title="1.使用场景"></a>1.使用场景</h3><ol><li>关联行为场景，需要注意的是，关联行为是可拆分的，而不是“组合”关系。</li><li>事件多级触发场景。</li><li>跨系统的消息交换场景，如消息队列、事件总线的处理机制。</li></ol><h3 id="2-UML类图"><a href="#2-UML类图" class="headerlink" title="2.UML类图"></a>2.UML类图</h3><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-16-Observer.jpg" alt=""><br>UML类图介绍：</p><ol><li>Subject：抽象主题，也就是被观察者角色(Observable)，抽象主题把所有观察者对象的引用保存到一个集合里，每个主题都可以有任意数量的观察者，抽象主题提供接口可以删除和增加观察者对象</li><li>ConcreteSubject：具体主题，将有关状态存入具体的观察者对象，在具体主题的内部发生改变时，给所有注册过的观察者发送通知。</li><li>Observer：抽象观察者，它定义了一个更新接口，使得在得到被观察者的更改通知时更新自身状态。</li><li>ConcreteObserver：具体观察者，实现抽象观察者角色所定义的更新接口，在被观察者的状态发生变化时更新自身状态。</li></ol><h3 id="3-实现示例"><a href="#3-实现示例" class="headerlink" title="3.实现示例"></a>3.实现示例</h3><ul><li><strong>实现用户追番</strong></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/16. * &lt;p> * desc: 抽象观察者类，为所有具体观察者定义一个接口，在得到通知时更新自己 */</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 更新消息     * @param message 消息     */</span>    <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/16. * &lt;p> * desc: 具体的观察者类，也就是订阅者 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Observer</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String mName<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token function">User</span><span class="token punctuation">(</span>String name<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mName <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">update</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>mName <span class="token operator">+</span> <span class="token string">": 订阅的"</span> <span class="token operator">+</span> message <span class="token operator">+</span> <span class="token string">"更新了"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/16. * &lt;p> * desc: 抽象被观察者类 */</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">/**     * 推送消息     * @param message 内容     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">pushMsg</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">/**     * 订阅     * @param observer 订阅者     */</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/16. * &lt;p> * desc: 具体的被观察者类，也就是订阅的节目 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animation</span> <span class="token keyword">extends</span> <span class="token class-name">Subject</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> List<span class="token operator">&lt;</span>Observer<span class="token operator">></span> mObserverList <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token operator">&lt;</span><span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//储存订阅者</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">pushMsg</span><span class="token punctuation">(</span>String message<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>Observer observer <span class="token operator">:</span> mObserverList<span class="token punctuation">)</span> <span class="token punctuation">{</span>            observer<span class="token punctuation">.</span><span class="token function">update</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addObserver</span><span class="token punctuation">(</span>Observer observer<span class="token punctuation">)</span> <span class="token punctuation">{</span>        mObserverList<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>observer<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/** * Created by Weicools on 2017/3/16. * &lt;p> * desc: */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 观察者, 即订阅用户</span>        User user1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"XXX"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"YYY"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        User user3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token string">"ZZZ"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 被观察者, 用户订阅的……</span>        Animation animation <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Animation</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>user1<span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>user2<span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">addObserver</span><span class="token punctuation">(</span>user3<span class="token punctuation">)</span><span class="token punctuation">;</span>        animation<span class="token punctuation">.</span><span class="token function">pushMsg</span><span class="token punctuation">(</span><span class="token string">"境界的彼方"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre><code>// 输出XXX: 订阅的境界的彼方更新了YYY: 订阅的境界的彼方更新了ZZZ: 订阅的境界的彼方更新了</code></pre><p>由上面的代码可以看出实现了一对多的消息推送，推送消息都是依赖Observer和Observable这些抽象类，而User和Teleplay完全没有耦合，保证了订阅系统的灵活性和可扩展性。</p><h3 id="4-Android源码中的观察者模式"><a href="#4-Android源码中的观察者模式" class="headerlink" title="4.Android源码中的观察者模式"></a>4.Android源码中的观察者模式</h3><h4 id="BaseAdapter"><a href="#BaseAdapter" class="headerlink" title="BaseAdapter"></a>BaseAdapter</h4><p>在ListView的适配器中我们都是继承BaseAdapter。下面来简单分析分析。BaseAdapter 部分代码：</p><pre class=" language-Java"><code class="language-Java">public abstract class BaseAdapter implements ListAdapter, SpinnerAdapter {    //数据集观察者    private final DataSetObservable mDataSetObservable = new DataSetObservable();    public boolean hasStableIds() {        return false;    }    public void registerDataSetObserver(DataSetObserver observer) {        mDataSetObservable.registerObserver(observer);    }    public void unregisterDataSetObserver(DataSetObserver observer) {        mDataSetObservable.unregisterObserver(observer);    }    /**     * 当数据集变化时，通知所有观察者     */    public void notifyDataSetChanged() {        mDataSetObservable.notifyChanged();    }}</code></pre><p>看看mDataSetObservable.notifyChanged()方法：</p><pre class=" language-Java"><code class="language-Java">public class DataSetObservable extends Observable<DataSetObserver> {    /**     * Invokes {@link DataSetObserver#onChanged} on each observer.     * Called when the contents of the data set have changed.  The recipient     * will obtain the new contents the next time it queries the data set.     */    public void notifyChanged() {        synchronized(mObservers) {            // since onChanged() is implemented by the app, it could do anything, including            // removing itself from {@link mObservers} - and that could cause problems if            // an iterator is used on the ArrayList {@link mObservers}.            // to avoid such problems, just march thru the list in the reverse order.            for (int i = mObservers.size() - 1; i >= 0; i--) {                mObservers.get(i).onChanged();            }        }    }}</code></pre><p>可以看出在mDataSetObservable.notifyChanged()中遍历所有观察者，并调用他们的onChanged()，从而告知观察者需要做什么。</p><p>那么观察者怎么来的，那就是setAdapter方法，代码如下：</p><pre class=" language-Java"><code class="language-Java">@Overridepublic void setAdapter(ListAdapter adapter) {    if (mAdapter != null && mDataSetObserver != null) {        mAdapter.unregisterDataSetObserver(mDataSetObserver);    }    resetList();    mRecycler.clear();    if (mHeaderViewInfos.size() > 0|| mFooterViewInfos.size() > 0) {        mAdapter = new HeaderViewListAdapter(mHeaderViewInfos, mFooterViewInfos, adapter);    } else {        mAdapter = adapter;    }    mOldSelectedPosition = INVALID_POSITION;    mOldSelectedRowId = INVALID_ROW_ID;    // AbsListView#setAdapter will update choice mode states.    super.setAdapter(adapter);    if (mAdapter != null) {        mAreAllItemsSelectable = mAdapter.areAllItemsEnabled();        mOldItemCount = mItemCount;        mItemCount = mAdapter.getCount();        checkFocus();        mDataSetObserver = new AdapterDataSetObserver();        mAdapter.registerDataSetObserver(mDataSetObserver);//注册观察者        ......省略    }}</code></pre><p>AdapterDataSetObserver定义在ListView的父类AbsListView中，是一个数据集观察者，代码：</p><pre class=" language-Java"><code class="language-Java">class AdapterDataSetObserver extends AdapterView<ListAdapter>.AdapterDataSetObserver {    @Override    public void onChanged() {        super.onChanged();        if (mFastScroller != null) {            mFastScroller.onSectionsChanged();        }    }    @Override    public void onInvalidated() {        super.onInvalidated();        if (mFastScroller != null) {            mFastScroller.onSectionsChanged();        }    }}</code></pre><p>它由继承自AbsListView的父类AdapterView的AdapterDataSetObserver, 代码如下 :</p><pre class=" language-Java"><code class="language-Java">class AdapterDataSetObserver extends DataSetObserver {    private Parcelable mInstanceState = null;    // 上文有说道，调用Adapter的notifyDataSetChanged的时候会调用所有观察者的onChanged方法,核心实现就在这里    @Override    public void onChanged() {        mDataChanged = true;        mOldItemCount = mItemCount;        // 获取Adapter中数据的数量        mItemCount = getAdapter().getCount();        // Detect the case where a cursor that was previously invalidated has        // been repopulated with new data.        if (AdapterView.this.getAdapter().hasStableIds() && mInstanceState != null                && mOldItemCount == 0 && mItemCount > 0) {            AdapterView.this.onRestoreInstanceState(mInstanceState);            mInstanceState = null;        } else {            rememberSyncState();        }        checkFocus();        // 重新布局ListView、GridView等AdapterView组件        requestLayout();    }    // 代码省略    public void clearSavedState() {        mInstanceState = null;    }}</code></pre><p>当ListView的数据发生变化时，调用Adapter的notifyDataSetChanged函数，这个函数又会调用DataSetObservable的notifyChanged函数，这个函数会调用所有观察者 (AdapterDataSetObserver) 的onChanged方法，这就是一个观察者模式！</p><h3 id="5-Summary"><a href="#5-Summary" class="headerlink" title="5.Summary"></a>5.Summary</h3><ol><li>优点<ul><li>观察者和被观察者之间是抽象耦合，将观察者与被观察者完全隔离，只依赖于Observer和Observable抽象，应对业务变化。</li><li>增强系统的灵活性和可扩展性。</li></ul></li><li>缺点<ul><li>在应用观察者模式时需要考虑一下开发效率和运行效率的问题，程序中包括一个被观察者、多个观察者，开发、调试等内容会比较复杂，而且在Java中消息的通知一般是顺序执行，那么一个观察者卡顿，会影响整体的执行效率，在这种情况下，一般会采用异步实现。</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 设计模式 </tag>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式</title>
      <link href="/20170218/design-pattern/"/>
      <url>/20170218/design-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><img src="http://blog-1251678165.coscd.myqcloud.com/2018-03-17-Design-Pattern.png" alt=""></p><blockquote><p>😎😂表示重要程度</p></blockquote><h2 id="创建型模式-Creational-Pattern"><a href="#创建型模式-Creational-Pattern" class="headerlink" title="创建型模式(Creational Pattern)"></a>创建型模式(Creational Pattern)</h2><p>创建型模式对类的实例化过程进行抽象，能够将软件模块中的对象创建和对象使用分离。为了使软件的结构更加清晰，外界对于这些对象只需要知道它们共同的接口，而不清楚其具体的实现细节，使整个系统的设计更加符合单一职责原则。</p><p>创建型模式在创建什么(What)，由谁创建(Who)，何时创建(When)等方面都为软件设计者提供了尽可能大的灵活性。创建型模式隐藏了类的实例的创建细节，通过隐藏对象如何被创建和组合在一起达到使整个系统独立的目的。</p><h3 id="1-单例模式-Singleton-Pattern"><a href="#1-单例模式-Singleton-Pattern" class="headerlink" title="1.单例模式(Singleton Pattern)"></a>1.单例模式(Singleton Pattern)</h3><h3 id="2-简单工程模式-Simple-Factory-Pattern"><a href="#2-简单工程模式-Simple-Factory-Pattern" class="headerlink" title="2.简单工程模式(Simple Factory Pattern)"></a>2.简单工程模式(Simple Factory Pattern)</h3><h3 id="3-工厂方法模式-Factory-Method-Pattern"><a href="#3-工厂方法模式-Factory-Method-Pattern" class="headerlink" title="3.工厂方法模式(Factory Method Pattern)"></a>3.工厂方法模式(Factory Method Pattern)</h3><h3 id="4-抽象工厂模式-Abstract-Factory-Pattern"><a href="#4-抽象工厂模式-Abstract-Factory-Pattern" class="headerlink" title="4.抽象工厂模式(Abstract Factory Pattern)"></a>4.抽象工厂模式(Abstract Factory Pattern)</h3><h3 id="5-建造者模式-Builder-Pattern"><a href="#5-建造者模式-Builder-Pattern" class="headerlink" title="5.建造者模式(Builder Pattern)"></a>5.建造者模式(Builder Pattern)</h3><h3 id="6-原型模式-Prototype-Pattern"><a href="#6-原型模式-Prototype-Pattern" class="headerlink" title="6.原型模式(Prototype Pattern)"></a>6.原型模式(Prototype Pattern)</h3><h2 id="结构型模式-Structural-Pattern"><a href="#结构型模式-Structural-Pattern" class="headerlink" title="结构型模式(Structural Pattern)"></a>结构型模式(Structural Pattern)</h2><ol><li>结构型模式描述如何将类或者对 象结合在一起形成更大的结构，就像搭积木，可以通过 简单积木的组合形成复杂的、功能更为强大的结构。</li><li>结构型模式可以分为类结构型模式和对象结构型模式：<ul><li>类结构型模式关心类的组合，由多个类可以组合成一个更大的系统，在类结构型模式中一般只存在继承关系和实现关系。 </li><li>对象结构型模式关心类与对象的组合，通过关联关系使得在一 个类中定义另一个类的实例对象，然后通过该对象调用其方法。 根据“合成复用原则”，在系统中尽量使用关联关系来替代继 承关系，因此大部分结构型模式都是对象结构型模式。</li></ul></li></ol><h3 id="1-适配器模式-Adapter-Pattern"><a href="#1-适配器模式-Adapter-Pattern" class="headerlink" title="1.适配器模式(Adapter Pattern)"></a>1.适配器模式(Adapter Pattern)</h3><h3 id="2-桥接模式-Bridge-Pattern"><a href="#2-桥接模式-Bridge-Pattern" class="headerlink" title="2.桥接模式(Bridge Pattern)"></a>2.桥接模式(Bridge Pattern)</h3><h3 id="3-装饰模式-Decorator-Pattern"><a href="#3-装饰模式-Decorator-Pattern" class="headerlink" title="3.装饰模式(Decorator Pattern)"></a>3.装饰模式(Decorator Pattern)</h3><h3 id="4-外观模式-Facade-Pattern"><a href="#4-外观模式-Facade-Pattern" class="headerlink" title="4.外观模式(Facade Pattern)"></a>4.外观模式(Facade Pattern)</h3><h3 id="5-享元模式-Flyweight-Pattern"><a href="#5-享元模式-Flyweight-Pattern" class="headerlink" title="5.享元模式(Flyweight Pattern)"></a>5.享元模式(Flyweight Pattern)</h3><h3 id="6-代理模式-Proxy-Pattern"><a href="#6-代理模式-Proxy-Pattern" class="headerlink" title="6.代理模式(Proxy Pattern)"></a>6.代理模式(Proxy Pattern)</h3><h3 id="7-组合模式-Composite-Pattern"><a href="#7-组合模式-Composite-Pattern" class="headerlink" title="7.组合模式(Composite Pattern)"></a>7.组合模式(Composite Pattern)</h3><h2 id="行为型模式-Behavioral-Pattern"><a href="#行为型模式-Behavioral-Pattern" class="headerlink" title="行为型模式(Behavioral Pattern)"></a>行为型模式(Behavioral Pattern)</h2><ol><li>行为型模式是对在不同的对象之间划分责任和算法的抽象化。</li><li>行为型模式不仅仅关注类和对象的结构，而且重点关注它们之间的相互作用。</li><li>通过行为型模式，可以更加清晰地划分类与对象的职责，并研究系统在运行时实例对象 之间的交互。在系统运行时，对象并不是孤立的，它们可以通过相互通信与协作完成某些复杂功能，一个对象在运行时也将影响到其他对象的运行。</li><li>行为型模式分为类行为型模式和对象行为型模式两种：<ul><li>类行为型模式：类的行为型模式使用继承关系在几个类之间分配行为，类行为型模式主要通过多态等方式来分配父类与子类的职责。</li><li>对象行为型模式：对象的行为型模式则使用对象的聚合关联关系来分配行为，对象行为型模式主要是通过对象关联等方式来分配两个或多个类的职责。根据“合成复用原则”，系统中要尽量使用关联关系来取代继承关系，因此大部分行为型设计模式都属于对象行为型设计模式</li></ul></li></ol><h3 id="1-观察者模式-Observer-Pattern"><a href="#1-观察者模式-Observer-Pattern" class="headerlink" title="1.观察者模式(Observer Pattern)"></a>1.观察者模式(Observer Pattern)</h3><h3 id="2-策略模式-Strategy-Pattern"><a href="#2-策略模式-Strategy-Pattern" class="headerlink" title="2.策略模式(Strategy Pattern)"></a>2.策略模式(Strategy Pattern)</h3><h3 id="3-状态模式-State-Pattern"><a href="#3-状态模式-State-Pattern" class="headerlink" title="3.状态模式(State Pattern)"></a>3.状态模式(State Pattern)</h3><h3 id="4-命令模式-Command-Pattern"><a href="#4-命令模式-Command-Pattern" class="headerlink" title="4.命令模式(Command Pattern)"></a>4.命令模式(Command Pattern)</h3><h3 id="5-中介者模式-Mediator-Pattern"><a href="#5-中介者模式-Mediator-Pattern" class="headerlink" title="5.中介者模式(Mediator Pattern)"></a>5.中介者模式(Mediator Pattern)</h3><h3 id="6-迭代器模式-Iterator-Pattern"><a href="#6-迭代器模式-Iterator-Pattern" class="headerlink" title="6.迭代器模式(Iterator Pattern)"></a>6.迭代器模式(Iterator Pattern)</h3><h3 id="7-备忘录模式-Memento-Pattern"><a href="#7-备忘录模式-Memento-Pattern" class="headerlink" title="7.备忘录模式(Memento Pattern)"></a>7.备忘录模式(Memento Pattern)</h3><h3 id="8-模板方法模式-Template-Method-Pattern"><a href="#8-模板方法模式-Template-Method-Pattern" class="headerlink" title="8.模板方法模式(Template Method Pattern)"></a>8.模板方法模式(Template Method Pattern)</h3><h3 id="9-访问者模式-Visitor-Pattern"><a href="#9-访问者模式-Visitor-Pattern" class="headerlink" title="9.访问者模式(Visitor Pattern)"></a>9.访问者模式(Visitor Pattern)</h3><h3 id="10-解释器模式-Interpreter-Pattern"><a href="#10-解释器模式-Interpreter-Pattern" class="headerlink" title="10.解释器模式(Interpreter Pattern)"></a>10.解释器模式(Interpreter Pattern)</h3><h3 id="11-责任链模式-Chain-of-Responsibility"><a href="#11-责任链模式-Chain-of-Responsibility" class="headerlink" title="11.责任链模式(Chain of Responsibility)"></a>11.责任链模式(Chain of Responsibility)</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>RX470在macSierra10.12.2Beta3下的驱动方法</title>
      <link href="/20161117/rx470-macsierra10.12-driver-method/"/>
      <url>/20161117/rx470-macsierra10.12-driver-method/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="剁手开题"><a href="#剁手开题" class="headerlink" title="剁手开题"></a>剁手开题</h2><p>双十一凌晨在狗东买下的讯景RX470 4GB黑狼版1179块大洋，没赶上11.01凌晨的1099-100神价表示很蓝瘦…………香菇 =-=<br><a id="more"></a></p><h2 id="关键硬件信息"><a href="#关键硬件信息" class="headerlink" title="关键硬件信息"></a>关键硬件信息</h2><p>讯景RX470是2016双十一京东购入，BCM943602CS是2016.09.12淘宝购入，建兴T9 256GB是2016.03.24京东购入，显示器Sanc是2015.09.25天猫购入，鼠标是2015.04.09闲鱼购入，其他均为2015双十一期间在京东剁手买的</p><ul><li>CPU：英特尔（Intel）酷睿双核 i3-4370 – 784大洋</li><li>主板：技嘉（GIGABYTE）B85M-D3H – 399大洋</li><li>内存：十铨(Team) 冥神系列 DDR3 4GB*2 – 297大洋(发票项目报账200，实际97)</li><li>硬盘：建兴T9 256GB(MLC) + 西数蓝盘1TB – 444大洋 + 250大洋</li><li>显卡：讯景RX470 4GB + 集显HD4600 – 1179大洋</li><li>电源：台达（DELTA）额定350W NX350 – 159大洋</li><li>机箱：先马（SAMA）坦克(辣鸡，双十一又买了屌丝boU4) – 149大洋(U4:319大洋)</li><li>散热器：超频三（PCCOOLER）东海X4 – 69大洋</li><li>显示器：山寨XXX – 599大洋</li><li>键盘：黑爵（Ajazz）极客AK33 – 149大洋</li><li>鼠标：罗技G302 – 150大洋(二手)</li><li>无线网卡：BCM943602CS – 180大洋</li></ul><h2 id="RX470-480驱动方法"><a href="#RX470-480驱动方法" class="headerlink" title="RX470/480驱动方法"></a>RX470/480驱动方法</h2><h3 id="1-修改驱动"><a href="#1-修改驱动" class="headerlink" title="1.修改驱动"></a>1.修改驱动</h3><p><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver01.png" alt="复制驱动"><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver02.png" alt="打开Info"><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver03.png" alt="修改Info"><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver04.png" alt="安装修改的驱动"></p><h3 id="2-修改Clover配置文件config-plist"><a href="#2-修改Clover配置文件config-plist" class="headerlink" title="2.修改Clover配置文件config.plist"></a>2.修改Clover配置文件config.plist</h3><p><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver05.png" alt="Mount EFI"><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver06.png" alt="添加FakeID"><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver07.png" alt="Inject ATI"></p><h3 id="3-设置BIOS"><a href="#3-设置BIOS" class="headerlink" title="3.设置BIOS"></a>3.设置BIOS</h3><p>设置IGFX为启动显示设备（PCIe插槽1是独显RX470）</p><p><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver08.jpg" alt="SetGraphic"></p><h3 id="4-启动macSierra"><a href="#4-启动macSierra" class="headerlink" title="4.启动macSierra"></a>4.启动macSierra</h3><ul><li>我的DVI-DVI线，插在独显上（虽然设置的是IGFX，但是不要插在集显上，否则进入系统虽然能看到独显已经驱动，但是使用的仍然是集显HD4600）</li></ul><p><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver09.jpg" alt="Graphic"></p><ul><li>由于我的是Windows10 + macSierra 10.12.2Beta3双系统，没有设置倒计时默认进入macSierra，所以开机会进入Clover需要选择手动系统，然而此时显示器无信号但是电脑是在工作的，所有我就按之前的启动界面（如下）</li></ul><p><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Driver10.jpg" alt="CloverUI"></p><ul><li><p>虽然看不到Clover我也可以按“向右”方向键“+回车键启动macSierra系统</p></li><li><p>稍等一会显示器就会有信号了，可以看到macSierra正在启动的进度条（固态硬盘开机还是很快的）</p></li></ul><h3 id="5-Geekbench4测试"><a href="#5-Geekbench4测试" class="headerlink" title="5.Geekbench4测试"></a>5.Geekbench4测试</h3><ul><li>CPU测试：<br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-i3%204370.png" alt="i3 4370"></li><li>GPU测试：<br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470%20Geekbench.png" alt="RX470gb4"><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-RX470Ranking.png" alt="RX470rank"></li></ul><h3 id="6-系统展示"><a href="#6-系统展示" class="headerlink" title="6.系统展示"></a>6.系统展示</h3><p>巴拉巴拉巴拉…………图片太多了</p><p><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show00.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show01.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show02.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show03.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show04.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show10.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show11.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show12.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show13.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show14.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show15.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show16.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show17.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show18.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show19.png" alt=""><br><img src="http://ogpsdets6.bkt.clouddn.com/2016-11-17-Show20.png" alt=""></p>]]></content>
      
      
      
        <tags>
            
            <tag> macSierra </tag>
            
            <tag> 10.12.2 </tag>
            
            <tag> Hackintosh </tag>
            
            <tag> Clover </tag>
            
            <tag> RX470 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Base</title>
      <link href="/20161023/android-base/"/>
      <url>/20161023/android-base/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><ol><li>Android四大组件<ul><li>Activity：Android程序与用户交互的窗口，Android构造块中最基本的一种，它需要为保持各界面状态做许多持久化的事情</li><li>Service：后台服务于Activity，封装有完整的功能逻辑实现，接受上层指令，完成相关事物，定义好需要接受的Intent，提供同步和异步的接口</li><li>Content Provider：Android提供的第三方应用数据的访问方案，可以派生Content Provider类，对外提供数据</li><li>Broadcast Receiver：接受一种或者多种Intent作触发事件，接受相关消息，做一些简单处理，转换成一条Notification<a id="more"></a></li></ul></li><li>Android五种布局<ul><li>FrameLayout：所有控件一次放在右上角，可重叠</li><li>LinearLayout：可设置垂直布局（android:orientation=”vertical”）和水平布局（android:orientation=”horizontal” ）</li><li>AbsoluteLayout：使用X,Y坐标制定元素位置（旋转屏幕时容易出现问题，多个元素计算麻烦）</li><li>RelativeLayout：以某个元素作为参照物，来定位控件位置</li><li>TableLayout：包含TableRow，TableRow里面可以定义具体元素</li></ul></li><li><p>Activity生命周期<br>生命周期方法：onCreate(),onStart(),onResume(),onRestart(),onPause(),onStop(),onDestroy()</p><ul><li>启动Activity：onCreate()-&gt;onStart()-&gt;onResume()</li><li>Activity进入后台（当前Activity转到新的Activity界面或者按Home键返回主屏）：onPause()-&gt;onStop()</li><li>Activity返回前台：onRestart()-&gt;onStart()-&gt;onResume()</li><li>Activity进入后台且系统内存不足，系统会杀死后台的Activity（此时这个Activity引用仍然处在任务栈中，只是这个时候引用指向的对象已经为null）若再次回到这个Activity,则会走onCreate()–&gt;onStart()—&gt;onResume()(将重新走一次Activity的初始化生命周期)</li><li>锁屏：onPause()-&gt;onStop()</li><li>解锁：onStart()-&gt;onResume()<br><img src="http://ob9ev3u0o.bkt.clouddn.com/2016-10-23-Activity%20life.png" alt="activity"></li></ul></li><li><p>Activity启动模式<br>使用android:launchMode=”standard|singleInstance|singleTask|singleTop”来控制Activity任务栈</p><ul><li>任务栈属于后进先出的结构，位于栈顶的Activity处于焦点状态，当按下back按钮时，栈内的Activity会分别出栈并且调用onDestroy()方法，如果栈内没有Activity那么系统就会回收这个栈，每个APP默认只有一个栈</li><li>standard：标准模式，每次启动Activity都会创建一个新的Activity实例，并且压入任务栈栈顶，而不管这个Activity是否已经存在Activity的启动过程onCreate()-&gt;onStart()-&gt;onResume()都会执行</li><li>singleTop：栈顶复用模式，如果新的Activity已经位于栈顶位置那么就不在创建这个Activity，同时Activity的onNewIntent()方法会被回调。例如A-B-C-D和A-B-D-C在创建D时分别变成A-B-C-D和A-B-D-C-D</li><li>singleTask：栈内复用模式，创建Activity时，系统会先确认它所需的任务栈是否已经创建，否则先创建任务栈然后放入Activity，如果栈内已经有这个Activity实例，那么这个Activity会被调到栈顶，onNewIntent()方法会被回调，并且singleTask会清理在当前Activity上面的所有Activity.(clear top)</li><li>singleInstance：加强版singleTask模式，Activity只能单独存在一个任务栈内，由于栈内复用特性，后续请求都不会创建新的Activity除非这个任务栈被销毁</li></ul></li><li><p>Activity缓存方法<br>问题描述：有a和b两个Activity，当从a进入b一段时间后，可能系统把a回收，这时按back执行的不是a的onRestart()而是onCreate()，a会被重新创建一次，原来a中的临时数据就可能丢失了</p><ul><li>这时可以使用Activity中的onSaveInstanceState()回调方法保持临时数据和状态，这个方法一定会在活动被回收前调用，方法中有一个Bundle参数，putString()，putInt()需要传入两个参数，一个键和一个值。数据保存后会在onCreate()中恢复</li><li><p>onSaveInstanceState的调用遵循一个重要原则，即当系统“未经你许可”时销毁了你的activity，则onSaveInstanceState会被系统调用，这是系统的责任，因为它必须要提供一个机会让你保存你的数据</p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onCreate</span><span class="token punctuation">(</span>Bundle savedInstanceState<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onCreate</span><span class="token punctuation">(</span>savedInstanceState<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setContentView</span><span class="token punctuation">(</span>R<span class="token punctuation">.</span>layout<span class="token punctuation">.</span>activity_main<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这里，当Acivity第一次被创建的时候为空</span> <span class="token comment" spellcheck="true">//所以我们需要判断一下</span> <span class="token keyword">if</span><span class="token punctuation">(</span> savedInstanceState <span class="token operator">!=</span> null <span class="token punctuation">)</span><span class="token punctuation">{</span>     savedInstanceState<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"anAnt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token annotation punctuation">@Override</span><span class="token keyword">protected</span> <span class="token keyword">void</span> <span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>Bundle outState<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">onSaveInstanceState</span><span class="token punctuation">(</span>outState<span class="token punctuation">)</span><span class="token punctuation">;</span> outState<span class="token punctuation">.</span><span class="token function">putString</span><span class="token punctuation">(</span><span class="token string">"anAnt"</span><span class="token punctuation">,</span><span class="token string">"Android"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>Fragment生命周期和Activity生命周期关系<br><img src="http://ob9ev3u0o.bkt.clouddn.com/2016-10-23-FragmentFlowchartDiagram.jpg" alt="FragmentActivity"></p></li><li><p>为什么在Service创建子线程而不是在Activity</p><ul><li>Activity很难对Thread进行控制，当Activity被销毁后，就没有办法可以在获取之前创建的子线程实例，而且在一个Activity中创建的子线程，另一个Activity无法对其进行任何操作</li><li>但是Service不同，所以得Activity都可以与Service关联，可以很方便的操作其中的方法，即使Activity被销毁之后只要重新与Service建立关联就又可以获取到原有Service中的Bundle实例</li></ul></li><li>Intent使用方法<ul><li>通过Intent/Bundle的API文档，可知Intent/Bundle支持传递基本数据类型的数据和基本类型的数组数据以及String/CharSequence类型数据和String/CharSequence类型的数组数据；另外还可以传递Parcelabe(包裹化，邮包)和Serializable序列化类型数据以及他们的数组/列表数据</li></ul></li><li><p>Fragment生命周期<br><img src="http://ob9ev3u0o.bkt.clouddn.com/2016-10-23-FragmentLife.png" alt="Fragmentlife"></p></li><li><p>Service两种启动方法</p><ul><li>1）在Context中通过public boolean bindService(Intent service, ServiceConnection conn, int flags)方法来进行Service与Context的关联启动，并且Service的生命周期依附于Context</li><li>2）通过public ComponentName startService(Intent service)方法去启动一个Service，此时Service生命周期与Context无关</li><li><blockquote><p>要注意，无论何时都需要在xml里注册Service</p></blockquote></li></ul><pre><code>&lt;service        android:name=&quot;.packnameName.youServiceName&quot;        android:enabled=&quot;true&quot; /&gt;</code></pre></li><li><p>广播注册方式&amp;区别</p><ul><li>在android中，我们如果想接收到广播信息，必须自定义我们的广播接收者。要写一个类来继承BroadcastReceiver，并且重写其onReceive()方法，实现接收到特定广播所要做的事情</li></ul><pre><code>public class MyBroadCastReceiver extends BroadcastReceiver   {     @Override     public void onReceive(Context context, Intent intent)      {          //在这里可以写相应的逻辑来实现一些功能       //可以从Intent中获取数据、还可以调用BroadcastReceiver的getResultData()获取数据   }   }</code></pre><ul><li>1）静态注册：在AndroidManifest.xml文件的<application>节点中进行注册，当APP退出后Receiver仍然可以接受广播并进行相应处理</application></li></ul><pre><code> &lt;receiver android:name=&quot;.MyBroadCastReceiver&quot;&gt;      &lt;!-- android:priority属性是设置此接收者的优先级（从-1000到1000） --&gt;    &lt;intent-filter android:priority=&quot;20&quot;&gt;        &lt;actionandroid:name=&quot;android.provider.Telephony.SMS_RECEIVED&quot;/&gt;      &lt;/intent-filter&gt;  &lt;/receiver&gt;</code></pre><ul><li>2）动态注册：在代码中动态注册，APP退出就无法接收广播</li></ul><pre><code>// new出上边定义好的BroadcastReceiverMyBroadCastReceiver yBroadCastReceiver = new MyBroadCastReceiver();// 实例化过滤器并设置要过滤的广播IntentFilter intentFilter = new IntentFilter(&quot;android.provider.Telephony.SMS_RECEIVED&quot;);// 注册广播   myContext.registerReceiver(smsBroadCastReceiver,intentFilter,              &quot;android.permission.RECEIVE_SMS&quot;, null);</code></pre><ul><li>3）发送广播两种方式：通过mContext.sendBroadcast(Intent)或mContext.sendBroadcast(Intent, String)发送的是无序广播(后者加了权限)；通过mContext.sendOrderedBroadcast(Intent, String, BroadCastReceiver, Handler, int, String, Bundle)发送的是有序广播</li></ul></li><li><p>Android数据存储方式</p><ul><li>1）SQLite：轻量级数据库，支持基本SQL语法，是常用的数据存储方式，Android提供了SQLiteDatabase的类封装了一些操作数据库的API</li><li>2）SharedPreference：存储比较简单的参数设置</li><li>3）File：文件（I/O）存储方式，常用于存储大量数据，缺点是更新数据很麻烦</li><li>4）ContentProvider：Android系统能实现所有应用程序共享数据的方式，由于数据通常在各个应用中是相互私密的，所有这种方式使用较少，一般用在音频，视频，图片和通讯录；每个Content Provider都会对外提供一个公共的URI（包装成Uri对象），如果应用程序有数据需要共享时，就需要使用Content Provider为这些数据定义一个URI，然后其他的应用程序就通过Content Provider传入这个URI来对数据进行操作</li></ul></li><li><p>Android动画分类</p><ul><li>tween补间动画，通过指定View的初始状态和变化时间、方式，对View的内容完成一系列的图形变换来实现动画效果，这种实现方式可以使视图组件移动、放大、缩小以及产生透明度的变化</li><li>frame帧动画，AnimationDrawable控制animation-list.xml布局，通过顺序的播放排列好的图片来实现</li></ul></li><li><p>Android解析XML的类</p><ul><li>1）SAX：读取是单向的，优点是不占内存空间、解析属性方便；缺点是对于嵌套多个分支处理不方便</li><li>2）DOM：把整个XML放到内存中</li><li>3）PUU：常用在J2ME对于节点处理比较好，类似SAX同样很节省内存，在J2ME中常使用KXML库来解析</li></ul></li><li>Android如何加速启动Activity<ul><li>启动应用：Application的构造方法，onCreate方法中不要进行耗时的操作，数据预读取/初始化数据放在异步中进行操作</li><li>普通Activity启动应用：A启动B时不要在A的onPause方法中进行耗时操作，因为B的onResume方法必须等待A的onPause方法执行完成才可以运行</li></ul></li><li>Android内存优化方法<ul><li>ListView优化</li><li>及时关闭资源</li><li>图片缓存</li></ul></li><li>ListView优化方案<ul><li>1）如果自定义适配器，那么在getView中需要考虑方法传进来的参数contentView是否为null，若为null则创建contentView并返回，否则直接使用（尽可能减少创建view）</li><li>2）给contentView设置tag（setTag()）传入一个viewHolder对象用于缓存需要显示的数据，可以达到图像数据异步加载的效果</li><li>3）如果ListView需要显示很多item时则需要考虑分页加载</li></ul></li><li>Activity在屏幕旋转时的生命周期<ul><li>不设置Activity的android:configChanges时，切屏会重新调用各个生命周期，切横屏执行一次，切竖屏执行2次</li><li>设置Activity的android:configChanges = “orientation”时，切屏还是会重新调用各个生命，横屏竖屏各一次</li><li>设置Activity的android:configChanges=”orientation|keyboardHidden”时，切屏不会调用各个生命周期，只会调用onConfigurationChanged()方法</li></ul></li><li>如何启用&amp;停用Service<ul><li>1）继承Service类<code>public class SMSService extends Service{}</code></li><li>2）在AndroidManifest.xml文件中的<application>节点中对服务进行配置<service android:name=".SMSService"></service></application></li><li>3）若采用Context.startService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onStart()方法。如果调用startService()方法前服务已经被创建，多次调用startService()方法并不会导致多次创建服务，但会导致多次调用onStart()方法。采用startService()方法启动的服务，只能调用Context.stopService()方法结束服务，服务结束时会调用onDestroy()方法</li><li>4）采用Context.bindService()方法启动服务，在服务未被创建时，系统会先调用服务的onCreate()方法，接着调用onBind()方法。这个时候调用者和服务绑定在一起，调用者退出了，系统就会先调用服务的onUnbind()方法，接着调用onDestroy()方法。如果调用bindService()方法前服务已经被绑定，多次调用bindService()方法并不会导致多次创建服务及绑定(也就是说onCreate()和onBind()方法并不会被多次调用)。如果调用者希望与正在绑定的服务解除绑定，可以调用unbindService()方法，调用该方法也会导致系统调用服务的onUnbind()–&gt;onDestroy()方法</li><li>服务常用生命周期回调方法如下： <ul><li>onCreate() 该方法在服务被创建时调用，该方法只会被调用一次，无论调用多少次startService()或bindService()方法，服务也只被创建一次。</li><li>onDestroy()该方法在服务被终止时调用。</li><li>与采用Context.startService()方法启动服务有关的生命周期方法</li><li>onStart() 只有采用Context.startService()方法启动服务时才会回调该方法。该方法在服务开始运行时被调用。多次调用startService()方法尽管不会多次创建服务，但onStart() 方法会被多次调用。</li><li>与采用Context.bindService()方法启动服务有关的生命周期方法</li><li>onBind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务绑定时被调用，当调用者与服务已经绑定，多次调用Context.bindService()方法并不会导致该方法被多次调用。</li><li>onUnbind()只有采用Context.bindService()方法启动服务时才会回调该方法。该方法在调用者与服务解除绑定时被调用</li></ul></li></ul></li><li>单线程模型中Message、Handler、Message Queue、Looper之间的关系<ul><li>Handler获取当前线程中的looper对象，looper用来存放Message，MessageQueue可取出Message，由Handler对Message进行分发和处理</li><li>Message Queue消息队列：用来存放通过Handler发布的消息，通常附属于某个创建它的线程，可以通过looper.myQueue()得到当前线程的消息队列</li><li>Handler：可以发布或者处理一个消息或者操作一个Runnable，通过Handler发布消息，消息将只会发送到与它相关联的消息队列，也只能处理该消息队列的消息</li><li>Looper：是Handler和消息队列之间通信的桥梁，程序组件首先通过Handler将消息传递给Looper，Looper把消息放入队列；Looper也可以把消息广播给所有的Handler,Handler接受到消息后调用handleMessage进行处理</li><li>Message：消息的类型，在Handler类中的handleMessage方法得到单个消息进行处理</li></ul></li><li>在单线程模型下，为了线程通信问题，Android设计了一个Message Queue(消息队列)， 线程间可以通过该Message Queue并结合Handler和Looper组件进行信息交换。下面将对它们进行分别介绍：<ul><li>1）Message消息：理解为线程之间交流的信息，处理数据后台线程需要更新UI，则发送Message内含一些数据给UI线程</li><li>2）Handler处理者：是Message的主要处理者，负责Message的发送。Message内容的执行处理，后台线程就是通过传进来的Handler对象引用来sendMessage(Message)；使用Handler需要实现该类的handleMessage(Message)方法，它是处理这些Message的操作</li><li>3）Message Queue消息队列，用来存放Handler发布的消息，按照先进先出执行；每个Message Queue都会有一个对应的Handler，Handler会通过两种方式向message queue发生消息：sendMessage/post这两种消息都会插在message queue队尾并按先进先出执行。但通过这两种方法发送的消息执行的方式略有不同：通过sendMessage发送的是一个message对象,会被 Handler的handleMessage()函数处理；而通过post方法发送的是一个runnable对象，则会自己执行</li><li>4）Looper: Looper是每条线程里的Message Queue的管家。Android没有Global的Message Queue，而Android会自动替主线程(UI线程)建立Message Queue，但在子线程里并没有建立Message Queue。所以调用Looper.getMainLooper()得到的主线程的Looper不为NULL，但调用Looper.myLooper() 得到当前线程的Looper就有可能为NULL</li></ul></li><li><p>Activity、Intent、IntentFilter、Service、Broadcast、BroadcastReceiver</p><ul><li>一个activity呈现了一个用户可以操作的可视化界面</li><li>一个service不包含可视化界面而是后台运行，可与一个activity绑定，通过绑定暴露出来的接口并与其通信</li><li>一个broadcastreceiver是一个接收广播消息并作出回应的component，没有界面</li><li>一个intent是一个intent对象，保存了消息的内容，对activity和service来说，它指定了请求的操作名称和待操作数据URIIntent对象可以显式的指定一个目标component。如果这样的话，android会找到这个component(基于manifest文件中的声明)并激活它。但如果一个目标不是显式指定的，android必须找到响应intent的最佳component。它是通过将Intent对象和目标的intent filter相比较来完成这一工作的；</li><li>一个component的intent filter告诉android该component能处理的intent。intent filter也是在manifest文件中声明的。</li></ul></li><li><p>MVC模式原理</p><ul><li>模型model对象：是应用程序主体部分，负责所有业务逻辑都写在这里</li><li>视图view对象：是应用程序中负责界面的部分，也是MVC中唯一可见的一层，接受用户输入，显示处理结果</li><li>控制器control对象：根据用户输入，控制用户界面数据显示及更新model对象</li></ul></li><li><p>Android系统架构</p><ul><li>Linux内核、运行库、应用框架层、应用层</li></ul></li><li><p>ContentProvider是如何实现数据共享</p></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之简单工程模式</title>
      <link href="/20161018/simple-factory-pattern/"/>
      <url>/20161018/simple-factory-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-问题"><a href="#1-问题" class="headerlink" title="1.问题"></a>1.问题</h3><p>考虑一个简单的软件应用场景，一个软件系统可以提供多个外观不同的按钮（如圆形按钮、矩形按钮、菱形按钮等）， 这些按钮都源自同一个基类，不过在继承基类后不同的子类修改了部分属性从而使得它们可以呈现不同的外观，如果我们希望在使用这些按钮时，不需要知道这些具体按钮类的名字，只需要知道表示该按钮类的一个参数，并提供一个调用方便的方法，把该参数传入方法即可返回一个相应的按钮对象，此时，就可以使用简单工厂模式</p><h3 id="2-模式定义"><a href="#2-模式定义" class="headerlink" title="2.模式定义"></a>2.模式定义</h3><p>简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类</p><h3 id="3-模式结构-amp-UML类图"><a href="#3-模式结构-amp-UML类图" class="headerlink" title="3.模式结构&amp;UML类图"></a>3.模式结构&amp;UML类图</h3><ol><li><p>简单工厂模式包含如下角色：</p><ul><li>Factory：工厂角色 - 工厂角色负责实现创建所有实例的内部逻辑</li><li>Product：抽象产品角色 - 抽象产品角色是所创建的所有对象的父类，负责描述所有实例所共有的公共接口</li><li>ConcreteProduct：具体产品角色 - 具体产品角色是创建目标，所有创建的对象都充当这个角色的某个具体类的实例</li></ul></li><li><p>UML类图<br><img src="http://ob9ev3u0o.bkt.clouddn.com/2016-10-18-SimpleFactory.jpg" alt="SimpleFactory"></p></li></ol><h3 id="4-时序图"><a href="#4-时序图" class="headerlink" title="4.时序图"></a>4.时序图</h3><p><img src="http://ob9ev3u0o.bkt.clouddn.com/2016-10-18-seq_SimpleFactory.jpg" alt="seq_SimpleFactory"></p><h3 id="5-实现方式"><a href="#5-实现方式" class="headerlink" title="5.实现方式"></a>5.实现方式</h3><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> SimpleFactoryPattern<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. */</span><span class="token comment" spellcheck="true">// Animal.java  抽象产品角色</span><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> SimpleFactoryPattern<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. */</span><span class="token comment" spellcheck="true">// Dog.java 具体产品角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Dog eat!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> SimpleFactoryPattern<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. */</span><span class="token comment" spellcheck="true">// Pig.java 具体产品角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Pig</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Pig eat!!!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> SimpleFactoryPattern<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. */</span><span class="token comment" spellcheck="true">// AnimalFactory.java  工厂角色</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalFactory</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token function">AnimalFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> Animal <span class="token function">animalFactory</span><span class="token punctuation">(</span>String str<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>str<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Pig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> null<span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">package</span> SimpleFactoryPattern<span class="token punctuation">;</span><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AnimalTest</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Animal dog <span class="token operator">=</span> AnimalFactory<span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        dog<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal pig <span class="token operator">=</span> AnimalFactory<span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        pig<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Animal animal <span class="token operator">=</span> AnimalFactory<span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"dog"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal <span class="token operator">=</span> AnimalFactory<span class="token punctuation">.</span><span class="token function">animalFactory</span><span class="token punctuation">(</span><span class="token string">"pig"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        animal<span class="token punctuation">.</span><span class="token function">eat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-模式分析"><a href="#6-模式分析" class="headerlink" title="6.模式分析"></a>6.模式分析</h3><ol><li>将对象的创建和对象本身业务处理分离可以降低系统的耦合度，使得两者修改起来都相对容易。</li><li>在调用工厂类的工厂方法时，由于工厂方法是静态方法，使用起来很方便，可通过类名直接调用，而且只需要传入一个简单的参数即可，在实际开发中，还可以在调用时将所传入的参数保存在XML等格式的配置文件中，修改参数时无须修改任何源代码。</li><li>简单工厂模式最大的问题在于工厂类的职责相对过重，增加新的产品需要修改工厂类的判断逻辑，这一点与开闭原则是相违背的。</li><li>简单工厂模式的要点在于：当你需要什么，只需要传入一个正确的参数，就可以获取你所需要的对象，而无须知道其创建细节</li></ol><h3 id="7-优点-amp-缺点"><a href="#7-优点-amp-缺点" class="headerlink" title="7.优点&amp;缺点"></a>7.优点&amp;缺点</h3><ol><li>优点(帮助封装/解耦)<ul><li>工厂类含有必要的判断逻辑，可以决定在什么时候创建哪一个产品类的实例，客户端可以免除直接创建产品对象的责任，而仅仅“消费”产品；简单工厂模式通过这种做法实现了对责任的分割，它提供了专门的工厂类用于创建对象</li><li>客户端无须知道所创建的具体产品类的类名，只需要知道具体产品类所对应的参数即可，对于一些复杂的类名，通过简单工厂模式可以减少使用者的记忆量</li><li>通过引入配置文件，可以在不修改任何客户端代码的情况下更换和增加新的具体产品类，在一定程度上提高了系统的灵活性</li></ul></li><li>缺点(可能增加客户端的复杂度/不方便扩展子工厂)<ul><li>由于工厂类集中了所有产品创建逻辑，一旦不能正常工作，整个系统都要受到影响</li><li>使用简单工厂模式将会增加系统中类的个数，在一定程序上增加了系统的复杂度和理解难度</li><li>系统扩展困难，一旦添加新产品就不得不修改工厂逻辑，在产品类型较多时，有可能造成工厂逻辑过于复杂，不利于系统的扩展和维护</li><li>简单工厂模式由于使用了静态工厂方法，造成工厂角色无法形成基于继承的等级结构</li></ul></li></ol><h3 id="8-使用环境"><a href="#8-使用环境" class="headerlink" title="8.使用环境"></a>8.使用环境</h3><ol><li>工厂类负责创建的对象比较少：由于创建的对象较少，不会造成工厂方法中的业务逻辑太过复杂</li><li>客户端只知道传入工厂类的参数，对于如何创建对象不关心：客户端既不需要关心创建细节，甚至连类名都不需要记住，只需要知道类型所对应的参数</li></ol><h3 id="9-模式应用"><a href="#9-模式应用" class="headerlink" title="9.模式应用"></a>9.模式应用</h3><ol><li><p>JDK类库中广泛使用了简单工厂模式，如工具类java.text.DateFormat，它用于格式化一个本地日期或者时间。</p><pre class=" language-java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> DateFormat <span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> DateFormat <span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> style<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">public</span> <span class="token keyword">final</span> <span class="token keyword">static</span> DateFormat <span class="token function">getDateInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> style<span class="token punctuation">,</span>Locale locale<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li><p>Java加密技术</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// 获取不同加密算法的密钥生成器:</span> KeyGenerator keyGen<span class="token operator">=</span>KeyGenerator<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 创建密码器:</span> Cipher cp<span class="token operator">=</span>Cipher<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token string">"DESede"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之单例模式</title>
      <link href="/20161018/singleton-pattern/"/>
      <url>/20161018/singleton-pattern/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-问题："><a href="#1-问题：" class="headerlink" title="1.问题："></a>1.问题：</h3><p>对于系统中的某些类来说，只有一个实例很重要，例如，一个系统中可以存在多个打印任务，但是只能有一个正在工作的任务；一个系统只能有一个窗口管理器或文件系统；一个系统只能有一个计时工具或ID（序号）生成器。如何保证一个类只有一个实例并且这个实例易于被访问呢？</p><h3 id="2-模式定义"><a href="#2-模式定义" class="headerlink" title="2.模式定义"></a>2.模式定义</h3><p>单例模式（Singleton Pattern）：确保一个类只有一个实例，而且自行实例化并向系统提供这个实例，提供全局访问方法。</p><p>实现思路：</p><ul><li>在单例的类中设置一个private静态变量sInstance，sInstance类型为当前类，用来持有单例唯一的实例。</li><li>将（无参数）构造器设置为private，避免外部使用new构造多个实例。</li><li>提供一个public的静态方法，如getInstance，用来返回该类的唯一实例sInstance。</li></ul><h3 id="3-模式结构"><a href="#3-模式结构" class="headerlink" title="3.模式结构"></a>3.模式结构</h3><p>UML类图：<br><img src="http://ob9ev3u0o.bkt.clouddn.com/2016-10-18-Singleton.jpg" alt="Singleton"></p><h3 id="4-时序图"><a href="#4-时序图" class="headerlink" title="4.时序图"></a>4.时序图</h3><p><img src="http://ob9ev3u0o.bkt.clouddn.com/2016-10-18-seq_Singleton.jpg" alt="seq_Singleton"></p><h3 id="5-七种实现方式"><a href="#5-七种实现方式" class="headerlink" title="5.七种实现方式"></a>5.七种实现方式</h3><h4 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式,线程不安全"></a>懒汉式,线程不安全</h4><ul><li>在多个线程密集调用getInstance时，存在创建多个实例的可能。</li><li>比如线程A进入null == sInstance这段代码块，而在A线程未创建完成实例时，</li><li>如果线程B也进入了该代码块，必然会造成两个实例的产生。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. *  * 1.0 懒汉式,线程不安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazy</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.一个私有的指向自己的静态变量</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonLazy instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.私有的构造方法,保证不能从外部创建对象</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3.公开的静态工厂方法,返回该类的唯一实例(当发现没有实例没有初始化的时候才初始化)</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazy <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"创建SingletonLazy类的实例"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例已经创建,不能再创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        SingletonLazy s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>SingletonLazy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>SingletonLazy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>SingletonLazy<span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="饿汉式-线程安全"><a href="#饿汉式-线程安全" class="headerlink" title="饿汉式,线程安全"></a>饿汉式,线程安全</h4><ul><li>不能完成懒加载</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. *  * 2.0 饿汉式,线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHungry</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">// 1.私有的唯一的静态实例变量,在类加载的时候就创建好单例对象</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> SingletonHungry INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 2.私有的构造函数,确保不能在类的外部访问该类的构造函数</span>    <span class="token keyword">private</span> <span class="token function">SingletonHungry</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"执行构造函数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">// 3.公开的静态工厂返回此类的唯一实例</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonHungry <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="懒汉式，线程安全，多线程环境下效率不高"><a href="#懒汉式，线程安全，多线程环境下效率不高" class="headerlink" title="懒汉式，线程安全，多线程环境下效率不高"></a>懒汉式，线程安全，多线程环境下效率不高</h4><ul><li>使用synchrnozed修饰getInstance方法可能是最简单的一个保证多线程保证单例唯一性的方法。synchronized修饰的方法后，当某个线程进入调用这个方法，该线程只有当其他线程离开当前方法后才会进入该方法。</li><li>所以可以保证getInstance在任何时候只有一个线程进入，但是会导致性能下降，而且getInstance是一个被频繁调用的方法。虽然这种方法能解决问题，但是不推荐。</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. *  * 3.0 单例模式，懒汉式，线程安全，多线程环境下效率不高 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazySynchronized</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonLazySynchronized instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazySynchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> SingletonLazySynchronized <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazySynchronized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"实例已经创建,不能再创建"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="懒汉式，变种，线程安全"><a href="#懒汉式，变种，线程安全" class="headerlink" title="懒汉式，变种，线程安全"></a>懒汉式，变种，线程安全</h4><ul><li>添加静态代码块,初始化实例</li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. *  * 4.0 单例模式，懒汉式，变种，线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonLazyStatic</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> SingletonLazyStatic instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">static</span> <span class="token punctuation">{</span>        instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonLazyStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">SingletonLazyStatic</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonLazyStatic <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用静态内部类，线程安全【推荐】"><a href="#使用静态内部类，线程安全【推荐】" class="headerlink" title="使用静态内部类，线程安全【推荐】"></a>使用静态内部类，线程安全【推荐】</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. *  * 5.0 单例模式，使用静态内部类，线程安全【推荐】 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonStaticInner</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">{</span>        <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">static</span> SingletonStaticInner INSTANCE <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonStaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">private</span> <span class="token function">SingletonStaticInner</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonStaticInner <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> SingletonHolder<span class="token punctuation">.</span>INSTANCE<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用枚举方式，线程安全"><a href="#使用枚举方式，线程安全" class="headerlink" title="使用枚举方式，线程安全"></a>使用枚举方式，线程安全</h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. *  * 6.0 单例模式，使用枚举方式，线程安全 */</span><span class="token keyword">public</span> <span class="token keyword">enum</span>  SingletonEnum <span class="token punctuation">{</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">whateverMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h4 id="使用双重校验锁，线程安全【推荐】"><a href="#使用双重校验锁，线程安全【推荐】" class="headerlink" title="使用双重校验锁，线程安全【推荐】"></a>使用双重校验锁，线程安全【推荐】</h4><ul><li><p>使用双重检查加锁，首先进入该方法时进行null == sInstance检查，如果第一次检查通过，即没有实例创建，则进入synchronized控制的同步块,并再次检查实例是否创建，如果仍未创建，则创建该实例。</p></li><li><p>双重检查加锁保证了多线程下只创建一个实例，并且加锁代码块只在实例创建的之前进行同步。如果实例已经创建后，进入该方法，则不会执行到同步块的代码。</p></li><li><p>Volatile是轻量级的synchronized，它在多处理器开发中保证了共享变量的“可见性”。可见性的意思是当一个线程修改一个共享变量时，另外一个线程能读到这个修改的值。使用volatile修饰sInstance变量之后，可以确保多个线程之间正确处理sInstance变量。</p></li></ul><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/** * Created by weicools on 2016/10/18. *  * 7.0 单例模式，使用双重校验锁，线程安全【推荐】 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SingletonVerifyLock</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">volatile</span> <span class="token keyword">static</span> SingletonVerifyLock instance <span class="token operator">=</span> null<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token function">SingletonVerifyLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> SingletonVerifyLock <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span>SingletonVerifyLock<span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SingletonVerifyLock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="6-模式分析"><a href="#6-模式分析" class="headerlink" title="6.模式分析"></a>6.模式分析</h3><p>单例模式的目的是保证一个类仅有一个实例，并提供一个访问它的全局访问点。单例模式包含的角色只有一个，就是单例类——Singleton。单例类拥有一个私有构造函数，确保用户无法通过new关键字直接实例化它。除此之外，该模式中包含一个静态私有成员变量与静态公有的工厂方法，该工厂方法负责检验实例的存在性并实例化自己，然后存储在静态成员变量中，以确保只有一个实例被创建</p><p>在单例模式的实现过程中，需要注意如下三点：</p><pre><code>- 单例类的构造函数为私有；- 提供一个自身的静态私有成员变量；- 提供一个公有的静态工厂方法</code></pre><h3 id="7-实例"><a href="#7-实例" class="headerlink" title="7.实例"></a>7.实例</h3><p>在操作系统中，打印池(Print Spooler)是一个用于管理打印任务的应用程序，通过打印池用户可以删除、中止或者改变打印任务的优先级，在一个系统中只允许运行一个打印池对象，如果重复创建打印池则抛出异常。现使用单例模式来模拟实现打印池的设计</p><h3 id="8-优点-amp-缺点"><a href="#8-优点-amp-缺点" class="headerlink" title="8.优点&amp;缺点"></a>8.优点&amp;缺点</h3><ol><li>优点：<ul><li>提供了对唯一实例的受控访问。因为单例类封装了它的唯一实例，所以它可以严格控制客户怎样以及何时访问它，并为设计及开发团队提供了共享的概念</li><li>由于在系统内存中只存在一个对象，因此可以节约系统资源，对于一些需要频繁创建和销毁的对象，单例模式无疑可以提高系统的性能</li><li>允许可变数目的实例。我们可以基于单例模式进行扩展，使用与单例控制相似的方法来获得指定个数的对象实例</li></ul></li><li>缺点：<ul><li>由于单例模式中没有抽象层，因此单例类的扩展有很大的困难</li><li>单例类的职责过重，在一定程度上违背了“单一职责原则”。因为单例类既充当了工厂角色，提供了工厂方法，同时又充当了产品角色，包含一些业务方法，将产品的创建和产品的本身的功能融合到一起</li><li>滥用单例将带来一些负面问题，如为了节省资源将数据库连接池对象设计为单例类，可能会导致共享连接池对象的程序过多而出现连接池溢出</li></ul></li></ol><h3 id="9-使用环境"><a href="#9-使用环境" class="headerlink" title="9.使用环境"></a>9.使用环境</h3><ol><li>系统只需要一个实例对象，如系统要求提供一个唯一的序列号生成器，或者需要考虑资源消耗太大而只允许创建一个对象。</li><li>客户调用类的单个实例只允许使用一个公共访问点，除了该公共访问点，不能通过其他途径访问该实例。</li><li>在一个系统中要求一个类只有一个实例时才应当使用单例模式。反过来，如果一个类可以有几个实例共存，就需要对单例模式进行改进，使之成为多例模式</li></ol><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://droidyue.com/blog/2015/01/11/looking-into-singleton/" target="_blank" rel="noopener">单例这种设计模式</a></li><li>SwordOffer</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Design Pattern </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java基础知识</title>
      <link href="/20161012/java-base/"/>
      <url>/20161012/java-base/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="4-1-基本概念"><a href="#4-1-基本概念" class="headerlink" title="4.1 基本概念"></a>4.1 基本概念</h2><ol><li>Java语言优点：<ul><li>1).Java语言为<strong>纯面向对象语言</strong>，编写程序更为容易</li><li>2).<strong>平台无关性</strong>，可以做到一次编译，到处运行（Java是解释型语言编译器把Java代码变成中间代码，然后在Java VM上解释执行，中间代码与平台无关）</li><li>3).Java内置很多的类库，简化了程序设计工作（提供<strong>多线程支持，网络通信，垃圾回收</strong>……）</li><li>4).提供了<strong>对Web应用开发支持</strong>（Applet，Servlet，JSP，Socket，RIM）</li><li>5).具有<strong>较好的安全性和健壮性</strong></li><li>6).去除C++难以理解，容易混淆的特性<a id="more"></a></li></ul></li><li><p>Java与C/C++区别</p><ul><li>Java与C++都是面向对象语言，都使用面向对象思想（封装，继承，多态）</li><li>Java是<strong>解释型语言</strong>（过程：源代码经过Java编译器编译成字节码，然后由JVM执行）</li><li>Java<strong>没有指针概念，使程序更加安全</strong></li><li>Java可以<strong>自动回收垃圾</strong></li></ul></li><li><p>public static void main(String[][1] args)方法</p><ul><li>这是程序的入口方法，JVM在执行程序时，会先找到main方法，public表示任何一个类或者对象都可以访问这个方法，static表示main方法是静态的</li><li>每个类都可以定义main方法，但只是与文件名相同的public修饰的类中的方法才可以作为程序入口</li></ul></li><li><p>实现在main方法之前输出“Hello world”</p><ul><li>main方法是程序入口方法，<strong>在程序运行时最先加载；但是不一定是最先执行的</strong></li><li>使用静态代码块可以实现</li></ul></li><li><p>Java程序初始化顺序</p><ul><li>Java程序初始化一般遵循三个原则（优先级递减）</li><li><ol><li>静态对象（变量）优先于非静态对象（变量）初始化</li></ol></li><li><ol start="2"><li>父类优先于之类进行初始化</li></ol></li><li><ol start="3"><li>按照成员变量定义顺序进行初始化</li></ol></li></ul></li><li><p>Java作用域</p><ul><li>声明在不同地方的变量具有不同作用域（局部变量、全局变量），在Java中作用域由花括号决定（可见性与生命周期）</li><li><p>成员变量和方法可见性</p><p>| 作用域与可见性 | 当前类 | 同一package | 子类 | 其他package |<br>| — | — | — | — | — |<br>| public | ✔️ | ✔️ | ✔️ | ✔️ |<br>| protected | ✔️ | ✔️ | ✔️ | ❌ |<br>| default | ✔️ | ✔️ | ❌ | ❌ |<br>| private | ✔️ | ❌ | ❌ | ❌ |</p></li></ul></li><li><p>Java文件可以定义多个类，但是最多只有一个能被public修饰，并且这个类必须与文件名相同</p><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">// Derived.java</span> <span class="token keyword">class</span> <span class="token class-name">Base</span><span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Derived</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>     <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>         Base b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Derived</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         b<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment" spellcheck="true">// 使用java Derived.java指令编译会生成两个字节码文件Base.class和Derived.class</span> <span class="token comment" spellcheck="true">// java Derived指令执行代码，输出：Base</span></code></pre></li><li><p>构造函数：是一种特殊函数，用来在对象实例化的时候初始化对象的成员变量。Java中它具有以下特点：</p><ul><li>1）构造函数必须与类名相同，并且不能有返回值（返回值也不能是void）</li><li>2）每个类可以呢有多个构造函数，当开发人员没有提供构造函数时，编译器在把源代码编译成字节码的过程中提供默认无参构造函数，已有构造函数编译器则不会再提供默认构造函数</li><li>3）构造函数可以有0，1，1+个参数</li><li>4）主要作用是完成对象初始化工作</li><li>5）构造函数总是伴随new操作一起调用，不能由程序员直接调用，必须由系统调用；构造函数在对象实例化时被自动调用，且只运行一次；普通方法在程序执行到它时才会调用且可以多次调用</li><li>6）构造函数不能被继承，所以它不能被覆盖但是可以重载</li><li>7）子类可以通过super关键字显式调用父类构造函数；当父类没有提供无参构造函数时，子类的构造函数必须显式调用父类构造函数；当父类提供无参数构造函数时，子类可以不显式调用父类构造函数，默认就好调用父类无参数构造函数；对象实例化会先执行父类构造函数然后执行子类构造函数</li><li>8）父类和子类都没有定义构造函数，编译器会给父类和子类分别都生成默认无参构造函数</li></ul></li><li><p>为什么Java部分接口没有任何方法</p><ul><li>1）Java为克服单继承缺点，引入接口；接口是抽象方法定义的集合，只有方法定义没有实现，且所有方法均是抽象的；接口中成员作用域修饰符都是public，接口中常量默认值使用public static final修饰；一个类可以实现多个接口，可用来间接达到多重继承目的</li><li>2）有些接口没有任何方法即实现这些接口不需要重写任何方法，这些接口被叫做标识接口，仅充当标识作用，表明实现它的类属于一个特定类型（例如：Cloneable、Serializable）</li></ul></li></ol><pre><code>```java// Test.javaimport Java.Util.ArrayList;interface Stuff{}// 矿石interface Ore exrends Stuff{}// 武器interface Weapon extends Stuff{}// 垃圾interface Rubbish extends Stuff{}// 金矿class Gold implements Ore {    public String toString() {        return &quot;Gold&quot;;    }}// 铜矿class Copper implements Ore {    public String toString() {        return &quot;Copper&quot;;    }}// 枪class Gun implements Weapon {    public String toString() {        return &quot;Gun&quot;;    }}class Stone implements Rubbish {    public String toString() {        return &quot;Stone&quot;;    }}public class Test {    public static void main(String[] args) {        Stuff[] s = {new Gold(), new Copper(), new Gun(), new Stone()};        ArrayList&lt;Stuff&gt; list = collectStuff(s);        System.out.println(&quot;The usefull Stuff collected is : &quot;);        for(int i = 0; i &lt; list.size(); i++){            System.out.println(list.get(i));        }    }    public static ArrayList&lt;Stuff&gt; collectStuff(Stuff[] s) {        ArrayList&lt;Stuff&gt; list = new ArrayList&lt;Stuff&gt;();        for(int i = 0; i &lt; s.length(); i++){            if(!(s[i).instanceof Rubbish)                list.add(s[i]);        }        return list;    }}```</code></pre><ol start="10"><li>clone方法作用：</li><li><p>反射机制：它允许程序在运行时进行自我检查，同时也允许对其内部成员进行操作；由于反射机制能够实现在运行时对类进行装载因此可以增加程序灵活性；不恰当的使用也会影响系统性能</p><p>反射机制主要功能：得到一个对象所属的类；获取一个类的所有成员变量和方法；在运行时创建对象；在运行时调用对象的方法</p></li></ol><pre><code>```java// 在运行时动态创建类的对象class Base{    public void f() {        System.out.println(&quot;Base&quot;);    }}class Sub extends Base {    public void f() {        System.out.println(&quot;Sub&quot;);    }}public class Test {    public static void main(String[] args) {        try {        // 使用反射机制动态加载类            Class c = Class.forName(&quot;Sub&quot;);            Base b = (Base)c.newInstance();            b.f();        } catch(Exception e) {            e.printStackTrace();        }    }}```&gt;     获取class类的方法：1）class.forName(&quot;类的路径&quot;);2）类名.class;3）实例.getClass();</code></pre><ol start="12"><li>package作用：<ul><li>1）提供多层命名空间，解决命名冲突</li><li>2）对类按功能进行分类，使项目结构清晰</li></ul></li></ol><h2 id="4-2-面向对象技术"><a href="#4-2-面向对象技术" class="headerlink" title="4.2 面向对象技术"></a>4.2 面向对象技术</h2><ol><li><p>面向对象与面向过程的区别：</p><ul><li>1）出发点不同。面向对象方法是用于符合常规思维逻辑的方式来处理客观世界的问题，强调把问题域的要领直接映射到对象与对象及对象之间的接口上；而面向过程方法则是强调过程的抽象化与模块化，它是以过程为中心构造或处理客观世界问题</li><li>2）层次逻辑关系不同。</li><li>3）数据处理方式与程序控制方式不同。</li><li>4）分析设计与编码转换方式不同。</li></ul></li><li><p>面向对象特征：</p><ul><li>1）抽象：抽象是忽略一个主题中与当前目标无关的那些方面，以便充分注意与当前目标有关的方面；抽象包括过程和数据抽象</li><li>2）继承：是一种联结类的层次模型，并且允许和鼓励类的重用，它提供一种明确表述共性的方法；对象的一个新类可以从现有的类中派生。新类继承原始类的特性</li><li>3）封装：是指将客观事物抽象成类，每个类对自身的数据和方法实行保护，类可以吧自己的数据和方法让可信的类或者对象操作，对不可信的进行隐藏</li><li>4）多态：允许不同类的对象对同一消息作出响应；多态包含参数化多态和包含多态；多态性语言具有灵活、抽象、行为共享等优势，很好解决了应用程序函数同名的问题</li></ul></li><li><p>面向对象开发优点：</p><ul><li>1）较高开发效率。</li><li>2）保证软件的鲁棒性。面向对象的开发方法有很高的重用性，在开发的过程中可以重用已有的而且相关领域经过长期测试的代码</li><li>3）保证软件的高可维护性。代码可读性高；设计模式使得代码结构清晰，并且面对需求变更的时候只需修改部分代码即可满足需求</li></ul></li><li><p>继承：是面向对象中非常重要的一个特性，通过继承，子类可以使用父类的一些成员变量与方法，从而提高代码复用性，提高开发效率。继承通过extends关键字实现。继承具有如下特性：</p><ul><li>1）Java语言不支持多重继承，子类只能继承一个父类，但是可以通过接口的方式实现多重继承</li><li>2）子类只能继承父类非private得成员变量与方法</li><li>3）子类定义的成员变量与父类相同时，子类成员变量会覆盖父类成员变量</li><li>4）子类中的方法与父类中的方法有相同的签名（方法名，参数个数与类型）子类将会覆盖父类的方法</li></ul></li><li><p>组合与继承的区别：继承（is-a）组合（has-a）</p></li><li><p>多态实现机制：</p><ul><li>1）方法重载overload：同一个类中有多个方法，方法有着不同的参数</li><li>2）方法覆盖override：子类方法覆盖父类方法</li></ul></li><li><p>重载和覆盖：overload和override是Java多态性的不同表现形式</p><ul><li>1）重载是多态的一种表现，指一个类定义多个同名方法；重载通过不同方法参数区分的，不能通过访问权限、返回值类型、抛出异常类型区分</li><li>2）覆盖是指子类函数覆盖父类函数，对一个方法进行重写以达到不同的作用；覆盖时必须有相同的方法名称和参数、相同返回值类型、抛出的异常也相同；另外父类中的方法是private的话，子类则只是定义了一个方法，并没有覆盖</li><li><p>3）两者区别：覆盖是子类和父类之间的关系，属于垂直关系，重载是同一个类中的方法之间的关系，属于水平关系；重载要求参数列表不同，覆盖要求相同。。。</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubClass</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>      Super s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SubClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">float</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">return</span> <span class="token number">2f</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 编译错误。因为函数是不能通过返回值来区分</span></code></pre></li></ul></li><li><p>抽象类与接口：</p><ul><li>1）相同点：都不能被实例化；接口的实现类或者抽象类的子类只有实现了接口或者抽象类中的方法才能被实例化</li><li>2）不同点：</li></ul></li></ol><pre><code>| 接口 | 抽象类 || --- | --- || 只有定义，方法不能在接口中实现 | 方法可以在抽象类中实现 || 接口需要实现（implements）一个类可以实现多个接口 | 抽象类需要继承（extends）一个类只能继承一个抽象类 || 接口强调功能实现，设计理念是”has-a”关系 | 抽象类强调所属关系，设计理念是”is-a&quot;关系 || 接口中定义的成员变量默认为public static final，只能含有静态的不能被修改的数据成员且必须赋初始值，所以成员方法都是public、abstract的 | 抽象类成员变量默认是default，也可以被定义为public，private，protected；抽象方法不能使用private，static，synchronized，native修饰且不能含有方法体 || 接口常用于实现比较常用的功能，便于提后维护或者添加删除方法 | 抽象类更倾向于充当公共类的角色，不适合日后对代码进行修改 |</code></pre><ol start="9"><li>内部类：在类里面的类叫做内部类，外面就是外部类；共分为4种：静态内部类，成员内部类，局部内部类，匿名内部类</li></ol><pre><code>```javaclass outClass {    // 静态内部类    static class innerClass {}}class outClass {    // 成员内部类    class innerClass {}}class outClass {    public void f() {        // 局部内部类        class innerClass {}    }}public class MyFrame extends Frame {    public MyFrame() {        addWindowListener(new Windows=Adapter(){    // 匿名内部类            // 方法。。。        });    }}```&gt;     匿名内部类：不能有构造函数；不能使用关键字class、extends、implements；不能定义静态成员、方法、类；匿名内部类不能是public、protected。private、static；只能创建匿名内部类的一个实例 </code></pre><ol start="10"><li><p>获取父类类名：通过调用getClass().getName();</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出：Test</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// ？输出：Test</span><span class="token comment" spellcheck="true">// Java中任何类都继承Object类，getClass()方法在Object中被定义为final与native，子类不能覆盖该方法</span><span class="token comment" spellcheck="true">// 所以this.getClass()与super.getClass最终调用的都是Object中的getClass()方法</span><span class="token comment" spellcheck="true">// Object的getClass()方法定义是返回此Object的运行时类</span></code></pre><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">A</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token keyword">extends</span> <span class="token class-name">A</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getClass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getSuperclass</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// 输出：A</span><span class="token comment" spellcheck="true">// 使用反射机制可以得到</span></code></pre></li><li><p>this与super</p><ul><li>1）this用来指当前实例的对象，它的一个非常重要的作用是区分对象的成员变量与方法的形参</li><li>2）super可以用来访问父类的方法或者成员变量（当子类中的成员方法或者变量与父类相同时会覆盖父类的方法或者成员变量）</li></ul></li></ol><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Base:f()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Base</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Sub:f()"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">subf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">basef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">super</span><span class="token punctuation">.</span><span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        Sub s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">subf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        s<span class="token punctuation">.</span><span class="token function">basef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h2 id="4-3-关键字"><a href="#4-3-关键字" class="headerlink" title="4.3 关键字"></a>4.3 关键字</h2><ol><li>变量命名规则：变量名、函数名、数组名统称为标识符，它只能由字母（a~z, A~Z）/数字（0~9）/下划线（_）/$组成，且第一个不能是数字，也不能含有换行符、空格、制表符、Java保留的字符</li><li>break、continue、return：</li><li><p>final、finally、finalize：</p><ul><li>1）final用于声明属性、方法、类；分别表属性不可变（引用不可变）、方法不可覆盖、类不可被继承</li><li>2）finally作为异常处理的一部分，只能使用在try/catch语句中，表这段语句最终一定被执行，常用语释放资源</li><li>3）finalize是Object类的一个方法，</li></ul></li><li><p>assert：assert断言是作为软件调试的一种方法，提供在代码中进行正确性检查的机制；主要作用是对一个boolean表达式进行检查，正确运行程序必须保证boolean为true，若为false系统需要提供警告信息并退出</p></li><li><p>static关键字作用：</p><ul><li>1）为特定数据类型或者对象分配单一的存储空间，而与创建对象的个数无关</li><li>2）在不创建对象时就可以直接通过调用方法或者使用类的属性</li><li>3）static主要使用在成员变量、成员方法、代码块、内部类</li></ul></li><li><p>switch：switch语句用于多分支选择，switch(expr)中expr只能是枚举常量或者整数表达式</p></li><li><p>volatile作用：是一个类型修饰符，被设计用来修饰不同线程访问和修改的变量，被volatile修饰的变量，系统每次调用到它都是从缓存当中提取</p></li><li><p>instanceof作用：instanceof是Java语言中一个二次元运算符，它的作用是判断一个引用类型的变量所指向的对象是否是一个类或接口、抽象类、父类的实例。</p></li></ol><h2 id="4-4-基本类型运算"><a href="#4-4-基本类型运算" class="headerlink" title="4.4 基本类型运算"></a>4.4 基本类型运算</h2><ol><li><p>基本数据类型：byte-8bit、short-16bit、int-32bit、long-64bit、float-32bit、double-64bit、char-16bit、boolean</p></li><li><p>不可变类：当创建这个类的实例后，就不允许修改它的值</p></li><li><p>值传递与引用传递：</p><ul><li>1）值传递：在方法调用中，实参会把值传递给形参，形参只是用实参的值初始化一个临时存储的单元，所以形参和实参虽有相同的值，却有不同的存储单元，形参改变不影响实参的值</li><li><p>2）引用传递：在方法调用中传递的是对象（对象的地址）这时形参与实参的对象指向同一块存储单元，修改形参会印象实参</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">testPassParameter</span><span class="token punctuation">(</span>StringBuffer ssq<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span><span class="token punctuation">{</span>      ss1<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"World"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      n <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span><span class="token string">"Hello"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token function">testPassParameter</span><span class="token punctuation">(</span>sb<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment" spellcheck="true">// 打印sb和a</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>不同数据类型转换规则</li><li>强制类型转换注意事项</li><li><p>运算符优先级：</p><p> | 优先级 | 运算符 |<br> | — | — |<br> | 1 | . () [] |<br> | 2 | +正 -负 ++ — ~ ! |<br> | 3 | <em> / % |<br> | 4 | + - |<br> | 5 | &lt;&lt; &gt;&gt;无符号右移 &gt;&gt;&gt;有符号右移 |<br> | 6 | &lt; &lt;= &gt; &gt;= instanceof |<br> | 7 | == != |<br> | 8 | &amp; |<br> | 9 | | |<br> | 10 | ^ |<br> | 11 | &amp;&amp; |<br> | 12 | || |<br> | 13 | ?: |<br> | 14 | = += -= </em>= /= &amp;= =|= ^= ~= &lt;&lt;= &gt;&gt;= &gt;&gt;&gt;= |</p></li><li><p>Math类中的关键方法：</p><ul><li>1）round方法表四舍五入，返回值为int型；Math.round(11.5)=12,Math.round(-11.5)=11</li><li>2）ceil向上取整，返回值double型，正数小数入，负数小数舍</li><li>3）floor向下取整</li></ul></li><li><p>i++与++i：前者是郑旭执行完自增，后者是先自增然后执行</p></li><li>（&gt;&gt;）有符号右移；（&gt;&gt;&gt;）无符号右移，有符号右移在执行时，正数高位补0，负数高位补1，无符号则是都补0</li><li></li></ol><h2 id="4-5-字符串与数组"><a href="#4-5-字符串与数组" class="headerlink" title="4.5 字符串与数组"></a>4.5 字符串与数组</h2><ol><li><p>字符串创建与存储机制</p><ul><li>1）对于String s1 = new String(“abc”);和String s2 = new String(“abc”);存在两个引用对象，它们在内存中的地址不同</li><li>2）对于String S1 = “abc”;和String S2 = “abc”;在JVM中存在字符串常量池，保持很多的String对象，并且可以被共享使用</li></ul></li><li><p>==、equals、hashCode的区别</p><ul><li>1）==用来比较两个变量的值是否相等</li><li>2）equals()是Object类提供的基本方法，，每个类都继承自Object类，每个对象都有equals()方法，比较的是引用（Set中元素不重复使用equals()方法）</li><li>3）hashCode()方法是从Object类中继承来的，也用来鉴定两个对象是否相等，此方法返回对象在内存中地址转换成的一个int型的值，如果没有重新hashCode()方法，任何对象的hashCode()方法都是不等</li></ul></li><li><p>String,StringBuffer,StringBuilder,StringTokenizer</p><ul><li>String,StringBuffer,StringBuilder,StringTokenizer都可以对字符串操作，character用于单个字符，String用于字符串操作，属于不可变类；而StringBuffer也是用于字符串操作但是属于可变类</li><li>String是不可变类，对象一旦被创建其值不可变而StringBuffer可以改变值</li><li><p>实例化String时可以使用构造函数String s = new String(“qwe”);或者String s = “qwe”;</p><pre class=" language-java"><code class="language-java">String s <span class="token operator">=</span> <span class="token string">"hell0"</span><span class="token punctuation">;</span>s <span class="token operator">+=</span> <span class="token string">"weico"</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 等价于</span>StringBuffer sb <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">StringBuffer</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>s<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">"weico"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>s <span class="token operator">=</span> sb<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre></li><li>StringBuilder也可以修改字符串，都是字符串缓冲区，但是StringBuilder不是线程安全的，如果在单线程中使用字符串缓冲区StringBuilder效率高一些。效率StringBuilder&gt;StringBuffer&gt;String</li><li>StringTokenizer是用来分割字符串的</li></ul></li><li><p>数组是一个对象，数组是指具有相同类型的数据集合，它们一般具有固定长度，在内存中占据连续的空间</p></li><li><p>数组初始化方式：</p><ul><li>一维数组：type arrayName[]或者type[] arrayName,type可以是基本数据类型也可以是类，Java创建数组后会根据数组存放类型进行初始化值（int 初始化为0，对象初始化为null）</li><li>二维数组：type arrayName[][]或者type[][] arrayName或者type[] arrayName[]</li></ul></li><li><p>length属性与length()方法：length可以获取数组长度，length()获取字符串长度，另外size()是计算泛型集合有多少个元素</p></li></ol><h2 id="4-6-异常处理"><a href="#4-6-异常处理" class="headerlink" title="4.6 异常处理"></a>4.6 异常处理</h2><ol><li>finally块中代码什么时候执行：（一定会被执行）</li><li>异常处理原理：异常是指程序运行时，所发生的非正常或者错误，当程序违语义规则jvm将会出现错误表示一个异常并抛出，可以catch程序块捕获</li><li>运行时异常和普通异常：<ul><li>Java提供两种错误的异常类Error和Exception，且拥有共同父类Throwable；Error不可恢复，Exception可恢复</li><li>检查异常：是程序中最常碰到的异常，所有继承自Exception的异常除了运行时异常就是检查异常。比如IO/SQL异常</li><li>运行时异常，编译器没有强制对其进行捕获处理，由JVM来处理，如NullPointException异常，ClassCastException类型转换异常，ArrayIndexOutOfBounds数组越界异常，StoreException，BufferOverflowException</li></ul></li></ol><h2 id="4-7-输入输出流"><a href="#4-7-输入输出流" class="headerlink" title="4.7 输入输出流"></a>4.7 输入输出流</h2><ol><li><p>Java IO流实现机制</p><ul><li>输入和输出都被成为抽象的流，流可以看作有序的字节集合</li><li>流的本质是数据传输，根据处理数据类型不同可分为字节流和字符流</li><li>字节流以字节8bit为单位，包含抽象类InputStream和OutputStream；字符流以字符16bit为单位，包含Reader和Writer</li><li>区别在于字节流处理数据不会用到缓存</li></ul></li><li><p>管理文件和目录的类：File</p><p> | 方法 | 作用 |<br> | — | — |<br> | File(String path) | 根据制定的路径创建File对象 |<br> | createNewFile() | 若目录或文件存在返回false，否则创建文件或文件夹 |<br> | delete() | 删除文件或文件夹 |<br> | isFile() | 判断是否是文件 |<br> | isDirectory() | 判断是不是文件夹 |<br> | listFiles() | 若对象代表目录，则返回目录中所有文件的File对象 |<br> | mkdir() | 创建目录 |<br> | exist() | 是否存在 |</p></li><li>Java Socket：也称为套接字，在Java中分为：面向连接的Socket通信协议TCP，面向无连接的UDP<ul><li>基于TCP的通信过程：首先Server端Listen指定某个端口是否由连接请求，client向server发出连接，最后server返回接受信息</li><li>Socket生命周期：打开Socket、使用Socket收发数据，关闭Socket</li></ul></li><li>JavaNIO</li><li>Java序列化：Java提供两种对象持久化方式，分别是序列化和外部序列化<ul><li>1）序列化Serialization；序列化是一种将对象以一连串的字节描述的过程，用于解决在对对象进行读写操作时所引发的问题，可将对象的状态下载流里进行网络传输，或者保存到文件/数据库，并在需要时将流读取出来重新构造一个相同对象</li><li>2）实现序列化的类都必须实现Serializable接口（位于java.lang包），里面没有任何方法</li><li>3）序列化特点：如果一个类能被序列化，其子类也可以被序列化；由于static表类的成员是静态的，transient表对象的临时数据，因此被这两个关键字声明是不能够序列化的</li></ul></li></ol><h2 id="4-8-java平台内存管理"><a href="#4-8-java平台内存管理" class="headerlink" title="4.8 java平台内存管理"></a>4.8 java平台内存管理</h2><ol><li>Java平台独立性：中间码，虚拟机将中间码翻译成硬件平台能够执行的代码（.class文件有JVM执行）-动态解释型语言</li><li>Java平台特效：JVM+JavaAPI</li><li>JVM加载class文件机制：类加载分为隐式和显示，隐式加载是指程序使用new的方式创建对象，会隐式的调用类的加载器，把对应的类加载到jvm中；显示加载是指直接通过class.forName()把所需要的类加载到jvm</li><li><p>GC垃圾回收：主要作用回收程序中不再使用的内存，它需要完成三项任务：内存分配，确保被引用的对象的内存不被错误的回收，回收不再被引用的对象</p><ul><li>1）开发人员可以从复杂的释放内存工作中解放出来，提高了开发人员的效率</li><li>2）屏蔽释放内存的方法，避免开发人员错误的操作内存而导致程序崩溃，保证程序稳定性</li><li>3）对于对象若没有任何变量去引用它，那么该对象将不可能被程序访问，因此可视为垃圾信息</li><li>4）对于垃圾回收器，它使用有向图来记录和管理堆内存中所有对象</li><li>5）常用垃圾回收算法：引用计数-Reference Counting Collector，追踪回收Tracing Collector，压缩回收Comparing Collector，赋值回收Coping Collector，按代回收Generational Collector</li></ul></li><li><p>java是否存在内存泄漏</p><ul><li>内存泄漏是指不在被程序对象使用的或者变量还在内存中占有一定空间</li><li></li></ul></li><li>Java中堆和栈<ul><li>基本数据类型和对象的引用变量，其内存都分配在栈上，变量出了作用域就会被释放</li><li>引用类型的变量，内存分配在堆上或者常量池中（如String常量和基本数据类型的常量）</li></ul></li></ol><h2 id="4-9-容器"><a href="#4-9-容器" class="headerlink" title="4.9 容器"></a>4.9 容器</h2><ol><li><p>Java Collections框架</p><ul><li>Java collections框架包含许多集合接口和这些接口的实现类和操作他们的算法（排序，查找，反转，替换，复制，取最小最大元素），主要提供List，Queue，Set，Stack，Map，前四个都继承自Collection接口</li><li>Set：数学意义上的集合，主要特点元素不能重复，每个元素都必须定义equals方法确保唯一</li><li>List：有序collection，它按对象进入的顺序保存，可保存重复对象</li><li>Map：提供从键映射到值得数据结构，用于保存键值对，值可以重复，键是唯一。Java有许多实现该接口的类：HashMap，TreeMap，LinkedHashMap，WeakHashMap，IdentityHashMap</li></ul></li><li><p>迭代器Iterator：遍历并选择序列中的对象，提供一种访问一个容器对象中的所有元素，而又不暴露该对象的内部细节方法，使用迭代需要注意</p><ul><li>1）使用容器的iterator()方法返回一个Iterator，然后通过Iterator的next()方法返回第一个元素</li><li>2）使用Iterator的hasNext(）方法判断容器中是否还有元素，若有则使用next()方法获取下一个元素</li><li><p>3）通过Iterator的remove()方法删除迭代器返回的元素</p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IteratorTest</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      List<span class="token operator">&lt;</span>String<span class="token operator">></span> ll <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token operator">&lt;</span>String<span class="token operator">></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"second"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"third"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      ll<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token string">"fourth"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span>Iterator<span class="token operator">&lt;</span>String<span class="token operator">></span> iter  <span class="token operator">=</span> ll<span class="token punctuation">.</span><span class="token function">iterator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> iter<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          String s <span class="token operator">=</span> iter<span class="token punctuation">.</span><span class="token function">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li><p>ArrayList，Vector，LinkedList</p><ul><li>ArrayList和Vector都是基于存储元素Object[] array来实现，他们会在内存中开辟一块连续空间来存储，数据存储是连续的，所以支持使用序列号来访问元素，查找速度较快，插入数据较慢；两者都有初始化的容量大小，为了提高程序效率vector每次扩充2倍，ArrayList扩充1.5倍</li><li>LinkedList是采用双向列表来实现的，对数据的索引需要从表头开始遍历，随机访问效率低，但是插入元素时不需要对数据进行移动，插入效率高</li></ul></li><li><p>HashMap，HashTable，TreeMapWeakHashMap</p><ul><li>Java为数据结构的映射定义了一个接口java.util.Map，它包括3个实现类HashMap，HashTable，TreeHash</li><li>HashMap是最常用的Map，它根据键的HashCode存储数据，由键可以获取值，具有访问速度快。HashMap和HashTable都使用hash法进行索引。不同之处1）HashMap是HashTable的轻量级实现（非现场安全的实现），都完成了Map接口，HashMap允许空键值（由于键唯一性，最多允许一条记录键为null，不允许多条记录的值为空）HashTable不允许；2）HashMap把HashTable的contains方法去掉了，改为containsvalue和containsKey；3）HashTable的方法是线程安全的，HashMap不支持线程同步，所以是现场不安全的，需要开发人员提供额外的同步机制；4）HashTable使用Enumeration，HashMap使用Iterator；5）HashTable中hash数组默认大小是11，增加方式是原来大小*2+1，而HashMap中hash数组的默大小是16，而且一定是2的指数</li></ul></li><li><p>使用自定义类型作为HashTable和HashMap需要注意</p></li><li></li></ol><h2 id="4-10-多线程"><a href="#4-10-多线程" class="headerlink" title="4.10 多线程"></a>4.10 多线程</h2><ol><li><p>线程</p><ul><li>线程是程序在执行过程中，能够执行程序代码的一个执行单元，共有四种状态：运行，就绪，挂起，结束</li><li>多线程可减少程序执行时间，提供效率</li><li>线程切换开销更小</li></ul></li><li><p>同步和异步<br> - </p></li><li><p>实现Java多线程方法</p><ul><li><p>1）继承Thread类，重写run()方法</p><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">extends</span> <span class="token class-name">Thread</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          MyThread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//开启线程，不立即执行多线程代码，而是使线程变为可运行状态</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li><p>2）实现Runnable接口    </p><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 自定义类并实现Runnable接口，实现run()方法</span><span class="token comment" spellcheck="true">// 创建Thread对象，实现Runnable接口的对象作为参数实例化该Thread对象</span><span class="token comment" spellcheck="true">// 调用Thread的start()方法</span><span class="token keyword">class</span> <span class="token class-name">MyThread</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Thread body"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Test</span> <span class="token punctuation">{</span>      <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>          MyThread t <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MyThread</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          Thread thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>          t<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//开启线程</span>          <span class="token comment" spellcheck="true">// 最终都是通过Thread的对象的API来控制线程</span>      <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li><li>3)实现Callable接口，重写call()方法；Callable在任务结束后提供一个返回值，call()方法可以抛出异常，</li></ul></li><li><p>run()方法与start()方法</p><ul><li>系统通过调用Thread的start方法启动一个线程，此时处于就绪态，通过调用run方法来完成实际操作</li></ul></li><li><p>多线程同步方法</p><ul><li>1）synchronized关键字：Java中每个对象都有一个对象锁与之相关联，该锁表明对象在任何时候只允许被一个线程锁拥有，当一个线程调用对象的一段synchronized代码时，需要先获得这个锁，然后去执行相关代码，释放锁。synchronized主要有两种用法：synchronized方法和synchronized块<ul><li>synchronized方法：public synchronized void mutiThreadAccess();</li><li>synchronized块：可以把任意代码段声明为synchronized，也可以指定上锁的对象synchronized(syncObject){}</li></ul></li><li>2）wait()与notify()：使用synchronized修饰某个共享资源师，当线程A1在执行synchronized代码，A2也在等同一对象的同一个synchronized代码才能继续执行，这时需要wait和notify方法；在synchronized被执行时，线程可以调用对象的wait方法</li><li>3)lock()：以阻塞的方式获取锁，若获取到了锁，立即返回；若别的线程持有锁，当前线程等待，直到获取锁后返回。</li></ul></li><li><p>sleep()方法与wait()方法区别：sleep()是使线程暂停执行一段时间</p><ul><li>1）原理不同：sleep()方法是Thread类的静态方法，是线程用来控制自身流程的，它会使此线程暂停执行一段时间</li><li>2）对锁的处理机制不同</li><li>3）使用区域不同：wait必须使用在同步方法或者同步代码块；sleep必须抛出异常</li></ul></li><li><p>终止线程方法：stop()和suspend()</p></li><li>synchronized与lock</li><li>守护线程：服务进程/后台进程</li><li>join()方法：让调用该方法的线程在执行完run方法之后，再执行join方法后面的代码</li></ol><h2 id="4-11-Java数据库操作"><a href="#4-11-Java数据库操作" class="headerlink" title="4.11 Java数据库操作"></a>4.11 Java数据库操作</h2><ol><li>通过JDBC连接数据库：用于在Java程序中实现数据库操作，提供了执行SQL语句，访问各种数据库的方法，并为不同的数据库提供接口；java.sql包含了JDBC操作数据库的所有类；通过JDBC访问数据库步骤：<ul><li>1）加载jDBC驱动器，将数据库的JDBC加载到classpath中（JavaEE web需要把目标数据库的JDBC驱动复制到WEB-INF/lib）</li><li>2）加载JDBC驱动，并注册到DriveManager中；一般使用反射class.forName(String driveName)</li><li>3）建立数据库连接，取得Connection对象一般通过DriveManager.getConnection(url, username, pw)</li><li>4）建立Statement对象或者PrepareStatement对象</li><li>5）执行SQL语句</li><li>6）访问结果集ResultSet对象</li><li>7）依次将ResultSet、Statement、PrepareStatement、Connection关闭，释放掉所有占有的资源（JDBC在底层通常都是通过网络IO实现SQL命令）</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Java常考面试题</title>
      <link href="/20160828/java-interview-summary/"/>
      <url>/20160828/java-interview-summary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="2016-09-20"><a href="#2016-09-20" class="headerlink" title="2016.09.20"></a>2016.09.20</h3><ol><li>什么是Java虚拟机，为什么Java是平台无关性的语言？<ul><li>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件</li><li>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性； JVM屏蔽了与具体操作系统平台相关的信息，使得Java程序只需生成在Java虚拟机上运行的目标代码（ 字节码 ），就可以在多种平台上不加修改地运行<a id="more"></a></li></ul></li><li>JDK和JRE的区别<ul><li>Java运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件</li><li>Java开发工具包(JDK)是完整的Java软件开发包，包含了<strong>JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)</strong>，可以让开发者开发、编译、执行Java应用程序</li></ul></li><li>”static”关键字？Java中是否可以覆盖(override)一个private或者是static的方法？<ul><li>“static”关键字表示静态的意思，可用于修饰变量和成员函数，被static修饰的成员函数只能访问静态成员，静态是随着类加载而加载的，因此可以直接用类进行访问</li><li>Java中static方法不能被覆盖，因为覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的</li><li><strong>重写是子类中的方法和子类继承的父类中的方法一样（函数名，参数，参数类型，反回值类型）</strong>，但是子类中的访问权限要不低于父类中的访问权限。重写的前提是必须要继承，private修饰不支持继承，因此被私有的方法不可以被重写。静态方法形式上可以被重写，即子类中可以重写父类中静态的方法。但是实际上<strong>从内存的角度上静态方法不可以被重写</strong><pre class=" language-java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Super</span><span class="token punctuation">{</span><span class="token keyword">static</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Good night"</span><span class="token punctuation">}</span>String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Weico"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Sub</span> <span class="token keyword">extends</span> <span class="token class-name">Super</span><span class="token punctuation">{</span><span class="token keyword">static</span> String <span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"Hello"</span><span class="token punctuation">}</span>String <span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token string">"lecymeng"</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">class</span> <span class="token class-name">Test</span><span class="token punctuation">{</span><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span><span class="token punctuation">{</span>Super s <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sub</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">","</span> <span class="token operator">+</span> s<span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 输出结果：Good night,lecymeng</span><span class="token comment" spellcheck="true">// 实例方法被覆盖，静态方法被隐藏</span><span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre></li></ul></li><li>是否可以在static环境中访问非static变量？<ul><li>静态的成员属于类，随着类的加载而加载到静态方法区内存，当类加载时，此时不一定有实例创建，没有实例，就不可以访问非静态的成员</li><li>当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上</li></ul></li><li>Java支持的数据类型有哪些？什么是自动拆装箱？<ul><li>Java支持8中基本数据类型：byte/short/int/long/float/double/boolean/char</li><li>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间的转化。byte-&gt;Byte;short-&gt;Short;int-&gt;Integer;long-&gt;Long;float-&gt;Float;double-&gt;Double;boolean-&gt;Boolean;char-&gt;Character.反之就是自动拆箱</li></ul></li><li>Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？<ul><li>Java中的方法重载Overloading发生在<strong>同一个类</strong>里面两个或者是多个方法的<strong>方法名相同但是参数不同</strong>的情况</li><li>方法覆盖Overriding是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问</li><li>访问权限&gt;=父类，抛出异常必须&lt;=父类（或者不抛异常）。（特殊点，如果子类重写的方法所抛异常小于父类，那么就不能调用父类的方法，因为子类的异常小，捕获不了 ）， private修饰的父类方法不能被重写</li></ul></li><li>Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？<ul><li>当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数</li><li>Java中构造函数重载和方法重载很相似；可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表</li><li>Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数</li></ul></li><li>Java支持多继承么？<ul><li>Java中<strong>类不支持多继承</strong>，只支持单继承（即一个类只有一个父类）</li><li>但是java中的<strong>接口支持多继承</strong>，即一个子接口可以有多个父接口。（接口的作用是用来扩展对象的功能，一个子接口继承多个父接口，说明子接口扩展了多个功能，当类实现接口时，类就扩展了相应的功能）</li></ul></li><li>接口和抽象类的区别是什么？<ul><li>Java提供和支持创建抽象类和接口，它们的实现有共同点，也有不同之处：</li><li>接口中所有的方法隐含的都是抽象方法 / 而抽象类则可以同时包含抽象和非抽象方法</li><li>类可以实现多个接口 / 但是只能继承一个抽象类</li><li>Java接口中申明的变量默认都是public static final / 抽象类可以包含非final的变量</li><li>Java接口中的成员函数默认是public的 / 抽象类的成员函数可以是private，protected或者是public</li><li>接口是绝对抽象的，不可以被实例化 / 抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的</li><li>类可以不实现抽象类和接口声明的所有方法(在这种情况下，类也必须得声明成是抽象的)</li><li>抽象类可以在不提供接口方法实现的情况下实现接口–？</li></ul></li><li>什么是值传递和引用传递？<ul><li>值传递是对基本型变量而言的,传递的是该变量的一个副本,改变副本不影响原变量</li><li>引用传递一般是对于对象型变量而言的,传递的是该对象地址的一个副本, 并不是原对象本身 。 所以对引用对象进行操作会同时改变原对象.</li><li>一般认为,java内的传递都是值传递</li><li>问题来了：java中对象作为参数传递给一个方法，到底是值传递，还是引用传递？</li><li>值传递！Java中只有按值传递，没有按引用传递！</li></ul></li><li>进程和线程的区别是什么？<ul><li>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程</li></ul></li><li>创建线程有几种不同的方式？你喜欢哪一种？为什么？<ul><li>继承Thread类</li><li>实现Runnable接口</li><li>应用程序可以使用Executor框架来创建线程池</li><li>实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用</li></ul></li><li>概括的解释下线程的几种可用状态<ul><li>1.新建（new）：新创建了一个线程对象</li><li>2.可运行（runnable）：线程对象创建后，其他线程（例如main线程）调用了该线程的start()方法。该状态的线程位于可运行线程池中，等待被线程调度选中，获取 cpu 的使用权</li><li>3.运行（running）：可运行状态的线程获得了CPU时间片（timeslice），执行程序代码</li><li>4.阻塞（block）：阻塞状态是指线程因为某种原因放弃了CPU使用权，暂时停止运行。直到线程进入可运行( runnable )状态，才有 机会再次获得cpu timeslice转到运行( running )状态。阻塞的情况分三种：</li><li>(一). 等待阻塞：运行( running )的线程执行 o . wait ()方法， JVM 会把该线程放 入等待队列( waitting queue )中</li><li>(二). 同步阻塞：运行( running )的线程在获取对象的同步锁时，若该同步锁 被别的线程占用，则 JVM 会把该线程放入锁池( lock pool )中</li><li>(三). 其他阻塞: 运行( running )的线程执行 Thread . sleep ( long ms )或 t . join ()方法，或者发出了 I / O 请求时， JVM 会把该线程置为阻塞状态。当 sleep ()状态超时、 join ()等待线程终止或者超时、或者 I / O 处理完毕时，线程重新转入可运行( runnable )状态</li><li>5.死亡（dead）：线程 run ()、 main () 方法执行结束，或者因异常退出了 run ()方法，则该线程结束生命周期。死亡的线程不可再次复生<br><img src="http://uploadfiles.nowcoder.com/images/20151217/149974_1450349079825_4697A22AC611680A692472687DEC1CFD" alt="Thread state"></li></ul></li><li>同步方法和同步代码块的区别？<ul><li>同步方法默认用this或者当前类class对象作为锁</li><li>同步代码块可以选择以什么来加锁，比同步方法要更细颗粒度，我们可以选择只同步会发生同步问题的部分代码而不是整个方法</li></ul></li><li>在监视器(Monitor)内部，是如何做线程同步的？程序应该做哪种级别的同步？<ul><li>监视器和锁是在Java虚拟机中一块使用的</li><li>监视器监视一块同步代码块，确保只有一次只有一个线程执行同步代码块</li><li>每一个监视器都和一个对象引用关联</li><li>线程在获取锁之前不允许执行同步代码块</li></ul></li><li>什么是死锁（deadlock）？<ul><li>两个或者两个以上的线程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁，结果是这些线程都陷入了无线的等待</li></ul></li><li>如何确保N个线程可以访问N个资源同时又不导致死锁？<ul><li>使用多线程的时候，简单避免死锁的方式就是：指定获取锁的顺序，并强制线程按照规定的熟悉怒获取锁；如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了</li><li>多线程产生死锁需要四个条件，分别是<strong>互斥性，保持和请求，不可剥夺性还有要形成闭环</strong>，这四个条件缺一不可，只要破坏了其中一个条件就可以破坏死锁，其中最简单的方法就是线程都是以同样的顺序加锁和释放锁，也就是破坏了第四个条件</li><li>1.互斥条件：一个资源每次只能被一个进程使用</li><li>2.保持和请求条件：一个进程因请求资源而阻塞时，对已获得资源保持不放</li><li>3.不可剥夺调教：进程已获得资源，在未使用完成前，不能被剥夺</li><li>4.循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系</li></ul></li><li>Java集合类框架的基本接口有哪些？<ul><li>集合类中指定了一组叫做元素的对象，集合类接口中的每一种具体实现类都可以选择以它的方式对元素进行保存和排序，有的集合类允许重复的键，有些不允许</li><li>Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：</li><li>Collection：代表一组对象，每一个对象都是它的子元素</li><li>List：有顺序的Collection，可以包含重复元素<ul><li>ArrayList：类似一个长度可变的数组 。适合查询，不适合增删</li><li>LinkedList：底层是双向循环链表。适合增删，不适合查询</li></ul></li><li>Set：不包含重复元素的Collection<ul><li>HashSet：根据对象的哈希值确定元素在集合中的位置</li><li>TreeSet: 以二叉树的方式存储元素，实现了对集合中的元素排序</li></ul></li><li>Map：可以把键key映射到值value得对象，键不允许重复<ul><li>HashMap：用于存储键值映射关系，不能出现重复的键key</li><li>TreeMap：用来存储键值映射关系，不能出现重复的键key，所有的键按照二叉树的方式排列</li></ul></li></ul></li><li>为什么集合类没有实现Cloneable和Serializable接口？<ul><li>克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化</li></ul></li><li>什么是迭代器(Iterator)？<ul><li>Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素,但是不可以直接调用集合的remove(Object Obj)删除，可以通过迭代器的remove()方法删除</li></ul></li><li>Iterator和ListIterator的区别是什么？<ul><li>Iterator可以遍历List和Set / ListIterator只能遍历List</li><li>Iterator对集合只能是前向遍历 / ListIterator既可以前向也可以后向</li><li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引等等</li></ul></li><li>快速失败（fail-fast）和安全失败（fail-safe）区别<ul><li>Iterator的安全失败是基于对底层集合进行拷贝，所以不受源集合上修改的影响</li><li>java.util包下面的所有集合类都是快速失败</li><li>java.util.concurrent包下面的所有的类都是安全失败的</li><li>快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常</li></ul></li><li>Java中的HashMap的工作原理是什么？<ul><li>Java中HashMap是以键值对（key-value）的形式存储元素</li><li>HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合添加元素/从集合中检索元素</li><li>当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值</li><li>HashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)</li></ul></li><li>hashCode()和equals()方法的重要性体现在什么地方？<ul><li>Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法</li><li>如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的</li><li>这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的</li></ul></li><li>HashMap和Hashtable有什么区别？<ul><li>HashMap和Hashtable都实现了Map的接口，因此很多特性非常相似。他们不同之处在于：</li><li>HashMap运行键和值是null，而Hashtable不允许键值为null</li><li>Hashtable是同步的，而HashMap不是；所以HashMap更适合单线程环境，Hashtable更适合多线程环境</li><li>HashMap提供了可以供应用迭代的键的集合，因此HashMap是快速失败的；另一方，Hashtable提供了对键的列举(Enumeration)。一般认为Hashtable是一个遗留的类</li></ul></li><li>数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？<ul><li>Array可以包含基本类型和对象类型 / ArrayList只能包含对象类型</li><li>Array的大小是固定的 / ArrayList的大小是动态变化的</li><li>ArrayList提供更多的方法和特性，例如：addAll(),removeAll(),iterator()</li><li>对于基本数据类型，集合使用自动装箱来减少编码工作量；但是当处理固定大小固定大小的基本数据类型的时候，这种方式相对比较慢</li></ul></li><li>ArrayList和LinkedList有什么区别？<ul><li>ArrayList和LinkedList都实现了List接口，不同之处在于：</li><li>ArrayList是基于索引的数据接口，它的底层是数组，它可以以O(1)时间复杂度对元素进行随机访问 / 与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个元素和后一个元素链接在一起，查找某个元素的时间复杂度是O(N)</li><li>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引</li><li>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素</li></ul></li><li>Comparable和Comparator接口是干什么的？列出它们的区别<ul><li>Java提供了只包含一个compareTo()方法的Comparable接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象</li><li>Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true</li></ul></li><li>什么是Java优先级队列(Priority Queue)？<ul><li>Priority Queue一个基于优先级堆得无线队列，它的元素是按照自然顺序排序的</li><li>在创建的时候，我们可以给它提供一个负责给元素排序的比较器</li><li>PriorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器</li><li>PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))</li></ul></li><li>你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？<ul><li>大O符号描述了当数据结构里面的元素增加的时候，算法的规模或者是性能在最坏的场景下有多么好。</li><li>大O符号也可用来描述其他的行为，比如：内存消耗。因为集合类实际上是数据结构，我们一般使用大O符号基于时间，内存和性能来选择最好的实现。大O符号可以对大量数据的性能给出一个很好的说明</li></ul></li></ol><h3 id="2016-09-30"><a href="#2016-09-30" class="headerlink" title="2016.09.30"></a>2016.09.30</h3><ol><li><p>如何权衡是使用无序的数组还是有序的数组？</p><ul><li>有序数组最大的好处在于查找的时间复杂度是O(log n)，而无序数组是O(n)。有序数组的缺点是插入操作的时间复杂度是O(n)，因为值大的元素需要往后移动来给新元素腾位置。相反，无序数组的插入时间复杂度是常量O(1)</li></ul></li><li><p>Java集合类框架的最佳实践</p><ul><li>根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的大小是固定的，而且能事先知道，我们就应该用Array而不是ArrayList</li><li>有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容</li><li>为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException</li><li>使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法</li><li>编程的时候接口优于实现</li><li>底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null</li></ul></li><li><p>Enumeration接口和Iterator接口的区别</p><ul><li>Enumeration速度是Iterator的2倍，同时占用更少的内存</li><li>但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象</li><li>同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的</li></ul></li><li><p>HashSet和TreeSet有区别</p><ul><li>HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)</li><li>TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)</li></ul></li><li><p>Java垃圾回收目的</p><ul><li>垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源</li></ul></li><li><p>System.gc()和Runtime.gc()会做什么事情</p><ul><li>用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的</li></ul></li><li>finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？<ul><li>垃圾回收器(garbage colector)决定回收某对象时，就会运行该对象的finalize()方法 但是在Java中很不幸，如果内存总是充足的，那么垃圾回收可能永远不会进行，也就是说filalize()可能永远不被执行，显然指望它做收尾工作是靠不住的，它最主要的用途是回收特殊渠道申请的内存。</li><li>析构finalization，比如你在调用了一些native的方法，可以要在finaliztion里去调用释放函数</li></ul></li><li><p>如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？</p><ul><li>不会，在下一个垃圾回收周期中，这个对象将是可被回收的</li></ul></li><li><p>Java堆的结构是什么样子的？什么是堆中的永久代(Perm Gen space)?</p><ul><li>JVM的堆是运行时数据区，所有类的实例和数组都是在堆上分配内存。它在JVM启动的时候被创建。对象所占的堆内存是由自动内存管理系统也就是垃圾收集器回收</li><li>堆内存是由存活和死亡的对象组成的。存活的对象是应用可以访问的，不会被垃圾回收。死亡的对象是应用不可访问尚且还没有被垃圾收集器回收掉的对象。一直到垃圾收集器把这些对象回收掉之前，他们会一直占据堆内存空间</li></ul></li><li><p>串行(serial)收集器和吞吐量(throughput)收集器的区别</p><ul><li>串行收集器对大多数的小应用(在现代处理器上需要大概100M左右的内存)就足够了</li><li>吞吐量收集器使用并行版本的新生代垃圾收集器，它用于中等规模和大规模数据的应用程序</li></ul></li><li><p>在Java中，对象什么时候可以被垃圾回收</p><ul><li>当没有任何对象的引用指向对象时在一个不可预期的时间内对象才会被回收(对于那些循环应用的时候，也要被回收)</li><li>当对象对当前使用这个对象的应用程序变得不可触及的时候，这个对象就可以被回收了</li></ul></li><li><p>JVM的永久代中会发生垃圾回收么？</p><ul><li>垃圾回收不会发生在永久代，如果永久代满了或者是超过了临界值，会触发完全垃圾回收(Full GC)</li><li>如果你仔细查看垃圾收集器的输出信息，就会发现永久代也是被回收的</li></ul></li><li><p>Java中的两种异常类型是什么？他们有什么区别？</p><ul><li>Java中有两种异常：受检查的(checked)异常和不受检查的(unchecked)异常</li><li>不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面</li><li>受检查的异常必须要用throws语句在方法或者是构造函数上声明</li></ul></li><li><p>Java中Exception和Error有什么区别？</p><ul><li>Exception和Error都是Throwable的子类</li><li>Exception用于用户程序可以捕获的异常情况</li><li>Error定义了不期望被用户程序捕获的异常</li></ul></li><li><p>throw和throws有什么区别？</p><ul><li>throw关键字用来在程序中明确的抛出异常，相反，throws语句用来表明方法不能处理的异常</li><li>Throw用于方法内部，Throws用于方法声明上;Throw后跟异常对象，Throws后跟异常类型;Throw后只能跟一个异常对象，Throws后可以一次声明多种异常类型</li><li>每一个方法都必须要指定哪些异常不能处理，所以方法的调用者才能够确保处理可能发生的异常，多个异常是用逗号分隔的(语法：修饰符 返回值类型 方法名  参数类型  throws异常类<br>  public void test throws Exception1,Exception2(){})</li></ul></li><li><p>异常处理完成以后，Exception对象会发生什么变化？</p><ul><li>Exception对象会在下一个垃圾回收过程中被回收掉</li></ul></li><li><p>finally代码块和finalize()方法有什么区别？</p><ul><li>无论try catch语句块中的代码块是否抛出异常，finally代码块都会执行，它主要是用来释放应用占用的资源</li><li>finalize()方法是Object类的一个protected方法，它是在对象被垃圾回收之前由Java虚拟机来调用的</li></ul></li><li><p>什么是Applet？</p><ul><li>java applet是能够被包含在HTML页面中并且能被启用了java的客户端浏览器执行的程序。Applet主要用来创建动态交互的web应用程序</li></ul></li><li><p>Applet的生命周期:</p><ul><li>Init：每次被载入的时候都会被初始化</li><li>Start：开始执行applet</li><li>Stop：结束执行applet</li><li>Destroy：卸载applet之前，做最后的清理工作</li></ul></li><li><p>当applet被载入的时候会发生什么？</p><ul><li>首先创建applet控制类的实例;然后初始化applet;最后开始运行</li></ul></li><li><p>Applet和普通的Java应用程序有什么区别？</p><ul><li>applet是运行在启用了java的浏览器中，Java应用程序是可以在浏览器之外运行的独立的Java程序</li><li>Java应用程序需要一个有特定方法签名的main函数来开始执行。Java applet不需要这样的函数来开始执行</li><li>Java applet一般会使用很严格的安全策略，Java应用一般使用比较宽松的安全策略</li></ul></li><li><p>Java applet有哪些限制条件？</p><ul><li>applet不能够载入类库或者定义本地方法</li><li>applet不能在宿主机上读写文件</li><li>applet不能读取特定的系统属性</li><li>applet不能发起网络连接，除非是跟宿主机</li><li>applet不能够开启宿主机上其他任何的程序</li></ul></li><li><p>什么是不受信任的applet？</p><ul><li>不受信任的applet是不能访问或是执行本地系统文件的Java applet，默认情况下，所有下载的applet都是不受信任的</li></ul></li><li><p>从网络上加载的applet和从本地文件系统加载的applet有什么区别？</p><ul><li>当applet是从网络上加载的时候，applet是由applet类加载器载入的，它受applet安全管理器的限制</li><li>当applet是从客户端的本地磁盘载入的时候，applet是由文件系统加载器载入的</li><li>从文件系统载入的applet允许在客户端读文件，写文件，加载类库，并且也允许执行其他程序，但是，却通不过字节码校验</li></ul></li><li><p>applet类加载器是什么？它会做哪些工作？</p><ul><li>当applet是从网络上加载的时候，它是由applet类加载器载入的。类加载器有自己的java名称空间等级结构。类加载器会保证来自文件系统的类有唯一的名称空间，来自网络资源的类有唯一的名称空间</li><li>当浏览器通过网络载入applet的时候，applet的类被放置于和applet的源相关联的私有的名称空间中。然后，那些被类加载器载入进来的类都是通过了验证器验证的。验证器会检查类文件格式是否遵守Java语言规范，确保不会出现堆栈溢出(stack overflow)或者下溢(underflow)，传递给字节码指令的参数是正确的</li></ul></li><li><p>applet安全管理器是什么？它会做哪些工作？</p><ul><li>applet安全管理器是给applet施加限制条件的一种机制。浏览器可以只有一个安全管理器。安全管理器在启动的时候被创建，之后不能被替换覆盖或者是扩展</li></ul></li><li><p>弹出式选择菜单(Choice)和列表(List)有什么区别</p><ul><li>Choice是以一种紧凑的形式展示的，需要下拉才能看到所有的选项。Choice中一次只能选中一个选项</li><li>List同时可以有多个元素可见，支持选中一个或者多个元素</li></ul></li><li><p>布局管理器</p><ul><li>布局管理器用来在容器中组织组件</li></ul></li><li><p>滚动条(Scrollbar)和滚动面板(JScrollPane)区别</p><ul><li>Scrollbar是一个组件，不是容器。而JScrollPane是容器。JScrollPane自己处理滚动事件</li><li>在设置界面时，可能会遇到在一个较小的容器窗体中显示一个较大部分的内容，这时可以使用JScrollPane面板，JscrollPane面板是带滚动条的面板，也是一种容器，但是常用于布置单个控件，并且不可以使用布局管理器。如果需要在JScrollPane面板中放置多个控件，需要将多个控件放置到JPanel 面板上，然后将JPanel面板作为一个整体控件添加到JScrollPane控件上</li></ul></li><li><p>哪些Swing的方法是线程安全的？</p><ul><li>只有3个线程安全的方法： repaint(), revalidate(), and invalidate()</li></ul></li></ol><h3 id="2016-10-08"><a href="#2016-10-08" class="headerlink" title="2016.10.08"></a>2016.10.08</h3><ol><li><p>支持重绘(painting)的组件</p><ul><li>Canvas, Frame, Panel,和Applet支持重绘</li></ul></li><li><p>什么是裁剪(clipping)？</p><ul><li>限制在一个给定的区域或者形状的绘图操作就做裁剪</li></ul></li><li><p>MenuItem和CheckboxMenuItem的区别是什么？</p><ul><li>CheckboxMenuItem类继承自MenuItem类，支持菜单选项可以选中或者不选中</li></ul></li><li><p>边缘布局(BorderLayout)里面的元素是如何布局的？</p><ul><li>BorderLayout里面的元素是按照容器的东西南北中进行布局的</li></ul></li><li><p>网格包布局(GridBagLayout)里面的元素是如何布局的？</p><ul><li>GridBagLayout里面的元素是按照网格进行布局的。不同大小的元素可能会占据网格的多于1行或一列。因此，行数和列数可以有不同的大小</li></ul></li><li><p>Windows和Frame区别</p><ul><li>Frame类继承了Window类，它定义了一个可以有菜单栏的主应用窗口</li></ul></li><li><p>裁剪(clipping)和重绘(repainting)有什么联系？</p><ul><li>当窗口被AWT重绘线程重绘的时候，它会把裁剪区域设置成重绘的窗口区域</li></ul></li><li><p>事件监听器接口(event-listener interface)和事件适配器(event-adapter)的关系</p><ul><li>事件监听器接口定义了对特定的事件，事件处理器必须要实现的方法</li><li>事件适配器给事件监听器接口提供了默认的实现（适配器是一种设计模式，就是我写一个抽象方法，实现接口所有方法，但是都没有语句，你要实现哪个方法，就重写哪个方法）</li></ul></li><li><p>GUI组件如何来处理它自己的事件？</p><ul><li>GUI组件可以处理它自己的事件，只要它实现相对应的事件监听器接口，并且把自己作为事件监听器</li></ul></li><li><p>Java的布局管理器比传统的窗口系统有哪些优势？</p><ul><li>Java使用布局管理器以一种一致的方式在所有的窗口平台上摆放组件。</li><li>因为布局管理器不会和组件的绝对大小和位置相绑定，所以他们能够适应跨窗口系统的特定平台的不同</li></ul></li><li><p>Java的Swing组件的种设计模式</p><ul><li>Java中的Swing组件使用了MVC(视图-模型-控制器)设计模式</li></ul></li><li><p>JDBC是允许用户在不同数据库之间做选择的一个抽象层。JDBC允许开发者用JAVA写数据库应用程序，而不需要关心底层特定数据库的细节</p></li><li><p>驱动(Driver)在JDBC中的角色</p><ul><li>JDBC驱动提供了特定厂商对JDBC API接口类的实现</li><li>驱动必须要提供java.sql包下面这些类的实现：Connection, Statement, PreparedStatement,CallableStatement, ResultSet和Driver</li></ul></li><li><p>Class.forName()方法作用</p><ul><li>初始化参数指定的类，并且返回此类对应的Class 对象</li><li>在初始化一个类，生成一个实例的时候，newInstance()方法使用类加载机制，new关键字是创建一个新类；从JVM的角度看，我们使用关键字new创建一个类的时候，这个类可以没有被加载。但是使用newInstance()方法的时候就要求： 1、这个类已经加载； 2、这个类已经连接了；完成上面两个步骤的正是Class的静态方法forName()所完成的，这个静态方法调用了启动类加载器，即加载 java API的那个加载器</li></ul></li><li><p>PreparedStatement比Statement有什么优势？</p><ul><li>PreparedStatements是预编译的，PreparedStatements实例包涵已编译的sql语句，所以其执行速度要快于statement对象，性能会更好</li><li>PreparedStatements作为statement的子类，继承了statement的所有方法，三种方法，excute,excuteQuery和excuteUpdate已被更改以使之不再需要参数</li><li>PreparedStatements的代码可读性，可维护性强于statement.</li><li>极大的提高了安全性</li></ul></li><li><p>什么时候使用CallableStatement？用来准备CallableStatement的方法是什么？</p><ul><li>CallableStatement用来执行存储过程。存储过程是由数据库存储和提供的，它还提供了安全性和模块化</li><li>存储过程可以接受输入参数，也可以有返回结果</li><li>准备一个CallableStatement的方法是：CallableStament.prepareCall();</li></ul></li><li><p>RMI:Java远程方法调用(Java RMI)是Java API对远程过程调用(RPC)提供的面向对象的等价形式，支持直接传输序列化的Java对象和分布式垃圾回收。远程方法调用可以看做是激活远程正在运行的对象上的方法的步骤。RMI对调用者是位置透明的，因为调用者感觉方法是执行在本地运行的对象上的。看下RMI的一些注意事项</p></li><li><p>RMI体系结构的基本原则</p><ul><li>RMI体系结构是基于一个非常重要的行为定义和行为实现相分离的原则。RMI允许定义行为的代码和实现行为的代码相分离，并且运行在不同的JVM上</li></ul></li><li><p>RMI体系结构分层</p><ul><li>存根和骨架层(Stub and Skeleton layer)：这一层对程序员是透明的，它主要负责拦截客户端发出的方法调用请求，然后把请求重定向给远程的RMI服务</li><li>远程引用层(Remote Reference Layer)：RMI体系结构的第二层用来解析客户端对服务端远程对象的引用。这一层解析并管理客户端对服务端远程对象的引用。连接是点到点的</li><li>传输层(Transport layer)：这一层负责连接参与服务的两个JVM。这一层是建立在网络上机器间的TCP/IP连接之上的。它提供了基本的连接服务，还有一些防火墙穿透策略</li></ul></li><li><p>RMI中的远程接口(Remote Interface)扮演了什么样的角色？</p><ul><li>远程接口用来标识哪些方法是可以被非本地虚拟机调用的接口。远程对象必须要直接或者是间接实现远程接口。实现了远程接口的类应该声明被实现的远程接口，给每一个远程对象定义构造函数，给所有远程接口的方法提供实现</li></ul></li><li><p>RMI中的远程接口(Remote Interface)扮演了什么样的角色？</p><ul><li>远程接口用来标识哪些方法是可以被非本地虚拟机调用的接口。远程对象必须要直接或者是间接实现远程接口。实现了远程接口的类应该声明被实现的远程接口，给每一个远程对象定义构造函数，给所有远程接口的方法提供实现。</li></ul></li><li><p>java.rmi.Naming类扮演了什么样的角色？</p><ul><li>java.rmi.Naming类用来存储和获取在远程对象注册表里面的远程对象的引用。Naming类的每一个方法接收一个URL格式的String对象作为它的参数</li></ul></li><li><p>RMI的绑定(Binding)</p><ul><li>绑定是为了查询找远程对象而给远程对象关联或者是注册以后会用到的名称的过程。远程对象可以使用Naming类的bind()或者rebind()方法跟名称相关联</li></ul></li><li><p>Naming类的bind()和rebind()方法有什么区别？</p><ul><li>bind()方法负责把指定名称绑定给远程对象，rebind()方法负责把指定名称重新绑定到一个新的远程对象。如果那个名称已经绑定过了，先前的绑定会被替换掉</li></ul></li><li><p>让RMI程序能正确运行有哪些步骤？</p><ul><li>编译所有的源文件</li><li>使用rmic生成stub</li><li>启动rmiregistry</li><li>启动RMI服务器</li><li>运行客户端程序</li></ul></li><li><p>RMI的stub扮演了什么样的角色？</p><ul><li>远程对象的stub扮演了远程对象的代表或者代理的角色。调用者在本地stub上调用方法，它负责在远程对象上执行方法。当stub的方法被调用的时候，会经历以下几个步骤：</li><li>初始化到包含了远程对象的JVM的连接</li><li>序列化参数到远程的JVM</li><li>等待方法调用和执行的结果</li><li>反序列化返回的值或者是方法没有执行成功情况下的异常</li><li>把值返回给调用者</li></ul></li><li><p>什么是分布式垃圾回收(DGC)？它是如何工作的？</p><ul><li>DGC叫做分布式垃圾回收。RMI使用DGC来做自动垃圾回收。因为RMI包含了跨虚拟机的远程对象的引用，垃圾回收是很困难的。DGC使用引用计数算法来给远程对象提供自动内存管理</li></ul></li><li><p>RMI中使用RMI安全管理器(RMISecurityManager)的目的是什么？</p><ul><li>RMISecurityManager使用下载好的代码提供可被RMI应用程序使用的安全管理器。如果没有设置安全管理器，RMI的类加载器就不会从远程下载任何的类。</li></ul></li><li><p>解释下Marshalling和demarshalling</p><ul><li>当应用程序希望把内存对象跨网络传递到另一台主机或者是持久化到存储的时候，就必须要把对象在内存里面的表示转化成合适的格式。这个过程就叫做Marshalling，反之就是demarshalling</li></ul></li><li><p>解释下Serialization和Deserialization</p><ul><li>Java提供了一种叫做对象序列化的机制，他把对象表示成一连串的字节，里面包含了对象的数据，对象的类型信息，对象内部的数据的类型信息等等</li><li>序列化可以看成是为了把对象存储在磁盘上或者是从磁盘上读出来并重建对象而把对象扁平化的一种方式。反序列化是把对象从扁平状态转化成活动对象的相反的步骤</li></ul></li></ol><h3 id="2016-10-10"><a href="#2016-10-10" class="headerlink" title="2016.10.10"></a>2016.10.10</h3><ol><li><p>什么是Servlet？</p><ul><li>Servlet是用来处理客户端请求并产生动态网页内容的Java类。</li><li>Servlet主要是用来处理或者是存储HTML表单提交的数据，产生动态内容，在无状态的HTTP协议下管理状态信息</li></ul></li><li><p>Servlet的体系结构</p><ul><li>所有的Servlet都必须要实现的核心的接口是javax.servlet.Servlet</li><li>每一个Servlet都必须要直接或者是间接实现这个接口，或者是继承javax.servlet.GenericServlet或者javax.servlet.http.HTTPServlet</li><li>最后，Servlet使用多线程可以并行的为多个请求服务</li></ul></li><li><p>Applet和Servlet有什么区别？</p><ul><li>Applet是运行在客户端主机的浏览器上的客户端Java程序。而Servlet是运行在web服务器上的服务端的组件</li><li>applet可以使用用户界面类，而Servlet没有用户界面，相反，Servlet是等待客户端的HTTP请求，然后为请求产生响应</li></ul></li><li><p>GenericServlet和HttpServlet区别</p><ul><li>GenericServlet是一个通用的协议无关的Servlet，它实现了Servlet和ServletConfig接口。继承自GenericServlet的Servlet应该要覆盖service()方法</li><li>若要开发一个能用在网页上服务于使用HTTP协议请求的Servlet，你的Servlet必须要继承自HttpServlet</li></ul></li><li><p>Servlet的生命周期</p><ul><li>1）对每一个客户端的请求，Servlet引擎载入Servlet，调用它的init()方法，完成Servlet的初始化</li><li>2）Servlet对象通过为每一个请求单独调用service()方法来处理所有随后来自客户端的请求</li><li>3）最后，调用Servlet的destroy()方法把Servlet删除掉</li></ul></li><li><p>doGet()方法和doPost()方法区别</p><ul><li>doGet：GET方法会把名值对追加在请求的URL后面。因为URL对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递</li><li>doPOST：POST方法通过把请求参数值放在请求体中来克服GET方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过POST请求传递的敏感信息对外部客户端是不可见的</li></ul></li><li><p>Web应用程序</p><ul><li>Web应用程序是对Web或者是应用服务器的动态扩展</li><li>有两种类型的Web应用：面向表现的和面向服务的。面向表现的Web应用程序会产生包含了很多种标记语言和动态内容的交互的web页面作为对请求的响应。而面向服务的Web应用实现了Web服务的端点(endpoint)</li></ul></li><li><p>什么是服务端包含(Server Side Include)？</p><ul><li>服务端包含(SSI)是一种简单的解释型服务端脚本语言，大多数时候仅用在Web上，用servlet标签嵌入进来</li><li>SSI最常用的场景把一个或多个文件包含到Web服务器的一个Web页面中。当浏览器访问Web页面的时候，Web服务器会用对应的servlet产生的文本来替换Web页面中的servlet标签</li></ul></li><li><p>Servlet链(Servlet Chaining)</p><ul><li>Servlet链是把一个Servlet的输出发送给另一个Servlet的方法。第二个Servlet的输出可以发送给第三个Servlet，依次类推。链条上最后一个Servlet负责把响应发送给客户端</li></ul></li><li><p>如何知道是哪一个客户端的机器正在请求你的Servlet？</p><ul><li>ServletRequest类可以找出客户端机器的IP地址或者是主机名</li><li>etRemoteAddr()方法获取客户端主机的IP地址，getRemoteHost()可以获取主机名</li></ul></li><li><p>HTTP响应的结构是怎么样的？</p><ul><li>状态码(Status Code)：描述了响应的状态。可以用来检查是否成功的完成了请求。请求失败的情况下，状态码可用来找出失败的原因。如果Servlet没有返回状态码，默认会返回成功的状态码HttpServletResponse.SC_OK</li><li>HTTP头部(HTTP Header)：它们包含了更多关于响应的信息。比如：头部可以指定认为响应过期的过期日期，或者是指定用来给用户安全的传输实体内容的编码格式</li><li>主体(Body)：它包含了响应的内容。它可以包含HTML代码，图片，等等。主体是由传输在HTTP消息中紧跟在头部后面的数据字节组成的</li></ul></li><li><p>什么是cookie？session和cookie有什么区别？</p><ul><li>cookie是Web服务器发送给浏览器的一块信息。浏览器会在本地文件中给每一个Web服务器存储cookie。以后浏览器在给特定的Web服务器发请求的时候，同时会发送所有为该服务器存储的cookie</li><li>无论客户端浏览器做怎么样的设置，session都应该能正常工作。客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session</li><li>在存储的数据量方面session和cookies也是不一样的。session能够存储任意的Java对象，cookie只能存储String类型的对象</li></ul></li><li><p>浏览器和Servlet通信使用的是HTTP协议</p></li><li><p>HTTP隧道:HTTP隧道是一种利用HTTP或者是HTTPS把多种网络协议封装起来进行通信的技术。因此，HTTP协议扮演了一个打通用于通信的网络协议的管道的包装器的角色。把其他协议的请求掩盖成HTTP的请求就是HTTP隧道</p></li><li><p>sendRedirect()和forward()方法有什么区别？</p><ul><li>sendRedirect()方法会创建一个新的请求，而forward()方法只是把请求转发到一个新的目标上</li><li>重定向(redirect)以后，之前请求作用域范围以内的对象就失效了，因为会产生一个新的请求，而转发(forwarding)以后，之前请求作用域范围以内的对象还是能访问的</li><li>一般认为sendRedirect()比forward()要慢</li></ul></li><li><p>什么是URL编码和URL解码？</p><ul><li>URL编码是负责把URL里面的空格和其他的特殊字符替换成对应的十六进制表示，反之就是解码</li></ul></li><li><p>什么是JSP页面？</p><ul><li>JSP页面是一种包含了静态数据和JSP元素两种类型的文本的文本文档</li><li>静态数据可以用任何基于文本的格式来表示，比如：HTML或者XML</li><li>JSP是一种混合了静态内容和动态产生的内容的技术</li></ul></li><li><p>JSP请求是如何被处理的？</p><ul><li>浏览器首先要请求一个以.jsp扩展名结尾的页面，发起JSP请求，然后，Web服务器读取这个请求，使用JSP编译器把JSP页面转化成一个Servlet类。</li><li>需要注意的是，只有当第一次请求页面或者是JSP文件发生改变的时候JSP文件才会被编译，然后服务器调用servlet类，处理浏览器的请求。一旦请求执行结束，servlet会把响应发送给客户端</li></ul></li><li><p>JSP优点</p><ul><li>JSP页面是被动态编译成Servlet的，因此，开发者可以很容易的更新展现代码</li><li>JSP页面可以被预编译</li><li>JSP页面可以很容易的和静态模板结合，包括：HTML或者XML，也可以很容易的和产生动态内容的代码结合起来</li><li>开发者可以提供让页面设计者以类XML格式来访问的自定义的JSP标签库</li><li>开发者可以在组件层做逻辑上的改变，而不需要编辑单独使用了应用层逻辑的页面。</li></ul></li><li><p>什么是JSP指令(Directive)？JSP中有哪些不同类型的指令？</p><ul><li>Directive是当JSP页面被编译成Servlet的时候，JSP引擎要处理的指令。Directive用来设置页面级别的指令，从外部文件插入数据，指定自定义的标签库。Directive是定义在 &lt;%@ 和 %&gt;之间的。下面列出了不同类型的Directive：</li><li>包含指令(Include directive)：用来包含文件和合并文件内容到当前的页面。</li><li>页面指令(Page directive)：用来定义JSP页面中特定的属性，比如错误页面和缓冲区。</li><li>Taglib指令： 用来声明页面中使用的自定义的标签库。</li></ul></li><li><p>JSP动作(JSP action)</p><ul><li>JSP动作以XML语法的结构来控制Servlet引擎的行为。当JSP页面被请求的时候，JSP动作会被执行。它们可以被动态的插入到文件中，重用JavaBean组件，转发用户到其他的页面，或者是给Java插件产生HTML代码。下面列出了可用的动作：</li><li>jsp:include-当JSP页面被请求的时候包含一个文件</li><li>jsp:useBean-找出或者是初始化Javabean</li><li>jsp:setProperty-设置JavaBean的属性</li><li>jsp:getProperty-获取JavaBean的属性</li><li>jsp:forward-把请求转发到新的页面</li><li>jsp:plugin-产生特定浏览器的代码。</li></ul></li><li><p>什么是Scriptlets？</p><ul><li>JSP技术中，scriptlet是嵌入在JSP页面中的一段Java代码。scriptlet是位于标签内部的所有的东西，在标签与标签之间，用户可以添加任意有效的scriplet</li></ul></li><li><p>声明(Decalaration)在哪里？</p><ul><li>声明跟Java中的变量声明很相似，它用来声明随后要被表达式或者scriptlet使用的变量。添加的声明必须要用开始和结束标签包起来</li></ul></li><li><p>什么是表达式(Expression)？</p><ul><li>【列表很长，可以分上、中、下发布】</li><li>JSP表达式是Web服务器把脚本语言表达式的值转化成一个String对象，插入到返回给客户端的数据流中。表达式是在&lt;%=和%&gt;这两个标签之间定义的</li></ul></li><li><p>隐含对象是什么意思？有哪些隐含对象？</p><ul><li>JSP隐含对象是页面中的一些Java对象，JSP容器让这些Java对象可以为开发者所使用。开发者不用明确的声明就可以直接使用他们。JSP隐含对象也叫做预定义变量。下面列出了JSP页面中的隐含对象：application、page、request、response、session、exception、out、config、pageContext</li></ul></li><li><p>面向对象软件开发的优点有哪些？</p><ul><li>代码开发模块化，更易维护和修改</li><li>代码复用</li><li>增强代码的可靠性和灵活性</li><li>增加代码的可理解性</li><li>面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象</li></ul></li><li><p>封装的定义和好处有哪些？</p><ul><li>封装给对象提供了隐藏内部特性和行为的能力。对象提供一些能被其他对象访问的方法来改变它内部的数据。在Java当中，有3种修饰符：public，private和protected。每一种修饰符给其他的位于同一个包或者不同包下面对象赋予了不同的访问权限。下面列出了使用封装的一些好处：</li><li>通过隐藏对象的属性来保护对象内部的状态</li><li>提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展</li><li>禁止对象之间的不良交互提高模块化</li><li>参考这个文档获取更多关于封装的细节和示例</li></ul></li><li><p>多态的定义？</p><ul><li>多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力</li><li>一个多态类型上的操作可以应用到其他类型的值上面</li></ul></li><li><p>继承的定义？</p><ul><li>继承给对象提供了从基类获取字段和方法的能力。继承提供了代码的重用行，也可以在不修改类的情况下给现存的类添加新特性</li></ul></li><li><p>抽象的定义？抽象和封装的不同点？</p><ul><li>抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开</li><li>抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 笔试 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>日系听歌向-测试网易云音乐插件</title>
      <link href="/20160823/clound-music-test/"/>
      <url>/20160823/clound-music-test/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h2 id="【日系RNB】【第01期】第1秒就被前奏秒杀系列"><a href="#【日系RNB】【第01期】第1秒就被前奏秒杀系列" class="headerlink" title="【日系RNB】【第01期】第1秒就被前奏秒杀系列"></a>【日系RNB】【第01期】第1秒就被前奏秒杀系列</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=788484796&auto=0&height=66"></iframe><br><a id="more"></a><br>1. JASMINE-sad to say<br>2. 果山サキ-さよなら、愛してた。<br>3. JASMINE-i’m in luv wit u [laid back remix]<br>4. Licana-Love Game<br>5. BRAVE HEART<br>6. 山口リサ-Stay with me<br>7. Nao’ymt-Okay_ S-key-A<br><br>## 【日系RNB】【第02期】第1秒就被前奏秒杀系列<br><br><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=788839682&auto=0&height=66"></iframe><ol><li>Licana-つづきのないストーリー</li><li>NERDHEAD Feat. AYUSE KOZUE-FORGET ABOUT U</li><li>JASMINE-I’ll be there</li><li>Licana-Next Stage</li><li>山口リサ - 明日へと…</li><li>果山サキ-ズルしないでちゃんと愛してよ</li><li>PURPLE REVEL Feat. TAATI-JULIA</li><li>YU-A-TELL ME TELL ME</li><li>青山テルマ-Kimini Aerukara… Feat. …</li></ol><h2 id="【日系RNB】【第03期】第1秒就被前奏秒杀系列"><a href="#【日系RNB】【第03期】第1秒就被前奏秒杀系列" class="headerlink" title="【日系RNB】【第03期】第1秒就被前奏秒杀系列"></a>【日系RNB】【第03期】第1秒就被前奏秒杀系列</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=789749314&auto=0&height=66"></iframe><ol><li>前奏-Story Of Us July</li><li>JAY’ED-Change </li><li>JASMINE-Best Partner</li><li>AYUSE KOZUE-Cry For You</li><li>真崎ゆか-Lady Luck</li><li>Yup’in-No matter what I say</li><li>西野カナ -Story</li><li>Fivesta-今でもI_Love_You</li><li>清水翔太 feat.加藤ミリヤ-FOREVER LOVE</li></ol><h2 id="【日系RNB】【歌手篇】第1秒就被前奏秒杀系列"><a href="#【日系RNB】【歌手篇】第1秒就被前奏秒杀系列" class="headerlink" title="【日系RNB】【歌手篇】第1秒就被前奏秒杀系列"></a>【日系RNB】【歌手篇】第1秒就被前奏秒杀系列</h2><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width="330" height="86" src="//music.163.com/outchain/player?type=3&id=786772895&auto=0&height=66"></iframe><ol><li>宇多田ヒカル - Merry Christmas Mr. Lawrence - FYI</li><li>KG-叶わない恋でも… duet with 滴草由実</li><li>傳田真央-泣きたくなるけど (Yusuke Tanaka Remix)</li><li>aimer-六等星の夜</li><li>西野カナ-君の声を feat.VERBAL</li><li>CHIHIRO-Liar</li><li>Dix-T-A Feat.Gipper &amp; 宏実（网易暂缺）</li><li>BRIGHT-大丈夫。</li><li>MAY’S-D…</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> 日系 </tag>
            
            <tag> ACG </tag>
            
            <tag> 流行 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>设计模式之学习UML类图和时序图</title>
      <link href="/20160724/design-pattern-uml/"/>
      <url>/20160724/design-pattern-uml/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="学习UML类图和时序图"><a href="#学习UML类图和时序图" class="headerlink" title="学习UML类图和时序图"></a>学习UML类图和时序图</h3><p>类图中各个类之间的关系； 能看懂类图中各个类之间的线条、箭头代表什么意思后，也就足够应对 日常的工作和交流； 同时，我们应该能将类图所表达的含义和最终的代码对应起来<br><a id="more"></a></p><h3 id="简单示例"><a href="#简单示例" class="headerlink" title="简单示例"></a>简单示例</h3><p><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_class_struct.jpg" alt="" title="UML类图"></p><ul><li>车的类图结构为\&lt;\&lt;abstract>>，表示车是一个抽象类；</li><li>它有两个继承类：小汽车和自行车；它们之间的关系为实现关系，使用带空心箭头的虚线表示；</li><li>小汽车为与SUV之间也是继承关系，它们之间的关系为泛化关系，使用带空心箭头的实线表示；</li><li>小汽车与发动机之间是组合关系，使用带实心箭头的实线表示；</li><li>学生与班级之间是聚合关系，使用带空心箭头的实线表示；</li><li>学生与身份证之间为关联关系，使用一根实线表示；</li><li>学生上学需要用到自行车，与自行车是一种依赖关系，使用带箭头的虚线表示；</li></ul><h3 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h3><ul><li>1.泛化关系(generalization)<ul><li>类的继承结构表现在UML中为：泛化(generalize)与实现(realize)</li><li>继承关系为 is-a的关系；两个对象之间如果可以用 is-a 来表示，就是继承关系：（..是..)</li><li>例如：汽车是车，狗是动物，地球是行星</li><li>泛化关系用一条带空心箭头的直接表示；如下图表示（A继承自B）<br><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalization.jpg" alt="" title="A-&gt;B"></li><li>例如：汽车在现实中有实现，可用汽车定义具体的对象；汽车与SUV之间为泛化关系；<br><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_generalize.jpg" alt="" title="泛化关系"><blockquote><ul><li>注：最终代码中，泛化关系表现为<em>继承非抽象类</em></li></ul></blockquote></li></ul></li><li>2.实现关系(realize)<ul><li>实现关系用一条带空心箭头的虚线表示</li><li>例如：eg：”车”为一个抽象概念，在现实中并无法直接用来定义对象；只有指明具体的子类(汽车还是自行车)，才 可以用来定义对象（”车”这个类在C++中用抽象类表示，在JAVA中有接口这个概念，更容易理解）<br><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_realize.jpg" alt="" title="实现关系"><blockquote><ul><li>注：最终代码中，实现关系表现为<em>继承抽象类</em></li></ul></blockquote></li></ul></li><li>3.聚合关系(aggregation)<ul><li>聚合关系用一条带空心菱形箭头的直线表示，如下图表示A聚合到B上，或者说B由A组成<br><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_aggregation.jpg" alt="" title="聚合关系"></li><li>聚合关系用于表示实体对象之间的关系，表示整体由部分构成的语义；例如一个部门由多个员工组成</li><li>与组合关系不同的是，整体和部分不是强依赖的，即使整体不存在了，部分仍然存在；例如， 部门撤销了，人员不会消失，他们依然存在</li></ul></li><li>4.组合关系(composition)<ul><li>组合关系用一条带实心菱形箭头直线表示，如下图表示A组成B，或者B由A组成<br><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_composition.jpg" alt="" title="组合关系"></li><li>与聚合关系相比相同之处：同样表示整体由部分构成的语义；比如公司由多个部门组成</li><li>但组合关系是一种强依赖的特殊聚合关系，如果整体不存在了，则部分也不存在了；例如， 公司不存在了，部门也将不存在了</li></ul></li><li>5.关联关系(association)<ul><li>关联关系是用一条直线表示的；它描述不同类的对象之间的结构关系；它是一种静态关系， 通常与运行状态无关，一般由常识等因素决定的；它一般用来定义对象之间静态的、天然的结构； 所以，关联关系是一种“强关联”的关系</li><li>例如：乘车人和车票之间就是一种关联关系；主板和PC主机之间的一种关联关系</li><li>关联关系默认不强调方向，表示对象间相互知道；如果特别强调方向，如下图，表示A知道B，但 B不知道A<br><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_association.jpg" alt="" title="关联关系"><blockquote><ul><li>注：在最终代码中，关联对象通常是<em>以成员变量的形式实现的</em></li></ul></blockquote></li></ul></li><li>6.依赖关系(dependency)<ul><li>依赖关系是用一套带箭头的虚线表示的；如下图表示A依赖于B；他描述一个对象在运行期间会用到另一个对象的关系<br><img src="http://design-patterns.readthedocs.io/zh_CN/latest/_images/uml_dependency.jpg" alt="" title="依赖关系"></li><li>与关联关系不同的是，它是一种临时性的关系，通常在运行期间产生，并且随着运行时的变化； 依赖关系也可能发生变化</li><li>依赖也有方向，其中双向依赖是一种非常糟糕的结构，一般都应该只保持单向依赖<blockquote><ul><li>注：在最终代码中，依赖关系体现为<em>类构造方法及类方法的传入参数</em>，箭头的指向为调用关系；依赖关系处理临时知道对方外，还是“使用”对方的方法和属性</li></ul></blockquote></li></ul></li></ul><h3 id="时序图"><a href="#时序图" class="headerlink" title="时序图"></a>时序图</h3><ul><li>为了展示对象之间的交互细节，后续对设计模式解析的章节，都会用到时序图；</li><li>时序图（Sequence Diagram）是显示对象之间交互的图，这些对象是按时间顺序排列的。时序图中显示的是参与交互的对象及其对象之间消息交互的顺序。</li><li>时序图包括的建模元素主要有：对象（Actor）、生命线（Lifeline）、控制焦点（Focus of control）、消息（Message）等等。</li><li>关于时序图，可以参考<a href="http://smartlife.blog.51cto.com/1146871/284874；" target="_blank" rel="noopener">http://smartlife.blog.51cto.com/1146871/284874；</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Design Pattern </tag>
            
            <tag> UML </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android面试要点总结</title>
      <link href="/20160715/android-interview-summary/"/>
      <url>/20160715/android-interview-summary/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="1-Java技术"><a href="#1-Java技术" class="headerlink" title="1.Java技术"></a>1.Java技术</h3><ul><li>1.1 Java基础<ul><li>对象、继承、多态理解</li><li>泛型作用及使用场景</li><li>枚举的特点及使用场景</li><li>线程sleep和wait的区别</li><li>Java反射机制</li><li>weak/soft/strong的区别</li><li>Object的hasCode()与equals()的区别和作用<a id="more"></a></li></ul></li><li><p>1.2 集合类</p><ul><li>Java常用集合类、区别和性能</li><li>并发相关集合类</li><li>部分常用集合类的内部实现方式</li></ul></li><li><p>1.3 多线程相关</p><ul><li>Thread、Runable、Callable、Futrue类关系和区别</li><li>JDK中默认提供哪些线程池，有何区别</li><li>线程同步有几种方式，分别阐述在项目中的用法</li><li>在理解默认线程池前提下，自己实现线程池</li></ul></li><li><p>1.4 字符</p><ul><li>注解的使用</li><li>注解的级别及意义</li><li>如何自定义注解</li></ul></li></ul><h3 id="2-Android技术"><a href="#2-Android技术" class="headerlink" title="2.Android技术"></a>2.Android技术</h3><ul><li><p>2.1 Android基础</p><ul><li>四大组件的意义及使用，生命周期回调及意义</li><li>AsynTask、Handle的使用</li><li>Android系统层次框架结构</li><li>AsynTask的实现方式</li><li>AsynTask使用的时候应该注意什么</li><li>Android常见的存储方式</li><li>Looper、Handler和MessageQueue的关系</li><li>Activity的启动流程（考察队Framework的熟悉程度）、</li><li>多进程开发注意事项（Application类区分进程，进程间内存不可见、进程间通讯方式）</li></ul></li><li><p>2.2 Resource相关</p><ul><li>.9图片的意义</li><li>style和theme的作用和用法</li><li>dpi、sp、px的区别以及转换关系</li><li>raw和assets的文件夹作用，二者的区别</li><li>Android系统如何在多个资源文件夹下查找匹配最合适的资源</li></ul></li><li><p>2.3 虚拟机</p><ul><li>Java内存模型</li><li>Android虚拟机特点</li><li>Dalvik和Art的区别</li><li>熟悉垃圾回收的实现机制，了解虚拟机的GC类型</li></ul></li><li><p>2.4 View相关</p><ul><li>常用组件的使用：ListView、RecyclerView及Adapter的使用</li><li>View之间的继承关系</li><li>Invalidate与postInvalidate的区别</li><li>自定义View的实现方式（根据项目经验询问相关条件）</li><li>onMeasure/onLayout/onDraw的作用</li><li>Paint、Matrix、Shader等绘制相关类的方法作用</li><li>详细描述事件分发机制</li></ul></li><li><p>2.5 动画</p><ul><li>Android动画的实现方式</li><li>Interpolatio类的意义和常用的Interpolator</li><li>ViewAnimation与属性动画有什么区别</li><li>如何自定义ViewAnimation</li><li>属性动画的实现原理</li></ul></li><li><p>2.6 图片处理</p><ul><li>一般图片中如何加载大图</li><li>图片压缩方式</li><li>如何不压缩图片加载高清图</li><li>图片加载过程中，一般会使用缓存，这个缓存的主要作用是什么</li><li>谈谈自己熟悉的图片加载框架</li></ul></li></ul><h3 id="3-项目经验"><a href="#3-项目经验" class="headerlink" title="3.项目经验"></a>3.项目经验</h3><ul><li><p>3.1 开发工具</p><ul><li>代码管理工具：SVN、Git</li><li>常用调试工具：Hierarchy Viewer、 DDMS等</li><li>CI工具：Lint检查，Findbugs，Jenkins</li><li>内存分析工具：dumpsys、memoinfo、MAT</li></ul></li><li><p>3.2 项目工程</p><ul><li>APP更新策略：推送/拉取</li><li>如何统一处理错误*   如何收集用户行为</li><li>日志管理有哪些要点？(Debug包开放，release包关闭，错误日志反馈)</li><li>打包方式Ant、Maven、Gradle</li><li>机型适配情况</li></ul></li><li><p>3.3 开发平台</p><ul><li>是否使用过第三方平台</li><li>常用开放平台的熟悉度(微信、QQ、微博、支付宝等常用的支付和分享)</li><li>是否进行过对第三方平台的统一封装？</li><li>是否自己开发过SDK？</li></ul></li><li><p>3.4 设计相关</p><ul><li>有哪些常用的设计模式、设计原则</li><li>设计模式在Android源码中的应用</li><li>设计模式在项目中的应用</li><li>项目中的分包方式</li><li>MVC在android中的应用，利弊</li><li>android项目中的常见层次结构,包划分</li><li>有没有设计过项目中的层级结构、包划分</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Android </tag>
            
            <tag> 笔试 </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Android Studio开发必备插件</title>
      <link href="/20160225/as-plugin/"/>
      <url>/20160225/as-plugin/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="插件安装：打开Preference-gt-Plugins-gt-Browse-Repositories在线安装即可"><a href="#插件安装：打开Preference-gt-Plugins-gt-Browse-Repositories在线安装即可" class="headerlink" title="插件安装：打开Preference&gt;Plugins&gt;Browse Repositories在线安装即可"></a>插件安装：打开Preference&gt;Plugins&gt;Browse Repositories在线安装即可</h3><ol><li>android-butterknife-zelezny<br>android-butterknife-zelezny 是根据butterknife定制的一款插件，能够方便快速初始化,博客地址：<a href="http://blog.csdn.net/djk_dong/article/details/47825095" target="_blank" rel="noopener">ButterknifePlugin</a><a id="more"></a><blockquote><p>注意：需要先导入butterknife包才能使用</p></blockquote></li><li>Gsonformat<br>可根据json数据快速生成java实体类<br>Gsonformat1<br>简单实体类<br>Gsonformat2<br>复杂实体类</li><li>Android Postfix Completion<br>Apc</li><li>AndroidAccessors<br>AndroidAccessors</li><li>Lifecycle Sorter<br>可以根据Activity或者fragment的生命周期对其生命周期方法位置进行先后排序，快捷键Ctrl + alt + K<br>Lifecycle<br>Ctrl+alt+K</li><li>JsonOnlineViewer<br>JsonOnlineViewer</li><li>CodeGlance<br>CodeGlance<br>8、findBugs-IDEA<br>顾名思义，就是帮你一起找bug的，当然Android Studio也提供了代码审查的功能（Analyze-Inspect Code…）<br>findBugs-IDEA</li><li>ADB WIFI<br>使用wifi无线调试你的app，无需root权限<br>Android wifi无线调试App新玩法ADB WIFI:<a href="http://www.jianshu.com/p/21d1b65d92a4" target="_blank" rel="noopener">http://www.jianshu.com/p/21d1b65d92a4</a><blockquote><p>转载：<a href="http://www.jianshu.com/p/6f5f818afe4b" target="_blank" rel="noopener">http://www.jianshu.com/p/6f5f818afe4b</a></p></blockquote></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Android Studio </tag>
            
            <tag> IDE </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Mac OS X 终端命令学习</title>
      <link href="/20151229/mac-terminal-using/"/>
      <url>/20151229/mac-terminal-using/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="Mac-OS-X-终端命令学习"><a href="#Mac-OS-X-终端命令学习" class="headerlink" title="Mac OS X 终端命令学习"></a>Mac OS X 终端命令学习</h3><ol><li>显示当前目录的路径<ul><li>pwd<a id="more"></a></li></ul></li><li><p>列出文件</p><ul><li>ls 参数 目录名</li><li>参数: -w 显示中文，-l 详细信息， -a 包括隐藏文件，每一行开头是 “d” 则为文件夹，开头是 “-” 则为文件。</li><li>例: 看看驱动目录下有什么：<pre><code> ls /System/Library/Extensions</code></pre></li></ul></li><li><p>打开目录</p><ul><li>cd 目录名</li><li>cd .. ：返回上一级目录</li><li>cd ../.. ：cd ../.. /..：返回上两级/三级目录</li><li>cd . ：当前目录</li><li>例：想到驱动目录下溜达一圈：<pre><code>   cd /System/Library/Extensions</code></pre></li></ul></li><li><p>建立新目录</p><ul><li>mkdir 目录名</li><li>例：在驱动目录下建一个备份目录<pre><code> backup：mkdir/System/Library/Extensions/backup</code></pre></li></ul></li><li><p>新建文件</p><ul><li>touch 文件名</li><li>例：在当前目录下建一个备份文件 backup：<pre><code> touch backup.txt</code></pre></li></ul></li><li><p>拷贝文件</p><ul><li>cp 参数 源文件 目标文件</li><li>例：想把桌面的 Natit.kext 拷贝到驱动目录中  <pre><code>   cp -R /User/用户名/Desktop/Natit.kext /System/Library/Extensions</code></pre></li><li>参数 R 表示对目录进行递归操作，kext 在图形界面下看起来是个文件，实际上是个文件夹。</li><li>把驱动目录下的所有文件备份到桌面 backup：<pre><code> cp -R /System/Library/Extensions/ /User/用户名/Desktop/backup</code></pre></li></ul></li><li><p>删除文件</p><ul><li>rm 参数 文件</li><li>参数－rf 表示递归和强制，千万要小心使用，如果执行了 rm -rf / 你的系统就全没了</li><li>例：想删除驱动的缓存：rm -rf /System/Library/Extensions.kextcache<pre><code>   rm -rf /System/Library/Extensions.mkext</code></pre></li></ul></li><li><p>移动文件</p><ul><li>mv 源文件 目标文件</li><li>例：想把 AppleHDA.Kext 移到桌面：<pre><code> mv /System/Library/Extensions/AppleHDA.kext /User/用户名/Desktop</code></pre></li></ul></li><li><p>文本编辑</p><ul><li>nano 文件名<pre><code> 例：编辑 Info.plist：nano /System/Library/Extensions/Natit.kext/Info.plist</code></pre></li></ul></li><li><p>清屏</p><ul><li>clear</li></ul></li><li><p>目录操作：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>mkdir    / 创建一个目录    / mkdir dirname</li><li>rmdir    / 删除一个目录    / rmdir dirname</li><li>mvdir    / 移动或重命名一个目录    / mvdir dir1 dir2</li><li>cd    / 改变当前目录    / cd dirname</li><li>pwd    / 显示当前目录的路径名    / pwd</li><li>ls    / 显示当前目录的内容    / ls -la</li></ul></li><li><p>文件操作：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>cat    / 显示或连接文件    / cat filename</li><li>od    / 显示非文本文件的内容    / od -c filename</li><li>cp    / 复制文件或目录    / cp file1 file2</li><li>rm    / 删除文件或目录    / rm filename</li><li>mv    / 改变文件名或所在目录    / mv file1 file2</li><li>find    / 使用匹配表达式查找文件    / find . -name “*.c” -print</li><li>file    / 显示文件类型    / file filename</li></ul></li><li><p>选择操作：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>head    / 显示文件的最初几行    / head -20 filename</li><li>tail    / 显示文件的最后几行    / tail -15 filename</li><li>cut    / 显示文件每行中的某些域    / cut -f1,7 -d: /etc/passwd</li><li>colrm    / 从标准输入中删除若干列    / colrm 8 20 file2</li><li>diff    / 比较并显示两个文件的差异    / diff file1 file2</li><li>sort    / 排序或归并文件    / sort -d -f -u file1</li><li>uniq    / 去掉文件中的重复行    / uniq file1 file2</li><li>comm    / 显示两有序文件的公共和非公共行    / comm file1 file2</li><li>wc    / 统计文件的字符数、词数和行数    / wc filename</li><li>nl    / 给文件加上行号    / nl file1 &gt;file2</li></ul></li><li><p>进程操作：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>ps    / 显示进程当前状态    / ps u</li><li>kill    / 终止进程    / kill -9 30142</li></ul></li><li><p>时间操作：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>date    / 显示系统的当前日期和时间    / date</li><li>cal    / 显示日历    / cal 8 1996</li><li>time    / 统计程序的执行时间    / time a.out</li></ul></li><li><p>网络与通信操作：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>telnet    / 远程登录    / telnet hpc.sp.net.edu.cn</li><li>rlogin    / 远程登录    / rlogin hostname -l username</li><li>rsh    / 在远程主机执行指定命令    / rsh f01n03 date</li><li>ftp    / 在本地主机与远程主机之间传输文件    / ftpftp.sp.net.edu.cn</li><li>rcp    / 在本地主机与远程主机 之间复制文件    / rcp file1 host1:file2</li><li>ping    / 给一个网络主机发送 回应请求    / ping hpc.sp.net.edu.cn</li><li>mail    / 阅读和发送电子邮件    / mail</li><li>write    / 给另一用户发送报文    / write username pts/1</li><li>mesg    / 允许或拒绝接收报文    / mesg n</li></ul></li><li><p>Korn Shell 命令：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>history    / 列出最近执行过的 几条命令及编号    / history</li><li>r    / 重复执行最近执行过的 某条命令    / r -2</li><li>alias    / 给某个命令定义别名    / alias del=rm -i</li><li>unalias    / 取消对某个别名的定义    / unalias del</li></ul></li><li><p>其它命令：</p><ul><li>命令名    / 功能描述    / 使用举例</li><li>uname    / 显示操作系统的有关信息    / uname -a</li><li>clear    / 清除屏幕或窗口内容    / clear</li><li>env    / 显示当前所有设置过的环境变量    / env</li><li>who    / 列出当前登录的所有用户    / who</li><li>whoami    / 显示当前正进行操作的用户名    / whoami</li><li>tty    / 显示终端或伪终端的名称    / tty</li><li>stty    / 显示或重置控制键定义    / stty -a</li><li>du    / 查询磁盘使用情况    / du -k subdir</li><li>df    / 显示文件系统的总空间和可用空间    / df</li><li>w    / 显示当前系统活动的总信息    / w</li></ul></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> OS X </tag>
            
            <tag> bash </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Atom使用体验</title>
      <link href="/20151228/atom-using/"/>
      <url>/20151228/atom-using/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一-Atom安装"><a href="#一-Atom安装" class="headerlink" title="一.Atom安装"></a>一.Atom安装</h3><ol><li>打开<a href="https://atom.io/" target="_blank" rel="noopener">https://atom.io/</a> 下载Windows安装包安装即可</li><li>这里是Atom1.9版本所有平台下载链接<a id="more"></a><h3 id="二-Atom主题安装"><a href="#二-Atom主题安装" class="headerlink" title="二.Atom主题安装"></a>二.Atom主题安装</h3>个人很喜欢aom-material-ui这个主题（Sublime也使用）：<a href="https://atom.io/themes/atom-material-ui" target="_blank" rel="noopener">https://atom.io/themes/atom-material-ui</a> - （A dark UI theme for Atom that follows Google’s Material Design Guidelines）</li><li>可以直接使用官方推荐的安装方式<ul><li>apm install atom-material-ui</li><li>apm install atom-material-syntax</li><li>apm install atom-material-syntax-light</li><li>apm install atom-material-syntax-dark</li></ul></li><li>由于我在安装的时候node-gyp报错，所有我是先把主题下载到：C:\Users\lecym.atom\packages（这是Window平台lecym是用户名，Mac下cd ~/.atom/packages即可）<ul><li>切换到C:\Users\lecym.atom\packages，执行以下命令即可完成安装<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/atom-material/atom-material-ui<span class="token function">cd</span> <span class="token operator">&lt;</span>Package 路径<span class="token operator">></span> <span class="token comment" spellcheck="true"># cd emmet-atom</span><span class="token function">npm</span> <span class="token function">install</span></code></pre></li><li>其余三个安装方式同理<pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/atom-material/atom-material-syntax<span class="token function">cd</span> <span class="token operator">&lt;</span>Package 路径<span class="token operator">></span> <span class="token comment" spellcheck="true"># cd emmet-atom</span><span class="token function">npm</span> <span class="token function">install</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/atom-material/atom-material-syntax-light<span class="token function">cd</span> <span class="token operator">&lt;</span>Package 路径<span class="token operator">></span> <span class="token comment" spellcheck="true"># cd emmet-atom</span><span class="token function">npm</span> <span class="token function">install</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/atom-material/atom-material-syntax-dark<span class="token function">cd</span> <span class="token operator">&lt;</span>Package 路径<span class="token operator">></span> <span class="token comment" spellcheck="true"># cd emmet-atom</span><span class="token function">npm</span> <span class="token function">install</span></code></pre></li></ul></li><li>图图图图：<br><img src="http://ob9ev3u0o.bkt.clouddn.com/ATOM1.png" alt="light"><br><img src="http://ob9ev3u0o.bkt.clouddn.com/ATOM2.png" alt="dark"></li></ol><h3 id="三-Atom插件安装"><a href="#三-Atom插件安装" class="headerlink" title="三.Atom插件安装"></a>三.Atom插件安装</h3><ol><li>Atom 自带了一个 apm 的 Package 管理工具-打开File/Setting/Package，可用直接使用自带的安装方式</li><li><p>离线安装方式和安装主题方式类似，由于我使用自带安装方式安装报错(和安装主题时报错一样)：</p><pre class=" language-bash"><code class="language-bash">gyp info it worked <span class="token keyword">if</span> it ends with okgyp info using node-gyp@2.0.2gyp info using node@0.10.40 <span class="token operator">|</span> win32 <span class="token operator">|</span> ia32gyp http GET https://atom.io/download/atom-shell/v0.37.8/node-v0.37.8.tar.gzgyp WARN <span class="token function">install</span> got an error, rolling back <span class="token function">install</span>gyp</code></pre><ul><li><p>打开<a href="https://atom.io/packages/，搜索需要安装的插件" target="_blank" rel="noopener">https://atom.io/packages/，搜索需要安装的插件</a></p></li><li><p>打开插件链接，里面有安装方法与主题安装方式一模一样</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> ~/.atom/packages<span class="token function">git</span> clone https://github.com/emmetio/emmet-atom<span class="token function">cd</span> emmet-atom<span class="token function">npm</span> <span class="token function">install</span></code></pre></li></ul></li><li><p>比较优秀的插件</p><ul><li>autocomplete-plus：自动补全代码可选择各种语言</li><li>emmet：Web前端开发神器，它使用仿CSS选择器的语法来生成代码，大大提高了HTML/CSS代码编写的速度</li><li>linter-jshint：它有一个配置文件.jshintrc，这个文件告诉jshint执行的检查规则，通过jshint能发现代码中存在的问题，可以及时避免bug的发生</li><li>highlight-selected：顾名思义高亮当前所选文字，双击后全文这个词或者变量都会高亮</li><li>git-control：atom对git的支持还是不如完整IDE开发工具好用，不过插件还是能弥补这个问题。git-control能提供一个git gui来来完成git的版本管理，非常方便操作</li><li>highlight-line：对光标所在行以高亮显示，从而可以准确定位光标所在的行</li><li>docblockr：可以帮助你快速的生成注释，很多高级的编辑器都有这个功能，只是atom没有内置实现</li><li>simplified-chinese-menu：可以使用简体中文插件来汉化atom编辑器（基本也不用，就那么几个词也不难）</li><li>atom-beautify：代码格式化，可以对html、css、js等文件进行格式美化，使用时需要先选中要美化的代码</li><li>atom-ternjs：能对一个对象中拥有的对外提供的属性和方法都能通过suggest的形式提示出来，能对一个对象对外提供的接口有一个选择过程</li></ul></li><li>好玩的插件<ul><li>activate-power-mode：给写代码带来的超爽视觉震撼<br><img src="http://ob9ev3u0o.bkt.clouddn.com/atom-code1.gif" alt="atom-code1"><br><img src="http://ob9ev3u0o.bkt.clouddn.com/atom-code2.gif" alt="atom-code2"></li><li>atom-miku：让初音未来歌姬来鼓励你撸代码，Miku能从你的代码中得到获得充能！<br><img src="http://ob9ev3u0o.bkt.clouddn.com/atom-miku.gif" alt="atom-miku"></li></ul></li></ol><h3 id="四-Atom体验"><a href="#四-Atom体验" class="headerlink" title="四.Atom体验"></a>四.Atom体验</h3><ol><li>Sublime 是原生界面，脚本用的是 python；</li><li>Atom 应该是基于 Chromium Embedded Framework，基本上就是个 web app，源码都是 CoffeeScript 写的，连界面都可以用 CSS 来自定义</li><li>除了基本的操作和界面外，和 Sublime 最大的差别在于扩展性。Atom 非常强调模块化，很多默认功能也都是开源的模块。自带友好的模块管理界面，相比之下 Sublime 需要自己手动安装，或是依赖第三方的 package control</li><li>Atom 的扩展也是用 JS 或者 Coffee 在 Node + webkit 的环境下开发，并且可以使用 npm 的包，这对于前端和 Node 开发者是很有诱惑力的，需要的话完全可以把 Atom 打造成一个 IDE</li><li>一个明显的缺点是，启动和开文件速度明显不如 Sublime 3，因为Atom比较大</li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> Atom </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hexo博客搭建</title>
      <link href="/20151124/hexo-blog-build/"/>
      <url>/20151124/hexo-blog-build/</url>
      
        <content type="html"><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="/assets/css/APlayer.min.css"><script src="/assets/js/APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="一-环境搭建"><a href="#一-环境搭建" class="headerlink" title="一.环境搭建"></a>一.环境搭建</h3><ol><li>安装git<ul><li>Mac OSX下:安装Xcode即可/或者安装命令行工具</li><li>Windows下:安装git bash<a id="more"></a></li></ul></li><li><p>安装node.js</p><ul><li><p>1）Mac OSX下:首先安装Ruby环境，然后安装HomeBrew（详情Google）</p><pre class=" language-bash"><code class="language-bash">$ ruby -e "<span class="token variable"><span class="token variable">$(</span>curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install<span class="token variable">)</span></span>”</code></pre></li><li>2）使用Homebrew 安装 Node.js</li></ul></li></ol><pre><code>```bash$ brew update$ brew install node```- 3）Windows/OSX下也可以进入[Node.js官网](https://nodejs.org/en/)下载安装包安装- 4）一般 Node modules 通常被安装在每个项目的本地文件夹 node_modules，Npm 使用(更详细的命令操作参考百度/Google)```bash$ npm install &lt;package&gt;     # 安装在本地项目中$ npm install -g &lt;package&gt;  # 安装在全局```</code></pre><h3 id="二-安装Hexo（参考Hexo官网）"><a href="#二-安装Hexo（参考Hexo官网）" class="headerlink" title="二.安装Hexo（参考Hexo官网）"></a>二.安装Hexo（参考<a href="https://hexo.io/" target="_blank" rel="noopener">Hexo官网</a>）</h3><ol><li><p>在Finder中建立新的文件夹Hexo，cd进入这个目录下(推荐使用iTerm2)进行操作</p><pre class=" language-bash"><code class="language-bash"> $ <span class="token function">cd</span> /Users/weico/Hexo    <span class="token comment" spellcheck="true">#这是我的电脑</span> $ <span class="token function">npm</span> <span class="token function">install</span> hexo-cli -g $ hexo init blog $ <span class="token function">cd</span> blog $ <span class="token function">npm</span> <span class="token function">install</span> $ hexo g    <span class="token comment" spellcheck="true">#生成静态博客</span> $ hexo s        <span class="token comment" spellcheck="true">#也可以指定端口$ hexo server -p 5000</span></code></pre></li><li><p>Hexo简单使用</p><ul><li><p>1）常用命令</p><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"postName"</span> <span class="token comment" spellcheck="true">#新建文章</span>$ hexo new page <span class="token string">"pageName"</span> <span class="token comment" spellcheck="true">#新建页面</span>$ hexo generate <span class="token comment" spellcheck="true">#生成静态页面至public目录</span>$ hexo server <span class="token comment" spellcheck="true">#开启预览访问端口（默认端口4000，'ctrl + c'关闭server）</span>$ hexo deploy <span class="token comment" spellcheck="true">#将.deploy目录部署到GitHub</span>$ hexo <span class="token function">help</span>  <span class="token comment" spellcheck="true"># 查看帮助</span>$ hexo version  <span class="token comment" spellcheck="true">#查看Hexo的版本</span></code></pre></li><li><p>2）复合命令</p><pre class=" language-bash"><code class="language-bash">$ hexo deploy -g  <span class="token comment" spellcheck="true">#生成加部署</span>$ hexo server -g  <span class="token comment" spellcheck="true">#生成加预览</span>$ hexo cl <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d <span class="token operator">&amp;&amp;</span> hexo cl</code></pre></li><li><p>3）命令简写</p><pre class=" language-bash"><code class="language-bash">$ hexo n <span class="token operator">==</span> hexo new$ hexo g <span class="token operator">==</span> hexo generate$ hexo s <span class="token operator">==</span> hexo server$ hexo d <span class="token operator">==</span> hexo deploy</code></pre></li></ul></li><li><p>部署到GitHub</p><ul><li><p>1）首先设置你的用户名密码</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">git</span> config --global user.email <span class="token string">"bu.ru@qq.com"</span>$ <span class="token function">git</span> config --global user.name <span class="token string">"bruce-sha"</span></code></pre></li><li><p>2）生成密钥</p><pre class=" language-bash"><code class="language-bash">$ ssh-keygen -t rsa -C <span class="token string">"bu.ru@qq.com"</span></code></pre></li><li>3）到/Users/用户名/.ssh下打开.pub文件将其添加到Github上的SSH Key</li><li>4）执行npm install hexo-deployer-git –save ## 安装部署所需要的插件</li><li><p>5）部署到Github前需要配置_config.yml文件，首先找到下面的内容</p><pre><code># Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy:type:# 将上面内容修改为：# Deployment## Docs: http://hexo.io/docs/deployment.htmldeploy:type: git    #这里使用git，而不使用githubrepository: git@github.com:lecymeng/lecymeng.github.io.git    #这是我的Github账户branch: master    #分支</code></pre></li></ul></li><li><p>安装插件</p><ul><li><p>1）sitemap插件安装、使用-可以将你站点地图提交给搜索引擎，文件路径\sitemap.xml</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap</code></pre><p><code>`</code></p><h1 id="Extensions"><a href="#Extensions" class="headerlink" title="Extensions"></a>Extensions</h1><p>Plugins:</p></li><li><p>hexo-generator-sitemap</p><p>#sitemap<br>sitemap:<br>path: sitemap.xml<br><code>`</code></p></li><li><p>2）feed插件安装、使用-RSS的生成插件，你可以在配置显示你站点的RSS，文件路径\atom.xml</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-feed</code></pre><p><code>`</code></p><h1 id="Extensions-1"><a href="#Extensions-1" class="headerlink" title="Extensions"></a>Extensions</h1><p>Plugins:</p></li><li>hexo-generator-feed</li><li>hexo-generator-sitemap<br>#Feed Atom<br>feed:<br>type: atom<br>path: atom.xml<br>limit: 20<br><code>`</code></li></ul></li><li><p>公益404页面</p><ul><li><p>腾讯公益404页面-在主题的source目录下创建404.html，内容如下</p><pre class=" language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE HTML></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>content-type<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/html;charset<span class="token punctuation">=</span>utf-8;<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>IE<span class="token punctuation">=</span>edge,chrome<span class="token punctuation">=</span>1<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>all<span class="token punctuation">"</span></span> <span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>robots<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>index,follow<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text/javascript<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>http://www.qq.com/404/search_children.js<span class="token punctuation">"</span></span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span> <span class="token attr-name">homePageUrl</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>your site url <span class="token punctuation">"</span></span> <span class="token attr-name">homePageName</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>回到我的主页<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script language-javascript"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span></code></pre></li></ul></li><li><p>主题：raytaylorism</p><ul><li>1）修改 _config.yml 中的theme一项的值为raytaylorism</li><li><p>2）由于本主题使用了Data Files数据文件和额外的layout文件，所以请复制以下文件到你的博客目录中，否则在启动server时可能会报错</p><pre><code>复制yourblog/themes/raytaylorism/_data文件夹到yourblog/source目录下复制yourblog/themes/raytaylorism/_md/下所有文件夹（about和reading）到yourblog/source目录下</code></pre></li><li><p>3）在你的yourblog/_config.yml配置文件的#pagination的位置添加下面配置（禁用归档、标签、目录页面的分页功能）<br><img src="http://ww2.sinaimg.cn/large/006y8lVagw1f8or5n67q0j311e0r50ze.jpg" alt="Google analys"></p><blockquote><p>参考<a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism" target="_blank" rel="noopener">https://github.com/raytaylorlin/hexo-theme-raytaylorism</a></p></blockquote><pre><code>archive_generator:per_page: 0tag_generator:per_page: 0category_generator:per_page: 0</code></pre></li></ul></li><li><p>我遇到的Error</p><ul><li><p>1）hexo ERROR Deployer not found: github，不能部署到github。</p><pre><code>解决办法：1.安装 npm install hexo-deployer-git –save；2.将Hexo的配置文件_config.yml中的deploy 的 type由github改为git</code></pre></li><li>3）生成SSH key时，在那个目录下执行的ssh-keygen -t rsa -C “<a href="mailto:xxxx@xxxx.com" target="_blank" rel="noopener">xxxx@xxxx.com</a>”就会在那生成.pub文件，并不是在.ssh里面QAQ</li><li>4）安装的时候最好加上sudo</li></ul></li><li><p>参考教程</p><ul><li>1）<a href="http://iread.io/2015/09/hexo-guide-3/" target="_blank" rel="noopener">http://iread.io/2015/09/hexo-guide-3/</a></li><li>2）<a href="http://www.cnblogs.com/zhcncn/p/4097881.html" target="_blank" rel="noopener">http://www.cnblogs.com/zhcncn/p/4097881.html</a></li><li>3）<a href="http://www.jianshu.com/p/858ecf233db9" target="_blank" rel="noopener">http://www.jianshu.com/p/858ecf233db9</a></li></ul></li></ol><blockquote><p>2016.03.29更新</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Node.js </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
