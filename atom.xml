<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Weicools</title>
  
  <subtitle>Weicools&#39; blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://www.weicools.com/"/>
  <updated>2019-05-13T08:10:00.347Z</updated>
  <id>https://www.weicools.com/</id>
  
  <author>
    <name>Weicools</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android TextViews</title>
    <link href="https://www.weicools.com/20181210/textviews/"/>
    <id>https://www.weicools.com/20181210/textviews/</id>
    <published>2018-12-10T03:28:27.000Z</published>
    <updated>2019-05-13T08:10:00.347Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Autosizing-TextViews&quot;&gt;&lt;a href=&quot;#Autosizing-TextViews&quot; class=&quot;headerlink&quot; title=&quot;Autosizing TextViews&quot;&gt;&lt;/a&gt;Autosizing TextViews&lt;/h2&gt;&lt;p&gt;使用Android 8.0（API级别26）及更高版本，可以让 &lt;code&gt;TextView&lt;/code&gt;文本大小自动扩展或收缩，以根据其&lt;code&gt;TextView&lt;/code&gt;特征和边界填充其布局 。此设置可以更轻松地使用动态内容优化不同屏幕上的文本大小。&lt;/p&gt;
&lt;p&gt;Support Library 26.0完全支持 &lt;code&gt;TextView&lt;/code&gt;在Android 8.0（API级别26）之前运行Android版本的设备上的自动调整功能。该库提供对Android 4.0（API级别14）及更高版本的支持。该&lt;code&gt;android.support.v4.widget&lt;/code&gt; 软件包含&lt;code&gt;TextViewCompat&lt;/code&gt;以向后兼容方式访问功能的类&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
      <category term="Widget" scheme="https://www.weicools.com/tags/Widget/"/>
    
  </entry>
  
  <entry>
    <title>比较合适的Hexo多设备同步方法</title>
    <link href="https://www.weicools.com/20181111/hexo-sync-on-multidevice/"/>
    <id>https://www.weicools.com/20181111/hexo-sync-on-multidevice/</id>
    <published>2018-11-11T05:30:10.000Z</published>
    <updated>2019-05-13T08:10:00.334Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;经常我们有一个场景：需要在公司或者家庭多个电脑完成Hexo的博客撰写和发布工作。这就涉及到Hexo多电脑的同步问题。&lt;/p&gt;
&lt;p&gt;网上的方案基本上都是多分支方案，也就是在同一个仓库创建两个分支：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Hexo分支 – 用来保存所有Hexo的源文件&lt;/li&gt;
&lt;li&gt;master分支 – 用来保存Hexo生成的博客文件&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;在创建GitHub Pages或者Coding Pages时，以master分支为pages分支。&lt;br&gt;Hexo的deploy指向master分支部署pages，git的管理指向Hexo分支。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hexo" scheme="https://www.weicools.com/tags/Hexo/"/>
    
      <category term="Node.js" scheme="https://www.weicools.com/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>EventBus 源码解析</title>
    <link href="https://www.weicools.com/20180913/source-code-analysis-eventbus/"/>
    <id>https://www.weicools.com/20180913/source-code-analysis-eventbus/</id>
    <published>2018-09-13T15:18:12.000Z</published>
    <updated>2019-05-13T08:10:00.344Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;EventBus简介&quot;&gt;&lt;a href=&quot;#EventBus简介&quot; class=&quot;headerlink&quot; title=&quot;EventBus简介&quot;&gt;&lt;/a&gt;EventBus简介&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;http://a.codekk.com/detail/Android/Trinea/EventBus%20%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EventBus是Android端优化的publish/subscribe消息总线，简化了应用程序内各组件间、组件与后台线程的通信，主要由三个部分组成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;事件Event: 可以是任意对象，通过事件的发布者将事件进行传递&lt;/li&gt;
&lt;li&gt;事件订阅者Subscriber: 接收特定事件&lt;/li&gt;
&lt;li&gt;事件发布者Publisher: 用于通知Subscriber有事件发生，可以在任意线程任意位置发送事件&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Telegram SS代理设置</title>
    <link href="https://www.weicools.com/20180514/telegram-ss-proxy/"/>
    <id>https://www.weicools.com/20180514/telegram-ss-proxy/</id>
    <published>2018-05-14T07:12:27.000Z</published>
    <updated>2019-05-13T08:10:00.346Z</updated>
    
    <summary type="html">
    
      &lt;p&gt;本次测试的是Mac ShadowsocksX-NG + Telegram&lt;br&gt;&lt;img src=&quot;http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064147.png&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;Shadowsocks&quot;&gt;&lt;a href=&quot;#Shadowsocks&quot; class=&quot;headerlink&quot; title=&quot;Shadowsocks&quot;&gt;&lt;/a&gt;Shadowsocks&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://github.com/shadowsocks/ShadowsocksX-NG/releases&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ShadowsocksX-NG&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;打开偏好设置，高级选项，查看SOCKS5端口&lt;br&gt; &lt;img src=&quot;http://blog-1251678165.coscd.myqcloud.com/2018-05-14-064557.png&quot; alt=&quot;&quot;&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>Git使用填坑</title>
    <link href="https://www.weicools.com/20180112/git-problem/"/>
    <id>https://www.weicools.com/20180112/git-problem/</id>
    <published>2018-01-12T06:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.331Z</updated>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Git使用常见错误&quot;&gt;&lt;a href=&quot;#Git使用常见错误&quot; class=&quot;headerlink&quot; title=&quot;Git使用常见错误&quot;&gt;&lt;/a&gt;Git使用常见错误&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;填坑，Git使用过程碰到的常见错误&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;Git配置&quot;&gt;&lt;a href=&quot;#Git配置&quot; class=&quot;headerlink&quot; title=&quot;Git配置&quot;&gt;&lt;/a&gt;Git配置&lt;/h3&gt;
    
    </summary>
    
    
      <category term="Git" scheme="https://www.weicools.com/tags/Git/"/>
    
      <category term="Github" scheme="https://www.weicools.com/tags/Github/"/>
    
      <category term="填坑" scheme="https://www.weicools.com/tags/%E5%A1%AB%E5%9D%91/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 适配器模式</title>
    <link href="https://www.weicools.com/20171210/adapter-pattern/"/>
    <id>https://www.weicools.com/20171210/adapter-pattern/</id>
    <published>2017-12-10T03:18:27.000Z</published>
    <updated>2019-05-13T08:10:00.323Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;适配器模式把一个类的接口变换成客户端所期待的另外一个接口，从而使原本因接口不匹配而无法一起工作的两个类能够在一起工作&lt;br&gt;适配器分为类适配器和对象适配器两张&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>制作多功能启动U盘, 轻松完成系统安装和维护</title>
    <link href="https://www.weicools.com/20171202/make-multiboot-u-disk/"/>
    <id>https://www.weicools.com/20171202/make-multiboot-u-disk/</id>
    <published>2017-12-02T03:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.354Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;本教程仅适用于EFI引导的电脑，安装的系统也需要支持EFI引导。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;平时给自己或者别人重装系统的频率还算挺高的，因为有时候要装 macOS 有时候要装 Windows，每次都要重新把安装包刷到我的 U 盘里，不但非常折腾，而且对寿命也不好。于是整理了一下把安装盘都塞到一个 U 盘里，这个 U 盘不仅可以选择启动多个系统，而且当某一个系统的安装盘需要更新的时候，并不需要抹掉整个盘，只要单独处理对应的分区就好，非常方便。启动的时候效果是这样的：&lt;br&gt;
    
    </summary>
    
    
      <category term="macSierra" scheme="https://www.weicools.com/tags/macSierra/"/>
    
      <category term="Linux" scheme="https://www.weicools.com/tags/Linux/"/>
    
      <category term="Winodws" scheme="https://www.weicools.com/tags/Winodws/"/>
    
      <category term="PE" scheme="https://www.weicools.com/tags/PE/"/>
    
  </entry>
  
  <entry>
    <title>暗影精灵2Plus GTX1060独显亮度调节实现</title>
    <link href="https://www.weicools.com/20170826/hp2plus-gtx1060-using/"/>
    <id>https://www.weicools.com/20170826/hp2plus-gtx1060-using/</id>
    <published>2017-08-25T17:47:53.000Z</published>
    <updated>2019-05-13T08:10:00.350Z</updated>
    
    <summary type="html">
    
      &lt;h1 id=&quot;暗影精灵2Plus-GTX1060独显亮度调节实现&quot;&gt;&lt;a href=&quot;#暗影精灵2Plus-GTX1060独显亮度调节实现&quot; class=&quot;headerlink&quot; title=&quot;暗影精灵2Plus GTX1060独显亮度调节实现&quot;&gt;&lt;/a&gt;暗影精灵2Plus GTX1060独显亮度调节实现&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;Foreword：本来打算毕业工作了再换本的，但是实在受不了之前那个低压U本Yoga13了，开个IDE和模拟器就快炸了，玩个LOL一打团就变PPT玩个蛇皮；然后然后看到&lt;strong&gt;&lt;code&gt;暗影精灵2Plus&lt;/code&gt;&lt;/strong&gt;七代U版本比首发价还低1000就忍不住剁手了🤣，总体体验：性能不用说，i7+GTX1060甜品显卡基本都可以玩，72％色域IPS屏幕也是很棒，缺点17.3寸比较重、台达电源230W好大一块砖、键盘方向键反人类🙃&lt;br&gt;&lt;img src=&quot;http://ob9ev3u0o.bkt.clouddn.com/2017-08-27-023638.jpg&quot; alt=&quot;Order&quot;&gt;&lt;br&gt;回到主题：这本惠普自己把&lt;strong&gt;&lt;code&gt;核显HD630屏蔽&lt;/code&gt;&lt;/strong&gt;了，Windows设备管理器都看不到😉（Windows上不插电源没法玩游戏🙃），Hackintosh岂不是可以直接用GTX1060了😉美滋滋，虽然是用上了但是&lt;strong&gt;&lt;code&gt;亮度调节&lt;/code&gt;&lt;/strong&gt;一直不行，直到昨天才搞定。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="macSierra" scheme="https://www.weicools.com/tags/macSierra/"/>
    
      <category term="Hackintosh" scheme="https://www.weicools.com/tags/Hackintosh/"/>
    
      <category term="DSDT" scheme="https://www.weicools.com/tags/DSDT/"/>
    
  </entry>
  
  <entry>
    <title>注入EDID</title>
    <link href="https://www.weicools.com/20170818/inject-edid/"/>
    <id>https://www.weicools.com/20170818/inject-edid/</id>
    <published>2017-08-18T06:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.336Z</updated>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;打开DarwinDumper.app，只选择EDID然后点击run，默认会在&lt;code&gt;/Applications/DarwinDumperReports/&lt;/code&gt;目录下生成，比如：&lt;code&gt;/Applications/DarwinDumperReports/000_2017-08-23_10-44-07_MacBookPro14,3/DarwinDumper_2.8.8_INSYDE_Corp._X64_Unknown_weicools/EDID&lt;/code&gt;&lt;br&gt; &lt;img src=&quot;http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034014.jpg&quot; alt=&quot;DarwinDumper&quot;&gt;&lt;br&gt; &lt;img src=&quot;http://ob9ev3u0o.bkt.clouddn.com/2017-08-23-034403.jpg&quot; alt=&quot;DarwinDumperReports&quot;&gt;
    
    </summary>
    
    
      <category term="macSierra" scheme="https://www.weicools.com/tags/macSierra/"/>
    
      <category term="EDID" scheme="https://www.weicools.com/tags/EDID/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 责任链模式</title>
    <link href="https://www.weicools.com/20170318/chain-of-responsibility/"/>
    <id>https://www.weicools.com/20170318/chain-of-responsibility/</id>
    <published>2017-03-18T04:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.325Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 命令模式</title>
    <link href="https://www.weicools.com/20170318/command-pattern/"/>
    <id>https://www.weicools.com/20170318/command-pattern/</id>
    <published>2017-03-18T04:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.325Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;命令模式是行为型模式之一。总体来说并不难理解，只是比较繁琐，他会将简单的调用关系解耦成多个部分，增加类的复杂度，但是即便如此，命令模式的结构依然清晰。&lt;br&gt;定义: 将一个请求封装成一个对象，从而让用户使用不同的请求把客户端参数化；对请求排队或者记录请求日志，以及支持可撤销的操作。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 组合模式</title>
    <link href="https://www.weicools.com/20170318/composite-pattern/"/>
    <id>https://www.weicools.com/20170318/composite-pattern/</id>
    <published>2017-03-18T04:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.325Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;组合模式也称为部分-整体模式，结构型设计模式之一。组合模式比较简单，它将一组相似的对象当作一个对象处理，并根据树状结构来组合对象&lt;br&gt;定义：将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 迭代器模式</title>
    <link href="https://www.weicools.com/20170318/iterator-pattern/"/>
    <id>https://www.weicools.com/20170318/iterator-pattern/</id>
    <published>2017-03-18T04:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.337Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;迭代器模式，又叫做游标模式，是行为型设计模式之一。我们知道对容器对象的访问必然会涉及遍历算法，我们可以将遍历的方法封装在容器中，或者不提供遍历方法，让使用容器的人自己去实现去吧。这两种情况好像都能够解决问题。&lt;br&gt;然而在前一种情况，容器承受了过多的功能，它不仅要负责自己“容器”内的元素维护（添加、删除等等），而且还要提供遍历自身的接口；而且由于遍历状态保存的问题，不能对同一个容器对象同时进行多个遍历。第二种方式倒是省事，却又将容器的内部细节暴露无遗。&lt;br&gt;正因于此，迭代器模式应运而生，在客户访问类与容器体之间插入一个第三者–迭代器，很好的解决了上述弊端。&lt;br&gt;定义：提供一种方法顺序访问一个容器对象中的各个元素，而又不需要暴露该对象的内部表示。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 状态模式</title>
    <link href="https://www.weicools.com/20170318/state-pattern/"/>
    <id>https://www.weicools.com/20170318/state-pattern/</id>
    <published>2017-03-18T04:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.345Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;定义：状态模式中的行为是由状态来决定，不同的状态下有不同的行为。当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 策略模式</title>
    <link href="https://www.weicools.com/20170318/stragety/"/>
    <id>https://www.weicools.com/20170318/stragety/</id>
    <published>2017-03-18T04:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.346Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通常如果一个问题有多个解决方案时，最简单的就是利用if-else或者switch-case方式根据不同的情景选择不同的解决方案，但是这样耦合性太高 、代码臃肿、难以维护等。这时就可以使用策略模式来解决。&lt;br&gt;定义：策略模式定义了一系列的算法，并将每一个算法封装起来，而且使他们还可以相互替换。策略模式让算法独立于使用它的客户而独立变化。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 模板方法模式</title>
    <link href="https://www.weicools.com/20170318/template-method-pattern/"/>
    <id>https://www.weicools.com/20170318/template-method-pattern/</id>
    <published>2017-03-18T04:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.347Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;模板方法模式是结构最简单的行为型设计模式，也是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。在其结构中只存在父类与子类之间的继承关系。&lt;br&gt;定义：定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 桥接模式</title>
    <link href="https://www.weicools.com/20170318/bridge-pattern/"/>
    <id>https://www.weicools.com/20170318/bridge-pattern/</id>
    <published>2017-03-18T02:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.325Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 外观模式</title>
    <link href="https://www.weicools.com/20170318/facade-pattern/"/>
    <id>https://www.weicools.com/20170318/facade-pattern/</id>
    <published>2017-03-18T02:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.330Z</updated>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;外观模式(Facade)是结构型设计模式之一，它在开发中的运用频率非常高，尤其是在SDK模块上，是我们封装API的常用手段。我们经常使用的三方SDK基本都使用的外观模式，这样可以对用户屏蔽很多实现细节，降低用户使用成本。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 装饰着模式</title>
    <link href="https://www.weicools.com/20170318/decorator-pattern/"/>
    <id>https://www.weicools.com/20170318/decorator-pattern/</id>
    <published>2017-03-18T00:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.327Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
  <entry>
    <title>《Android 源码设计模式解析与实战》读书笔记 - 代理模式</title>
    <link href="https://www.weicools.com/20170317/proxy-pattern/"/>
    <id>https://www.weicools.com/20170317/proxy-pattern/</id>
    <published>2017-03-17T02:16:27.000Z</published>
    <updated>2019-05-13T08:10:00.339Z</updated>
    
    <summary type="html">
    
      
      
        
        
          &lt;link rel=&quot;stylesheet&quot; class=&quot;aplayer-secondary-style-marker&quot; href=&quot;/assets/css/APlayer.min.css&quot;&gt;&lt;script src=&quot;/assets/js/APlayer.min.js&quot;
        
      
    
    </summary>
    
    
      <category term="Java" scheme="https://www.weicools.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://www.weicools.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="Android" scheme="https://www.weicools.com/tags/Android/"/>
    
  </entry>
  
</feed>
